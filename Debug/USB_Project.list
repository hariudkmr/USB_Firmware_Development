
USB_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001be4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08001d94  08001d94  00011d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f08  08001f08  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001f08  08001f08  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f08  08001f08  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f08  08001f08  00011f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f0c  08001f0c  00011f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001f10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000068  08001f78  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08001f78  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002a3a  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009da  00000000  00000000  00022ad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d8  00000000  00000000  000234b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000180  00000000  00000000  00023688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001945a  00000000  00000000  00023808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000214f  00000000  00000000  0003cc62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c99d  00000000  00000000  0003edb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cb74e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f2c  00000000  00000000  000cb7a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000084  00000000  00000000  000cc6d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000117  00000000  00000000  000cc754  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001d7c 	.word	0x08001d7c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08001d7c 	.word	0x08001d7c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000298:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800029c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80002a0:	f003 0301 	and.w	r3, r3, #1
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d013      	beq.n	80002d0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80002a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002ac:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80002b0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d00b      	beq.n	80002d0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002b8:	e000      	b.n	80002bc <ITM_SendChar+0x2c>
    {
      __NOP();
 80002ba:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d0f9      	beq.n	80002ba <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002c6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002d0:	687b      	ldr	r3, [r7, #4]
}
 80002d2:	4618      	mov	r0, r3
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr

080002de <_write>:

/** \brief Redirects `printf()` output to the serial wire out (SWO).
 * This function overrides a weak function symbol and is not to be used directly.
 */
int _write(int file, char *ptr, int len)
{
 80002de:	b580      	push	{r7, lr}
 80002e0:	b086      	sub	sp, #24
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	60f8      	str	r0, [r7, #12]
 80002e6:	60b9      	str	r1, [r7, #8]
 80002e8:	607a      	str	r2, [r7, #4]
  int i=0;
 80002ea:	2300      	movs	r3, #0
 80002ec:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80002ee:	2300      	movs	r3, #0
 80002f0:	617b      	str	r3, [r7, #20]
 80002f2:	e009      	b.n	8000308 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	1c5a      	adds	r2, r3, #1
 80002f8:	60ba      	str	r2, [r7, #8]
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	4618      	mov	r0, r3
 80002fe:	f7ff ffc7 	bl	8000290 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000302:	697b      	ldr	r3, [r7, #20]
 8000304:	3301      	adds	r3, #1
 8000306:	617b      	str	r3, [r7, #20]
 8000308:	697a      	ldr	r2, [r7, #20]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	429a      	cmp	r2, r3
 800030e:	dbf1      	blt.n	80002f4 <_write+0x16>

  return len;
 8000310:	687b      	ldr	r3, [r7, #4]
}
 8000312:	4618      	mov	r0, r3
 8000314:	3718      	adds	r7, #24
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <_get_log_level_string>:

char const * const _get_log_level_string(LogLevel const log_level)
{
 800031c:	b480      	push	{r7}
 800031e:	b085      	sub	sp, #20
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	71fb      	strb	r3, [r7, #7]
    char *ptr;
	switch(log_level)
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	2b02      	cmp	r3, #2
 800032a:	d00a      	beq.n	8000342 <_get_log_level_string+0x26>
 800032c:	2b02      	cmp	r3, #2
 800032e:	dc0a      	bgt.n	8000346 <_get_log_level_string+0x2a>
 8000330:	2b00      	cmp	r3, #0
 8000332:	d002      	beq.n	800033a <_get_log_level_string+0x1e>
 8000334:	2b01      	cmp	r3, #1
 8000336:	d002      	beq.n	800033e <_get_log_level_string+0x22>
 8000338:	e005      	b.n	8000346 <_get_log_level_string+0x2a>
    {
        case LOG_LEVEL_ERROR:
        	ptr = "ERROR";
 800033a:	4b06      	ldr	r3, [pc, #24]	; (8000354 <_get_log_level_string+0x38>)
 800033c:	60fb      	str	r3, [r7, #12]
        case LOG_LEVEL_INFORMATION:
        	ptr =  "INFO";
 800033e:	4b06      	ldr	r3, [pc, #24]	; (8000358 <_get_log_level_string+0x3c>)
 8000340:	60fb      	str	r3, [r7, #12]
        case LOG_LEVEL_DEBUG:
        	ptr =  "DEBUG";
 8000342:	4b06      	ldr	r3, [pc, #24]	; (800035c <_get_log_level_string+0x40>)
 8000344:	60fb      	str	r3, [r7, #12]
    }
	return ptr;
 8000346:	68fb      	ldr	r3, [r7, #12]
}
 8000348:	4618      	mov	r0, r3
 800034a:	3714      	adds	r7, #20
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	08001d94 	.word	0x08001d94
 8000358:	08001d9c 	.word	0x08001d9c
 800035c:	08001da4 	.word	0x08001da4

08000360 <_log>:

static void _log(LogLevel const log_level, char const * const format, va_list args)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	60b9      	str	r1, [r7, #8]
 800036a:	607a      	str	r2, [r7, #4]
 800036c:	73fb      	strb	r3, [r7, #15]
    if (log_level > system_log_level){
 800036e:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <_log+0x4c>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	7bfa      	ldrb	r2, [r7, #15]
 8000374:	429a      	cmp	r2, r3
 8000376:	d814      	bhi.n	80003a2 <_log+0x42>
        return;
    }

	printf("[%s] ", _get_log_level_string(log_level));
 8000378:	7bfb      	ldrb	r3, [r7, #15]
 800037a:	4618      	mov	r0, r3
 800037c:	f7ff ffce 	bl	800031c <_get_log_level_string>
 8000380:	4603      	mov	r3, r0
 8000382:	4619      	mov	r1, r3
 8000384:	480a      	ldr	r0, [pc, #40]	; (80003b0 <_log+0x50>)
 8000386:	f000 fffd 	bl	8001384 <iprintf>
	vfprintf(stdout, format, args);
 800038a:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <_log+0x54>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	68b9      	ldr	r1, [r7, #8]
 8000394:	4618      	mov	r0, r3
 8000396:	f000 fe57 	bl	8001048 <vfiprintf>
	printf("\n");
 800039a:	200a      	movs	r0, #10
 800039c:	f001 f80a 	bl	80013b4 <putchar>
 80003a0:	e000      	b.n	80003a4 <_log+0x44>
        return;
 80003a2:	bf00      	nop
}
 80003a4:	3710      	adds	r7, #16
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	20000000 	.word	0x20000000
 80003b0:	08001dac 	.word	0x08001dac
 80003b4:	20000004 	.word	0x20000004

080003b8 <log_info>:
    _log(LOG_LEVEL_ERROR, format, args);
    va_end(args);
}

void log_info(char const * const format, ...)
{
 80003b8:	b40f      	push	{r0, r1, r2, r3}
 80003ba:	b580      	push	{r7, lr}
 80003bc:	b082      	sub	sp, #8
 80003be:	af00      	add	r7, sp, #0
    va_list args;
	va_start(args, format);
 80003c0:	f107 0314 	add.w	r3, r7, #20
 80003c4:	607b      	str	r3, [r7, #4]
    _log(LOG_LEVEL_INFORMATION, format, args);
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	6939      	ldr	r1, [r7, #16]
 80003ca:	2001      	movs	r0, #1
 80003cc:	f7ff ffc8 	bl	8000360 <_log>
    va_end(args);
}
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80003da:	b004      	add	sp, #16
 80003dc:	4770      	bx	lr
	...

080003e0 <main>:

UsbDevice usb_device;
uint32_t buffer[8];

int main(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	log_info("Program Entry-Point");
 80003e4:	4805      	ldr	r0, [pc, #20]	; (80003fc <main+0x1c>)
 80003e6:	f7ff ffe7 	bl	80003b8 <log_info>
	usb_device.ptr_out_buffer = &buffer;
 80003ea:	4b05      	ldr	r3, [pc, #20]	; (8000400 <main+0x20>)
 80003ec:	4a05      	ldr	r2, [pc, #20]	; (8000404 <main+0x24>)
 80003ee:	605a      	str	r2, [r3, #4]

	usbd_initialize(&usb_device);
 80003f0:	4803      	ldr	r0, [pc, #12]	; (8000400 <main+0x20>)
 80003f2:	f000 fc15 	bl	8000c20 <usbd_initialize>
    /* Loop forever */
	for(;;)
	{
		usbd_poll();
 80003f6:	f000 fc33 	bl	8000c60 <usbd_poll>
 80003fa:	e7fc      	b.n	80003f6 <main+0x16>
 80003fc:	08001dd4 	.word	0x08001dd4
 8000400:	20000094 	.word	0x20000094
 8000404:	200000a8 	.word	0x200000a8

08000408 <configure_clock>:

LogLevel system_log_level = LOG_LEVEL_DEBUG;
uint32_t SystemCoreClock = 72000000; // 72 MHz

static void configure_clock()
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
	// Configures flash latency.
	MODIFY_REG(FLASH->ACR,
 800040c:	4b25      	ldr	r3, [pc, #148]	; (80004a4 <configure_clock+0x9c>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	f023 0307 	bic.w	r3, r3, #7
 8000414:	4a23      	ldr	r2, [pc, #140]	; (80004a4 <configure_clock+0x9c>)
 8000416:	f043 0302 	orr.w	r3, r3, #2
 800041a:	6013      	str	r3, [r2, #0]
		FLASH_ACR_LATENCY,
		_VAL2FLD(FLASH_ACR_LATENCY, FLASH_ACR_LATENCY_2WS) //FLASH_ACR_LATENCY_2WS << FLASH_ACR_LATENCY_Pos
	);

	// Enables HSE.
	SET_BIT(RCC->CR, RCC_CR_HSEON);
 800041c:	4b22      	ldr	r3, [pc, #136]	; (80004a8 <configure_clock+0xa0>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a21      	ldr	r2, [pc, #132]	; (80004a8 <configure_clock+0xa0>)
 8000422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000426:	6013      	str	r3, [r2, #0]

	// Waits until HSE is stable.
	while (!READ_BIT(RCC->CR, RCC_CR_HSERDY));
 8000428:	bf00      	nop
 800042a:	4b1f      	ldr	r3, [pc, #124]	; (80004a8 <configure_clock+0xa0>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000432:	2b00      	cmp	r3, #0
 8000434:	d0f9      	beq.n	800042a <configure_clock+0x22>

	// Configures PLL: source = HSE, PLLCLK = 72MHz.
	MODIFY_REG(RCC->PLLCFGR,
 8000436:	4b1c      	ldr	r3, [pc, #112]	; (80004a8 <configure_clock+0xa0>)
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	4a1c      	ldr	r2, [pc, #112]	; (80004ac <configure_clock+0xa4>)
 800043c:	401a      	ands	r2, r3
 800043e:	491a      	ldr	r1, [pc, #104]	; (80004a8 <configure_clock+0xa0>)
 8000440:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <configure_clock+0xa8>)
 8000442:	4313      	orrs	r3, r2
 8000444:	604b      	str	r3, [r1, #4]
		RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ | RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLP,
		_VAL2FLD(RCC_PLLCFGR_PLLM, 4) | _VAL2FLD(RCC_PLLCFGR_PLLN, 72) | _VAL2FLD(RCC_PLLCFGR_PLLQ, 3) | RCC_PLLCFGR_PLLSRC_HSE
	);

	// Enables PLL module.
	SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000446:	4b18      	ldr	r3, [pc, #96]	; (80004a8 <configure_clock+0xa0>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4a17      	ldr	r2, [pc, #92]	; (80004a8 <configure_clock+0xa0>)
 800044c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000450:	6013      	str	r3, [r2, #0]

	// Waits until PLL is stable.
	while (!READ_BIT(RCC->CR, RCC_CR_PLLRDY));
 8000452:	bf00      	nop
 8000454:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <configure_clock+0xa0>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800045c:	2b00      	cmp	r3, #0
 800045e:	d0f9      	beq.n	8000454 <configure_clock+0x4c>

	// Switches system clock to PLL.
	MODIFY_REG(RCC->CFGR,
 8000460:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <configure_clock+0xa0>)
 8000462:	689b      	ldr	r3, [r3, #8]
 8000464:	f023 0303 	bic.w	r3, r3, #3
 8000468:	4a0f      	ldr	r2, [pc, #60]	; (80004a8 <configure_clock+0xa0>)
 800046a:	f043 0302 	orr.w	r3, r3, #2
 800046e:	6093      	str	r3, [r2, #8]
		RCC_CFGR_SW,
		_VAL2FLD(RCC_CFGR_SW, RCC_CFGR_SW_PLL)
	);

	// Configures PPRE1 = 2, (PPRE2 = 1, HPRE = 1 by default).
	MODIFY_REG(RCC->CFGR,
 8000470:	4b0d      	ldr	r3, [pc, #52]	; (80004a8 <configure_clock+0xa0>)
 8000472:	689b      	ldr	r3, [r3, #8]
 8000474:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000478:	4a0b      	ldr	r2, [pc, #44]	; (80004a8 <configure_clock+0xa0>)
 800047a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800047e:	6093      	str	r3, [r2, #8]
		RCC_CFGR_PPRE1,
		_VAL2FLD(RCC_CFGR_PPRE1, 4)
	);

	// Waits until PLL is used.
	while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000480:	bf00      	nop
 8000482:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <configure_clock+0xa0>)
 8000484:	689b      	ldr	r3, [r3, #8]
 8000486:	f003 030c 	and.w	r3, r3, #12
 800048a:	2b08      	cmp	r3, #8
 800048c:	d1f9      	bne.n	8000482 <configure_clock+0x7a>

	// Disables HSI.
	CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800048e:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <configure_clock+0xa0>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a05      	ldr	r2, [pc, #20]	; (80004a8 <configure_clock+0xa0>)
 8000494:	f023 0301 	bic.w	r3, r3, #1
 8000498:	6013      	str	r3, [r2, #0]
}
 800049a:	bf00      	nop
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	40023c00 	.word	0x40023c00
 80004a8:	40023800 	.word	0x40023800
 80004ac:	f0bc8000 	.word	0xf0bc8000
 80004b0:	03401204 	.word	0x03401204

080004b4 <SystemInit>:
		_VAL2FLD(GPIO_MODER_MODER8, 2)
	);
}

void SystemInit(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
//	configure_mco1();
	configure_clock();
 80004b8:	f7ff ffa6 	bl	8000408 <configure_clock>
}
 80004bc:	bf00      	nop
 80004be:	bd80      	pop	{r7, pc}

080004c0 <IN_ENDPOINT>:

/** \brief Returns the structure contains the registers of a specific IN endpoint.
 * \param endpoint_number The number of the IN endpoint we want to access its registers.
 */
inline static USB_OTG_INEndpointTypeDef * IN_ENDPOINT(uint8_t endpoint_number)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
    return (USB_OTG_INEndpointTypeDef *)(USB_OTG_FS_PERIPH_BASE + USB_OTG_IN_ENDPOINT_BASE + (endpoint_number * 0x20));
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	015b      	lsls	r3, r3, #5
 80004ce:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
 80004d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr

080004e2 <OUT_ENDPOINT>:

/** \brief Returns the structure contains the registers of a specific OUT endpoint.
 * \param endpoint_number The number of the OUT endpoint we want to access its registers.
 */
inline static USB_OTG_OUTEndpointTypeDef * OUT_ENDPOINT(uint8_t endpoint_number)
{
 80004e2:	b480      	push	{r7}
 80004e4:	b083      	sub	sp, #12
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	4603      	mov	r3, r0
 80004ea:	71fb      	strb	r3, [r7, #7]
    return (USB_OTG_OUTEndpointTypeDef *)(USB_OTG_FS_PERIPH_BASE + USB_OTG_OUT_ENDPOINT_BASE + (endpoint_number * 0x20));
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	015b      	lsls	r3, r3, #5
 80004f0:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
 80004f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <FIFO>:

inline static __IO uint32_t *FIFO(uint8_t endpoint_number)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
    return (__IO uint32_t *)(USB_OTG_FS_PERIPH_BASE + USB_OTG_FIFO_BASE + (endpoint_number * 0x1000));
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	031b      	lsls	r3, r3, #12
 8000512:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
 8000516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
}
 800051a:	4618      	mov	r0, r3
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
	...

08000528 <initialize_gpio_pins>:
#include "logger.h"
#include "usb_driver.h"
#include "usb_standards.h"

static void initialize_gpio_pins()
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
	// Enables the clock for GPIOA.
	SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOAEN);
 800052c:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <initialize_gpio_pins+0x3c>)
 800052e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000530:	4a0c      	ldr	r2, [pc, #48]	; (8000564 <initialize_gpio_pins+0x3c>)
 8000532:	f043 0301 	orr.w	r3, r3, #1
 8000536:	6313      	str	r3, [r2, #48]	; 0x30

	// Sets alternate function 10 for: PA11 (-), and PA12 (+).
	MODIFY_REG(GPIOA->AFR[1],
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <initialize_gpio_pins+0x40>)
 800053a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800053c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8000540:	4a09      	ldr	r2, [pc, #36]	; (8000568 <initialize_gpio_pins+0x40>)
 8000542:	f443 232a 	orr.w	r3, r3, #696320	; 0xaa000
 8000546:	6253      	str	r3, [r2, #36]	; 0x24
		GPIO_AFRH_AFSEL11 | GPIO_AFRH_AFSEL12,
		_VAL2FLD(GPIO_AFRH_AFSEL11, 0xA) | _VAL2FLD(GPIO_AFRH_AFSEL12, 0xA)
	);

	// Configures USB pins (in GPIOA) to work in alternate function mode.
	MODIFY_REG(GPIOA->MODER,
 8000548:	4b07      	ldr	r3, [pc, #28]	; (8000568 <initialize_gpio_pins+0x40>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f023 7370 	bic.w	r3, r3, #62914560	; 0x3c00000
 8000550:	4a05      	ldr	r2, [pc, #20]	; (8000568 <initialize_gpio_pins+0x40>)
 8000552:	f043 7320 	orr.w	r3, r3, #41943040	; 0x2800000
 8000556:	6013      	str	r3, [r2, #0]
		GPIO_MODER_MODER11 | GPIO_MODER_MODER12,
		_VAL2FLD(GPIO_MODER_MODER11, 2) | _VAL2FLD(GPIO_MODER_MODER12, 2)
	);
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40023800 	.word	0x40023800
 8000568:	40020000 	.word	0x40020000

0800056c <initialize_core>:

static void initialize_core()
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
	// Enables the clock for USB core FullSpeed
	SET_BIT(RCC->AHB2ENR, RCC_AHB2ENR_OTGFSEN);
 8000570:	4b1d      	ldr	r3, [pc, #116]	; (80005e8 <initialize_core+0x7c>)
 8000572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000574:	4a1c      	ldr	r2, [pc, #112]	; (80005e8 <initialize_core+0x7c>)
 8000576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800057a:	6353      	str	r3, [r2, #52]	; 0x34

	// Configures the USB core to run in device mode, and to use the embedded full-speed PHY.
	MODIFY_REG(USB_OTG_FS->GUSBCFG,
 800057c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000580:	68db      	ldr	r3, [r3, #12]
 8000582:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000586:	f423 5371 	bic.w	r3, r3, #15424	; 0x3c40
 800058a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800058e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000592:	f443 5311 	orr.w	r3, r3, #9280	; 0x2440
 8000596:	60d3      	str	r3, [r2, #12]
		USB_OTG_GUSBCFG_FDMOD | USB_OTG_GUSBCFG_PHYSEL | USB_OTG_GUSBCFG_TRDT,
		USB_OTG_GUSBCFG_FDMOD | USB_OTG_GUSBCFG_PHYSEL | _VAL2FLD(USB_OTG_GUSBCFG_TRDT, 0x09)
	);

	// Configures the device to run in full speed mode.
	MODIFY_REG(USB_OTG_FS_DEVICE->DCFG,
 8000598:	4b14      	ldr	r3, [pc, #80]	; (80005ec <initialize_core+0x80>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a13      	ldr	r2, [pc, #76]	; (80005ec <initialize_core+0x80>)
 800059e:	f043 0303 	orr.w	r3, r3, #3
 80005a2:	6013      	str	r3, [r2, #0]
		USB_OTG_DCFG_DSPD,
		_VAL2FLD(USB_OTG_DCFG_DSPD, 0x03)
	);

	// Enables VBUS sensing device.
	SET_BIT(USB_OTG_FS->GCCFG, USB_OTG_GCCFG_VBUSBSEN);
 80005a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80005a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80005ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005b2:	6393      	str	r3, [r2, #56]	; 0x38

	// Unmasks the main USB core interrupts.
	SET_BIT(USB_OTG_FS->GINTMSK,
 80005b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80005b8:	699a      	ldr	r2, [r3, #24]
 80005ba:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80005be:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <initialize_core+0x84>)
 80005c0:	4313      	orrs	r3, r2
 80005c2:	618b      	str	r3, [r1, #24]
		USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_WUIM | USB_OTG_GINTMSK_IEPINT |
		USB_OTG_GINTSTS_OEPINT | USB_OTG_GINTMSK_RXFLVLM
	);

	// Clears all pending core interrupts.
	WRITE_REG(USB_OTG_FS->GINTSTS, 0xFFFFFFFF);
 80005c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80005c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005cc:	615a      	str	r2, [r3, #20]

	// Unmasks USB global interrupt.
	SET_BIT(USB_OTG_FS->GAHBCFG, USB_OTG_GAHBCFG_GINT);
 80005ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6093      	str	r3, [r2, #8]

}
 80005de:	bf00      	nop
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	40023800 	.word	0x40023800
 80005ec:	50000800 	.word	0x50000800
 80005f0:	800c3818 	.word	0x800c3818

080005f4 <connect>:

/** \brief Connects the USB device to the bus.
 */
static void connect()
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
	// Powers the transceivers on.
    SET_BIT(USB_OTG_FS->GCCFG, USB_OTG_GCCFG_PWRDWN);
 80005f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80005fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000606:	6393      	str	r3, [r2, #56]	; 0x38

	// Connects the device to the bus.
    CLEAR_BIT(USB_OTG_FS_DEVICE->DCTL, USB_OTG_DCTL_SDIS);
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <connect+0x2c>)
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	4a04      	ldr	r2, [pc, #16]	; (8000620 <connect+0x2c>)
 800060e:	f023 0302 	bic.w	r3, r3, #2
 8000612:	6053      	str	r3, [r2, #4]
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	50000800 	.word	0x50000800

08000624 <disconnect>:

/** \brief Disconnects the USB device from the bus.
 */
static void disconnect()
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
	// Disconnects the device from the bus.
	SET_BIT(USB_OTG_FS_DEVICE->DCTL, USB_OTG_DCTL_SDIS);
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <disconnect+0x44>)
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	4a0e      	ldr	r2, [pc, #56]	; (8000668 <disconnect+0x44>)
 800062e:	f043 0302 	orr.w	r3, r3, #2
 8000632:	6053      	str	r3, [r2, #4]

	// Powers the transceivers off.
	CLEAR_BIT(USB_OTG_FS->GCCFG, USB_OTG_GCCFG_PWRDWN);
 8000634:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800063a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800063e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000642:	6393      	str	r3, [r2, #56]	; 0x38

	// Unmasks transfer completed interrupts for all endpoints.
	SET_BIT(USB_OTG_FS_DEVICE->DOEPMSK, USB_OTG_DOEPMSK_XFRCM);
 8000644:	4b08      	ldr	r3, [pc, #32]	; (8000668 <disconnect+0x44>)
 8000646:	695b      	ldr	r3, [r3, #20]
 8000648:	4a07      	ldr	r2, [pc, #28]	; (8000668 <disconnect+0x44>)
 800064a:	f043 0301 	orr.w	r3, r3, #1
 800064e:	6153      	str	r3, [r2, #20]
	SET_BIT(USB_OTG_FS_DEVICE->DIEPMSK, USB_OTG_DIEPMSK_XFRCM);
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <disconnect+0x44>)
 8000652:	691b      	ldr	r3, [r3, #16]
 8000654:	4a04      	ldr	r2, [pc, #16]	; (8000668 <disconnect+0x44>)
 8000656:	f043 0301 	orr.w	r3, r3, #1
 800065a:	6113      	str	r3, [r2, #16]
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	50000800 	.word	0x50000800

0800066c <set_device_address>:

static void set_device_address(uint8_t address)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
    MODIFY_REG(
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <set_device_address+0x2c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	011b      	lsls	r3, r3, #4
 8000682:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8000686:	4904      	ldr	r1, [pc, #16]	; (8000698 <set_device_address+0x2c>)
 8000688:	4313      	orrs	r3, r2
 800068a:	600b      	str	r3, [r1, #0]
		USB_OTG_FS_DEVICE->DCFG,
		USB_OTG_DCFG_DAD,
		_VAL2FLD(USB_OTG_DCFG_DAD, address)
	);
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	50000800 	.word	0x50000800

0800069c <read_packet>:
/** \brief Pops data from the RxFIFO and stores it in the buffer.
 * \param buffer Pointer to the buffer, in which the popped data will be stored.
 * \param size Count of bytes to be popped from the dedicated RxFIFO memory.
 */
static void read_packet(void *buffer, uint16_t size)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	460b      	mov	r3, r1
 80006a6:	807b      	strh	r3, [r7, #2]
	// Note: There is only one RxFIFO.
	uint32_t *fifo = FIFO(0);
 80006a8:	2000      	movs	r0, #0
 80006aa:	f7ff ff2b 	bl	8000504 <FIFO>
 80006ae:	6138      	str	r0, [r7, #16]

	for (; size >= 4; size -=4, buffer += 4)
 80006b0:	e00b      	b.n	80006ca <read_packet+0x2e>
	{
		// Pops one 32-bit word of data (until there is less than one word remaining).
		uint32_t data = *fifo;
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	60fb      	str	r3, [r7, #12]
		// Stores the data in the buffer.
		*((uint32_t*)buffer) = data;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	68fa      	ldr	r2, [r7, #12]
 80006bc:	601a      	str	r2, [r3, #0]
	for (; size >= 4; size -=4, buffer += 4)
 80006be:	887b      	ldrh	r3, [r7, #2]
 80006c0:	3b04      	subs	r3, #4
 80006c2:	807b      	strh	r3, [r7, #2]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	3304      	adds	r3, #4
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	887b      	ldrh	r3, [r7, #2]
 80006cc:	2b03      	cmp	r3, #3
 80006ce:	d8f0      	bhi.n	80006b2 <read_packet+0x16>
	}

	if (size > 0)
 80006d0:	887b      	ldrh	r3, [r7, #2]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d013      	beq.n	80006fe <read_packet+0x62>
	{
		// Pops the last remaining bytes (which are less than one word).
		uint32_t data = *fifo;
 80006d6:	693b      	ldr	r3, [r7, #16]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	617b      	str	r3, [r7, #20]

		for(; size > 0; size--, buffer++, data >>= 8)
 80006dc:	e00c      	b.n	80006f8 <read_packet+0x5c>
		{
			// Stores the data in the buffer with the correct alignment.
			*((uint8_t*)buffer) = 0xFF & data;
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	701a      	strb	r2, [r3, #0]
		for(; size > 0; size--, buffer++, data >>= 8)
 80006e6:	887b      	ldrh	r3, [r7, #2]
 80006e8:	3b01      	subs	r3, #1
 80006ea:	807b      	strh	r3, [r7, #2]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	3301      	adds	r3, #1
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	0a1b      	lsrs	r3, r3, #8
 80006f6:	617b      	str	r3, [r7, #20]
 80006f8:	887b      	ldrh	r3, [r7, #2]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d1ef      	bne.n	80006de <read_packet+0x42>
		}
	}
}
 80006fe:	bf00      	nop
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <write_packet>:
 * \param endpoint_number The number of the endpoint, to which the data will be written.
 * \param buffer Pointer to the buffer contains the data to be written to the endpoint.
 * \param size The size of data to be written in bytes.
 */
static void write_packet(uint8_t endpoint_number, void const *buffer, uint16_t size)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	b084      	sub	sp, #16
 800070a:	af00      	add	r7, sp, #0
 800070c:	4603      	mov	r3, r0
 800070e:	6039      	str	r1, [r7, #0]
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	4613      	mov	r3, r2
 8000714:	80bb      	strh	r3, [r7, #4]
	uint32_t *fifo = FIFO(endpoint_number);
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff fef3 	bl	8000504 <FIFO>
 800071e:	60f8      	str	r0, [r7, #12]
	USB_OTG_INEndpointTypeDef *in_endpoint = IN_ENDPOINT(endpoint_number);
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff fecc 	bl	80004c0 <IN_ENDPOINT>
 8000728:	60b8      	str	r0, [r7, #8]

	// Configures the transmission (1 packet that has `size` bytes).
	MODIFY_REG(in_endpoint->DIEPTSIZ,
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	691b      	ldr	r3, [r3, #16]
 800072e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8000732:	88bb      	ldrh	r3, [r7, #4]
 8000734:	4313      	orrs	r3, r2
 8000736:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	611a      	str	r2, [r3, #16]
		USB_OTG_DIEPTSIZ_PKTCNT | USB_OTG_DIEPTSIZ_XFRSIZ,
		_VAL2FLD(USB_OTG_DIEPTSIZ_PKTCNT, 1) | _VAL2FLD(USB_OTG_DIEPTSIZ_XFRSIZ, size)
	);

	// Enables the transmission after clearing both STALL and NAK of the endpoint.
	MODIFY_REG(in_endpoint->DIEPCTL,
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f023 4304 	bic.w	r3, r3, #2214592512	; 0x84000000
 8000746:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800074a:	f043 4204 	orr.w	r2, r3, #2214592512	; 0x84000000
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	601a      	str	r2, [r3, #0]
		USB_OTG_DIEPCTL_STALL,
		USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA
	);

	// Gets the size in term of 32-bit words (to avoid integer overflow in the loop).
	size = (size + 3) / 4;
 8000752:	88bb      	ldrh	r3, [r7, #4]
 8000754:	3303      	adds	r3, #3
 8000756:	2b00      	cmp	r3, #0
 8000758:	da00      	bge.n	800075c <write_packet+0x56>
 800075a:	3303      	adds	r3, #3
 800075c:	109b      	asrs	r3, r3, #2
 800075e:	80bb      	strh	r3, [r7, #4]

	for (; size > 0; size--, buffer += 4)
 8000760:	e009      	b.n	8000776 <write_packet+0x70>
	{
		// Pushes the data to the TxFIFO.
		*fifo = *((uint32_t *)buffer);
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	601a      	str	r2, [r3, #0]
	for (; size > 0; size--, buffer += 4)
 800076a:	88bb      	ldrh	r3, [r7, #4]
 800076c:	3b01      	subs	r3, #1
 800076e:	80bb      	strh	r3, [r7, #4]
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	3304      	adds	r3, #4
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	88bb      	ldrh	r3, [r7, #4]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1f2      	bne.n	8000762 <write_packet+0x5c>
	}
}
 800077c:	bf00      	nop
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <refresh_fifo_start_addresses>:


/** \brief Updates the start addresses of all FIFOs according to the size of each FIFO.
 */
static void refresh_fifo_start_addresses()
{
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
	// The first changeable start address begins after the region of RxFIFO.
	uint16_t start_address = _FLD2VAL(USB_OTG_GRXFSIZ_RXFD, USB_OTG_FS->GRXFSIZ) * 4;
 800078c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000792:	b29b      	uxth	r3, r3
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	80fb      	strh	r3, [r7, #6]

	// Updates the start address of the TxFIFO0.
	MODIFY_REG(USB_OTG_FS->DIEPTXF0_HNPTXFSIZ,
 8000798:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800079c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800079e:	0c1b      	lsrs	r3, r3, #16
 80007a0:	041b      	lsls	r3, r3, #16
 80007a2:	88fa      	ldrh	r2, [r7, #6]
 80007a4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80007a8:	4313      	orrs	r3, r2
 80007aa:	628b      	str	r3, [r1, #40]	; 0x28
		USB_OTG_TX0FSA,
		_VAL2FLD(USB_OTG_TX0FSA, start_address)
	);

	// The next start address is after where the last TxFIFO ends.
	start_address += _FLD2VAL(USB_OTG_TX0FD, USB_OTG_FS->DIEPTXF0_HNPTXFSIZ) * 4;
 80007ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80007b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007b2:	0c1b      	lsrs	r3, r3, #16
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	88fb      	ldrh	r3, [r7, #6]
 80007bc:	4413      	add	r3, r2
 80007be:	80fb      	strh	r3, [r7, #6]

	// Updates the start addresses of the rest TxFIFOs.
	for (uint8_t txfifo_number = 0; txfifo_number < ENDPOINT_COUNT - 1; txfifo_number++)
 80007c0:	2300      	movs	r3, #0
 80007c2:	717b      	strb	r3, [r7, #5]
 80007c4:	e023      	b.n	800080e <refresh_fifo_start_addresses+0x88>
	{
		MODIFY_REG(USB_OTG_FS->DIEPTXF[txfifo_number],
 80007c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007ca:	797b      	ldrb	r3, [r7, #5]
 80007cc:	3340      	adds	r3, #64	; 0x40
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	4413      	add	r3, r2
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	0c1b      	lsrs	r3, r3, #16
 80007d6:	041b      	lsls	r3, r3, #16
 80007d8:	88fa      	ldrh	r2, [r7, #6]
 80007da:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80007de:	7979      	ldrb	r1, [r7, #5]
 80007e0:	431a      	orrs	r2, r3
 80007e2:	f101 0340 	add.w	r3, r1, #64	; 0x40
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	4403      	add	r3, r0
 80007ea:	605a      	str	r2, [r3, #4]
			USB_OTG_NPTXFSA,
			_VAL2FLD(USB_OTG_NPTXFSA, start_address)
		);

		start_address += _FLD2VAL(USB_OTG_NPTXFD, USB_OTG_FS->DIEPTXF[txfifo_number]) * 4;
 80007ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007f0:	797b      	ldrb	r3, [r7, #5]
 80007f2:	3340      	adds	r3, #64	; 0x40
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	4413      	add	r3, r2
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	0c1b      	lsrs	r3, r3, #16
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	b29a      	uxth	r2, r3
 8000802:	88fb      	ldrh	r3, [r7, #6]
 8000804:	4413      	add	r3, r2
 8000806:	80fb      	strh	r3, [r7, #6]
	for (uint8_t txfifo_number = 0; txfifo_number < ENDPOINT_COUNT - 1; txfifo_number++)
 8000808:	797b      	ldrb	r3, [r7, #5]
 800080a:	3301      	adds	r3, #1
 800080c:	717b      	strb	r3, [r7, #5]
 800080e:	797b      	ldrb	r3, [r7, #5]
 8000810:	2b04      	cmp	r3, #4
 8000812:	d9d8      	bls.n	80007c6 <refresh_fifo_start_addresses+0x40>
	}
}
 8000814:	bf00      	nop
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <configure_rxfifo_size>:
/** \brief Configures the RxFIFO of all OUT endpoints.
 * \param size The size of the largest OUT endpoint in bytes.
 * \note The RxFIFO is shared between all OUT endpoints.
 */
static void configure_rxfifo_size(uint16_t size)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
 8000828:	4603      	mov	r3, r0
 800082a:	80fb      	strh	r3, [r7, #6]
	// Considers the space required to save status packets in RxFIFO and gets the size in term of 32-bit words.
	size = 10 + (2 * ((size / 4) + 1));
 800082c:	88fb      	ldrh	r3, [r7, #6]
 800082e:	089b      	lsrs	r3, r3, #2
 8000830:	b29b      	uxth	r3, r3
 8000832:	3306      	adds	r3, #6
 8000834:	b29b      	uxth	r3, r3
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	80fb      	strh	r3, [r7, #6]

	// Configures the depth of the FIFO.
	MODIFY_REG(USB_OTG_FS->GRXFSIZ,
 800083a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800083e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000840:	0c1b      	lsrs	r3, r3, #16
 8000842:	041b      	lsls	r3, r3, #16
 8000844:	88fa      	ldrh	r2, [r7, #6]
 8000846:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800084a:	4313      	orrs	r3, r2
 800084c:	624b      	str	r3, [r1, #36]	; 0x24
		USB_OTG_GRXFSIZ_RXFD,
		_VAL2FLD(USB_OTG_GRXFSIZ_RXFD, size)
	);

	refresh_fifo_start_addresses();
 800084e:	f7ff ff9a 	bl	8000786 <refresh_fifo_start_addresses>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <configure_txfifo_size>:
 * \param endpoint_number The number of the IN endpoint we want to configure its TxFIFO
 * \param size The size of the IN endpoint in bytes.
 * \note Any change on any FIFO will update the the registers of all TxFIFOs to adapt the start offsets in the FIFO dedicated memory.
 */
static void configure_txfifo_size(uint8_t endpoint_number, uint16_t size)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	4603      	mov	r3, r0
 8000862:	460a      	mov	r2, r1
 8000864:	71fb      	strb	r3, [r7, #7]
 8000866:	4613      	mov	r3, r2
 8000868:	80bb      	strh	r3, [r7, #4]
	// Gets the FIFO size in term of 32-bit words.
	size = (size + 3) / 4;
 800086a:	88bb      	ldrh	r3, [r7, #4]
 800086c:	3303      	adds	r3, #3
 800086e:	2b00      	cmp	r3, #0
 8000870:	da00      	bge.n	8000874 <configure_txfifo_size+0x1a>
 8000872:	3303      	adds	r3, #3
 8000874:	109b      	asrs	r3, r3, #2
 8000876:	80bb      	strh	r3, [r7, #4]

	// Configures the depth of the TxFIFO.
	if (endpoint_number == 0)
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d10a      	bne.n	8000894 <configure_txfifo_size+0x3a>
	{
		MODIFY_REG(USB_OTG_FS->DIEPTXF0_HNPTXFSIZ,
 800087e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000884:	b29a      	uxth	r2, r3
 8000886:	88bb      	ldrh	r3, [r7, #4]
 8000888:	041b      	lsls	r3, r3, #16
 800088a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800088e:	4313      	orrs	r3, r2
 8000890:	628b      	str	r3, [r1, #40]	; 0x28
 8000892:	e013      	b.n	80008bc <configure_txfifo_size+0x62>
			_VAL2FLD(USB_OTG_TX0FD, size)
		);
	}
	else
	{
		MODIFY_REG(USB_OTG_FS->DIEPTXF[endpoint_number - 1],
 8000894:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	3b01      	subs	r3, #1
 800089c:	3340      	adds	r3, #64	; 0x40
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	4413      	add	r3, r2
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	b299      	uxth	r1, r3
 80008a6:	88bb      	ldrh	r3, [r7, #4]
 80008a8:	041a      	lsls	r2, r3, #16
 80008aa:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	3b01      	subs	r3, #1
 80008b2:	430a      	orrs	r2, r1
 80008b4:	3340      	adds	r3, #64	; 0x40
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	4403      	add	r3, r0
 80008ba:	605a      	str	r2, [r3, #4]
			USB_OTG_NPTXFD,
			_VAL2FLD(USB_OTG_NPTXFD, size)
		);
	}

	refresh_fifo_start_addresses();
 80008bc:	f7ff ff63 	bl	8000786 <refresh_fifo_start_addresses>
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <flush_rxfifo>:

/** \brief Flushes the RxFIFO of all OUT endpoints.
 */
static void flush_rxfifo()
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
	SET_BIT(USB_OTG_FS->GRSTCTL, USB_OTG_GRSTCTL_RXFFLSH);
 80008cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80008d0:	691b      	ldr	r3, [r3, #16]
 80008d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008d6:	f043 0310 	orr.w	r3, r3, #16
 80008da:	6113      	str	r3, [r2, #16]
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <flush_txfifo>:

/** \brief Flushes the TxFIFO of an IN endpoint.
 * \param endpoint_number The number of an IN endpoint to flush its TxFIFO.
 */
static void flush_txfifo(uint8_t endpoint_number)
{
 80008e6:	b480      	push	{r7}
 80008e8:	b083      	sub	sp, #12
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	4603      	mov	r3, r0
 80008ee:	71fb      	strb	r3, [r7, #7]
	// Sets the number of the TxFIFO to be flushed and then triggers the flush.
	MODIFY_REG(USB_OTG_FS->GRSTCTL,
 80008f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80008f4:	691b      	ldr	r3, [r3, #16]
 80008f6:	f423 62f8 	bic.w	r2, r3, #1984	; 0x7c0
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	019b      	lsls	r3, r3, #6
 80008fe:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000902:	4313      	orrs	r3, r2
 8000904:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000908:	f043 0320 	orr.w	r3, r3, #32
 800090c:	6113      	str	r3, [r2, #16]
		USB_OTG_GRSTCTL_TXFNUM,
		_VAL2FLD(USB_OTG_GRSTCTL_TXFNUM, endpoint_number) | USB_OTG_GRSTCTL_TXFFLSH
	);
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
	...

0800091c <configure_endpoint0>:

static void configure_endpoint0(uint8_t endpoint_size)
{
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
	// Unmasks all interrupts of IN and OUT endpoint0.
	SET_BIT(USB_OTG_FS_DEVICE->DAINTMSK, 1 << 0 | 1 << 16);
 8000926:	4b18      	ldr	r3, [pc, #96]	; (8000988 <configure_endpoint0+0x6c>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	4a17      	ldr	r2, [pc, #92]	; (8000988 <configure_endpoint0+0x6c>)
 800092c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8000930:	61d3      	str	r3, [r2, #28]

	// Configures the maximum packet size, activates the endpoint, and NAK the endpoint (cannot send data yet).
	MODIFY_REG(IN_ENDPOINT(0)->DIEPCTL,
 8000932:	2000      	movs	r0, #0
 8000934:	f7ff fdc4 	bl	80004c0 <IN_ENDPOINT>
 8000938:	4603      	mov	r3, r0
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000940:	f023 0307 	bic.w	r3, r3, #7
 8000944:	79fa      	ldrb	r2, [r7, #7]
 8000946:	ea43 0402 	orr.w	r4, r3, r2
 800094a:	2000      	movs	r0, #0
 800094c:	f7ff fdb8 	bl	80004c0 <IN_ENDPOINT>
 8000950:	4602      	mov	r2, r0
 8000952:	f044 6300 	orr.w	r3, r4, #134217728	; 0x8000000
 8000956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800095a:	6013      	str	r3, [r2, #0]
		USB_OTG_DIEPCTL_MPSIZ,
		USB_OTG_DIEPCTL_USBAEP | _VAL2FLD(USB_OTG_DIEPCTL_MPSIZ, endpoint_size) | USB_OTG_DIEPCTL_SNAK
	);

	// Clears NAK, and enables endpoint data transmission.
	SET_BIT(OUT_ENDPOINT(0)->DOEPCTL,
 800095c:	2000      	movs	r0, #0
 800095e:	f7ff fdc0 	bl	80004e2 <OUT_ENDPOINT>
 8000962:	4603      	mov	r3, r0
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800096a:	601a      	str	r2, [r3, #0]
		USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK
	);

	// Note: 64 bytes is the maximum packet size for full speed USB devices.
	configure_rxfifo_size(64);
 800096c:	2040      	movs	r0, #64	; 0x40
 800096e:	f7ff ff58 	bl	8000822 <configure_rxfifo_size>
	configure_txfifo_size(0, endpoint_size);
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	b29b      	uxth	r3, r3
 8000976:	4619      	mov	r1, r3
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ff6e 	bl	800085a <configure_txfifo_size>
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	bd90      	pop	{r4, r7, pc}
 8000986:	bf00      	nop
 8000988:	50000800 	.word	0x50000800

0800098c <configure_in_endpoint>:

static void configure_in_endpoint(uint8_t endpoint_number, UsbEndpointType endpoint_type, uint16_t endpoint_size)
{
 800098c:	b590      	push	{r4, r7, lr}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
 8000996:	460b      	mov	r3, r1
 8000998:	71bb      	strb	r3, [r7, #6]
 800099a:	4613      	mov	r3, r2
 800099c:	80bb      	strh	r3, [r7, #4]
	// Unmasks all interrupts of the targeted IN endpoint.
	SET_BIT(USB_OTG_FS_DEVICE->DAINTMSK, 1 << endpoint_number);
 800099e:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <configure_in_endpoint+0x7c>)
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	79fa      	ldrb	r2, [r7, #7]
 80009a4:	2101      	movs	r1, #1
 80009a6:	fa01 f202 	lsl.w	r2, r1, r2
 80009aa:	4611      	mov	r1, r2
 80009ac:	4a16      	ldr	r2, [pc, #88]	; (8000a08 <configure_in_endpoint+0x7c>)
 80009ae:	430b      	orrs	r3, r1
 80009b0:	61d3      	str	r3, [r2, #28]

	// Activates the endpoint, sets endpoint handshake to NAK (not ready to send data), sets DATA0 packet identifier,
	// configures its type, its maximum packet size, and assigns it a TxFIFO.
	MODIFY_REG(IN_ENDPOINT(endpoint_number)->DIEPCTL,
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fd83 	bl	80004c0 <IN_ENDPOINT>
 80009ba:	4603      	mov	r3, r0
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <configure_in_endpoint+0x80>)
 80009c0:	4013      	ands	r3, r2
 80009c2:	88ba      	ldrh	r2, [r7, #4]
 80009c4:	f3c2 010a 	ubfx	r1, r2, #0, #11
 80009c8:	79ba      	ldrb	r2, [r7, #6]
 80009ca:	0492      	lsls	r2, r2, #18
 80009cc:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80009d0:	4311      	orrs	r1, r2
 80009d2:	79fa      	ldrb	r2, [r7, #7]
 80009d4:	0592      	lsls	r2, r2, #22
 80009d6:	f002 7270 	and.w	r2, r2, #62914560	; 0x3c00000
 80009da:	430a      	orrs	r2, r1
 80009dc:	ea43 0402 	orr.w	r4, r3, r2
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff fd6c 	bl	80004c0 <IN_ENDPOINT>
 80009e8:	4602      	mov	r2, r0
 80009ea:	f044 53c0 	orr.w	r3, r4, #402653184	; 0x18000000
 80009ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009f2:	6013      	str	r3, [r2, #0]
		USB_OTG_DIEPCTL_MPSIZ | USB_OTG_DIEPCTL_EPTYP | USB_OTG_DIEPCTL_TXFNUM,
		USB_OTG_DIEPCTL_USBAEP | _VAL2FLD(USB_OTG_DIEPCTL_MPSIZ, endpoint_size) | USB_OTG_DIEPCTL_SNAK |
		_VAL2FLD(USB_OTG_DIEPCTL_EPTYP, endpoint_type) | _VAL2FLD(USB_OTG_DIEPCTL_TXFNUM, endpoint_number) | USB_OTG_DIEPCTL_SD0PID_SEVNFRM
	);

	configure_txfifo_size(endpoint_number, endpoint_size);
 80009f4:	88ba      	ldrh	r2, [r7, #4]
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	4611      	mov	r1, r2
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff ff2d 	bl	800085a <configure_txfifo_size>
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd90      	pop	{r4, r7, pc}
 8000a08:	50000800 	.word	0x50000800
 8000a0c:	fc33f800 	.word	0xfc33f800

08000a10 <deconfigure_endpoint>:

/** \brief Deconfigures IN and OUT endpoints of a specific endpoint number.
 * \param endpoint_number The number of the IN and OUT endpoints to deconfigure.
 */
static void deconfigure_endpoint(uint8_t endpoint_number)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
	USB_OTG_INEndpointTypeDef *in_endpoint = IN_ENDPOINT(endpoint_number);
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fd4f 	bl	80004c0 <IN_ENDPOINT>
 8000a22:	60f8      	str	r0, [r7, #12]
	USB_OTG_OUTEndpointTypeDef *out_endpoint = OUT_ENDPOINT(endpoint_number);
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff fd5b 	bl	80004e2 <OUT_ENDPOINT>
 8000a2c:	60b8      	str	r0, [r7, #8]

	// Masks all interrupts of the targeted IN and OUT endpoints.
	CLEAR_BIT(USB_OTG_FS_DEVICE->DAINTMSK,
 8000a2e:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <deconfigure_endpoint+0xb8>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	79fa      	ldrb	r2, [r7, #7]
 8000a34:	2101      	movs	r1, #1
 8000a36:	4091      	lsls	r1, r2
 8000a38:	79fa      	ldrb	r2, [r7, #7]
 8000a3a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a42:	430a      	orrs	r2, r1
 8000a44:	43d2      	mvns	r2, r2
 8000a46:	4611      	mov	r1, r2
 8000a48:	4a1f      	ldr	r2, [pc, #124]	; (8000ac8 <deconfigure_endpoint+0xb8>)
 8000a4a:	400b      	ands	r3, r1
 8000a4c:	61d3      	str	r3, [r2, #28]
		(1 << endpoint_number) | (1 << 16 << endpoint_number)
	);

	// Clears all interrupts of the endpoint.
	SET_BIT(in_endpoint->DIEPINT, 0x29FF);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	f443 5327 	orr.w	r3, r3, #10688	; 0x29c0
 8000a56:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	6093      	str	r3, [r2, #8]
	SET_BIT(out_endpoint->DOEPINT, 0x71FF);
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	f443 43e3 	orr.w	r3, r3, #29056	; 0x7180
 8000a66:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	6093      	str	r3, [r2, #8]

	// Disables the endpoints if possible.
	if (in_endpoint->DIEPCTL & USB_OTG_DIEPCTL_EPENA)
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	da05      	bge.n	8000a82 <deconfigure_endpoint+0x72>
	{
		// Disables endpoint transmission.
		SET_BIT(in_endpoint->DIEPCTL, USB_OTG_DIEPCTL_EPDIS);
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	601a      	str	r2, [r3, #0]
	}

	// Deactivates the endpoint.
	CLEAR_BIT(in_endpoint->DIEPCTL, USB_OTG_DIEPCTL_USBAEP);
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	601a      	str	r2, [r3, #0]

	if (endpoint_number != 0)
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d00f      	beq.n	8000ab4 <deconfigure_endpoint+0xa4>
	{
		if (out_endpoint->DOEPCTL & USB_OTG_DOEPCTL_EPENA)
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	da05      	bge.n	8000aa8 <deconfigure_endpoint+0x98>
		{
			// Disables endpoint transmission.
			SET_BIT(out_endpoint->DOEPCTL, USB_OTG_DOEPCTL_EPDIS);
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	601a      	str	r2, [r3, #0]
		}

		// Deactivates the endpoint.
		CLEAR_BIT(out_endpoint->DOEPCTL, USB_OTG_DOEPCTL_USBAEP);
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	601a      	str	r2, [r3, #0]
	}

	// Flushes the FIFOs.
	flush_txfifo(endpoint_number);
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ff15 	bl	80008e6 <flush_txfifo>
	flush_rxfifo();
 8000abc:	f7ff ff04 	bl	80008c8 <flush_rxfifo>
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	50000800 	.word	0x50000800

08000acc <enumdne_handler>:

static void enumdne_handler()
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	log_info("USB device speed enumeration done.");
 8000ad0:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <enumdne_handler+0x14>)
 8000ad2:	f7ff fc71 	bl	80003b8 <log_info>
	configure_endpoint0(8);
 8000ad6:	2008      	movs	r0, #8
 8000ad8:	f7ff ff20 	bl	800091c <configure_endpoint0>
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	08001de8 	.word	0x08001de8

08000ae4 <rxflvl_handler>:

static void rxflvl_handler()
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
	 // Pops the status information word from the RxFIFO.
	uint32_t receive_status = USB_OTG_FS_GLOBAL->GRXSTSP;
 8000aea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000aee:	6a1b      	ldr	r3, [r3, #32]
 8000af0:	60fb      	str	r3, [r7, #12]

	// The endpoint that received the data.
	uint8_t endpoint_number = _FLD2VAL(USB_OTG_GRXSTSP_EPNUM, receive_status);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	f003 030f 	and.w	r3, r3, #15
 8000afa:	72fb      	strb	r3, [r7, #11]
	// The count of bytes in the received packet.
	uint16_t bcnt = _FLD2VAL(USB_OTG_GRXSTSP_BCNT, receive_status);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	091b      	lsrs	r3, r3, #4
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b06:	813b      	strh	r3, [r7, #8]
	// The status of the received packet.
	uint16_t pktsts = _FLD2VAL(USB_OTG_GRXSTSP_PKTSTS, receive_status);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	0c5b      	lsrs	r3, r3, #17
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	f003 030f 	and.w	r3, r3, #15
 8000b12:	80fb      	strh	r3, [r7, #6]

	switch (pktsts)
 8000b14:	88fb      	ldrh	r3, [r7, #6]
 8000b16:	3b02      	subs	r3, #2
 8000b18:	2b04      	cmp	r3, #4
 8000b1a:	d81f      	bhi.n	8000b5c <rxflvl_handler+0x78>
 8000b1c:	a201      	add	r2, pc, #4	; (adr r2, 8000b24 <rxflvl_handler+0x40>)
 8000b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b22:	bf00      	nop
 8000b24:	08000b5b 	.word	0x08000b5b
 8000b28:	08000b5b 	.word	0x08000b5b
 8000b2c:	08000b47 	.word	0x08000b47
 8000b30:	08000b5d 	.word	0x08000b5d
 8000b34:	08000b39 	.word	0x08000b39
	{
	case 0x06: // SETUP packet (includes data).
		usb_events.on_setup_data_received(endpoint_number, bcnt);
 8000b38:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <rxflvl_handler+0x80>)
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	8939      	ldrh	r1, [r7, #8]
 8000b3e:	7afa      	ldrb	r2, [r7, #11]
 8000b40:	4610      	mov	r0, r2
 8000b42:	4798      	blx	r3
		break;
 8000b44:	e00a      	b.n	8000b5c <rxflvl_handler+0x78>
    	// ToDo
		break;

    case 0x04: // SETUP stage has completed.
    	// Re-enables the transmission on the endpoint.
		SET_BIT(OUT_ENDPOINT(endpoint_number)->DOEPCTL,
 8000b46:	7afb      	ldrb	r3, [r7, #11]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fcca 	bl	80004e2 <OUT_ENDPOINT>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8000b56:	601a      	str	r2, [r3, #0]
		USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
    	break;
 8000b58:	e000      	b.n	8000b5c <rxflvl_handler+0x78>
		break;
 8000b5a:	bf00      	nop

    case 0x03: // OUT transfer has completed.
    	break;
	}
}
 8000b5c:	bf00      	nop
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	08001e58 	.word	0x08001e58

08000b68 <usbrst_handler>:

static void usbrst_handler()
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
	log_info("USB reset signal was detected");
 8000b6e:	480a      	ldr	r0, [pc, #40]	; (8000b98 <usbrst_handler+0x30>)
 8000b70:	f7ff fc22 	bl	80003b8 <log_info>
	for (uint8_t i = 0; i <= ENDPOINT_COUNT; i++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	71fb      	strb	r3, [r7, #7]
 8000b78:	e006      	b.n	8000b88 <usbrst_handler+0x20>
	{
		deconfigure_endpoint(i);
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ff47 	bl	8000a10 <deconfigure_endpoint>
	for (uint8_t i = 0; i <= ENDPOINT_COUNT; i++)
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	3301      	adds	r3, #1
 8000b86:	71fb      	strb	r3, [r7, #7]
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	2b06      	cmp	r3, #6
 8000b8c:	d9f5      	bls.n	8000b7a <usbrst_handler+0x12>
	}

}
 8000b8e:	bf00      	nop
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	08001e0c 	.word	0x08001e0c

08000b9c <gintsts_handler>:

static void gintsts_handler()
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
	volatile uint32_t gintsts = USB_OTG_FS_GLOBAL->GINTSTS;
 8000ba2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ba6:	695b      	ldr	r3, [r3, #20]
 8000ba8:	607b      	str	r3, [r7, #4]

	if (gintsts & USB_OTG_GINTSTS_USBRST)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d00a      	beq.n	8000bca <gintsts_handler+0x2e>
	{
		usbrst_handler();
 8000bb4:	f7ff ffd8 	bl	8000b68 <usbrst_handler>
		// Clears the interrupt.
		SET_BIT(USB_OTG_FS_GLOBAL->GINTSTS, USB_OTG_GINTSTS_USBRST);
 8000bb8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bc6:	6153      	str	r3, [r2, #20]
	{

	}


}
 8000bc8:	e025      	b.n	8000c16 <gintsts_handler+0x7a>
	else if (gintsts & USB_OTG_GINTSTS_ENUMDNE)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d00a      	beq.n	8000bea <gintsts_handler+0x4e>
		enumdne_handler();
 8000bd4:	f7ff ff7a 	bl	8000acc <enumdne_handler>
		SET_BIT(USB_OTG_FS_GLOBAL->GINTSTS, USB_OTG_GINTSTS_ENUMDNE);
 8000bd8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000be2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000be6:	6153      	str	r3, [r2, #20]
}
 8000be8:	e015      	b.n	8000c16 <gintsts_handler+0x7a>
	else if (gintsts & USB_OTG_GINTSTS_RXFLVL)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	f003 0310 	and.w	r3, r3, #16
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d00a      	beq.n	8000c0a <gintsts_handler+0x6e>
		rxflvl_handler();
 8000bf4:	f7ff ff76 	bl	8000ae4 <rxflvl_handler>
		SET_BIT(USB_OTG_FS_GLOBAL->GINTSTS, USB_OTG_GINTSTS_RXFLVL);
 8000bf8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c02:	f043 0310 	orr.w	r3, r3, #16
 8000c06:	6153      	str	r3, [r2, #20]
}
 8000c08:	e005      	b.n	8000c16 <gintsts_handler+0x7a>
	else if (gintsts & USB_OTG_GINTSTS_IEPINT)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d100      	bne.n	8000c16 <gintsts_handler+0x7a>
	else if (gintsts & USB_OTG_GINTSTS_OEPINT)
 8000c14:	687b      	ldr	r3, [r7, #4]
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <usbd_initialize>:
#include "usb_device.h"


static UsbDevice *usbd_handle;

void usbd_initialize(UsbDevice *usb_device){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]

	usbd_handle = usb_device;
 8000c28:	4a07      	ldr	r2, [pc, #28]	; (8000c48 <usbd_initialize+0x28>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6013      	str	r3, [r2, #0]
	usb_driver.initialize_gpio_pins();
 8000c2e:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <usbd_initialize+0x2c>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	4798      	blx	r3
	usb_driver.initialize_core();
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <usbd_initialize+0x2c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4798      	blx	r3
	usb_driver.connect();
 8000c3a:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <usbd_initialize+0x2c>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	4798      	blx	r3


}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000084 	.word	0x20000084
 8000c4c:	08001e2c 	.word	0x08001e2c

08000c50 <process_request>:

static void process_request(){
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <usbd_poll>:

void usbd_poll()
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	usb_driver.poll();
 8000c64:	4b02      	ldr	r3, [pc, #8]	; (8000c70 <usbd_poll+0x10>)
 8000c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c68:	4798      	blx	r3
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	08001e2c 	.word	0x08001e2c

08000c74 <usb_reset_received_handler>:

static void usb_reset_received_handler()
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
	usbd_handle->in_data_size = 0;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <usb_reset_received_handler+0x38>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
	usbd_handle->out_data_size = 0;
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <usb_reset_received_handler+0x38>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
	usbd_handle->configuration_value = 0;
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <usb_reset_received_handler+0x38>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	709a      	strb	r2, [r3, #2]
	usbd_handle->device_state = USB_DEVICE_STATE_DEFAULT;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <usb_reset_received_handler+0x38>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2200      	movs	r2, #0
 8000c96:	701a      	strb	r2, [r3, #0]
	usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_SETUP;
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <usb_reset_received_handler+0x38>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	705a      	strb	r2, [r3, #1]
	usb_driver.set_device_address(0);
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <usb_reset_received_handler+0x3c>)
 8000ca2:	691b      	ldr	r3, [r3, #16]
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	4798      	blx	r3
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000084 	.word	0x20000084
 8000cb0:	08001e2c 	.word	0x08001e2c

08000cb4 <setup_data_received_handler>:

static void setup_data_received_handler(uint8_t endpointnumber, uint16_t byte_count){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	460a      	mov	r2, r1
 8000cbe:	71fb      	strb	r3, [r7, #7]
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	80bb      	strh	r3, [r7, #4]

	usb_driver.read_packet(usbd_handle->ptr_out_buffer, byte_count);
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <setup_data_received_handler+0x2c>)
 8000cc6:	6a1b      	ldr	r3, [r3, #32]
 8000cc8:	4a06      	ldr	r2, [pc, #24]	; (8000ce4 <setup_data_received_handler+0x30>)
 8000cca:	6812      	ldr	r2, [r2, #0]
 8000ccc:	6852      	ldr	r2, [r2, #4]
 8000cce:	88b9      	ldrh	r1, [r7, #4]
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	4798      	blx	r3
	process_request();
 8000cd4:	f7ff ffbc 	bl	8000c50 <process_request>

}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	08001e2c 	.word	0x08001e2c
 8000ce4:	20000084 	.word	0x20000084

08000ce8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ce8:	480d      	ldr	r0, [pc, #52]	; (8000d20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cea:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cec:	f7ff fbe2 	bl	80004b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf0:	480c      	ldr	r0, [pc, #48]	; (8000d24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cf2:	490d      	ldr	r1, [pc, #52]	; (8000d28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cf4:	4a0d      	ldr	r2, [pc, #52]	; (8000d2c <LoopForever+0xe>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf8:	e002      	b.n	8000d00 <LoopCopyDataInit>

08000cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfe:	3304      	adds	r3, #4

08000d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d04:	d3f9      	bcc.n	8000cfa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d06:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d08:	4c0a      	ldr	r4, [pc, #40]	; (8000d34 <LoopForever+0x16>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d0c:	e001      	b.n	8000d12 <LoopFillZerobss>

08000d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d10:	3204      	adds	r2, #4

08000d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d14:	d3fb      	bcc.n	8000d0e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d16:	f000 f811 	bl	8000d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d1a:	f7ff fb61 	bl	80003e0 <main>

08000d1e <LoopForever>:

LoopForever:
    b LoopForever
 8000d1e:	e7fe      	b.n	8000d1e <LoopForever>
  ldr   r0, =_estack
 8000d20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d28:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d2c:	08001f10 	.word	0x08001f10
  ldr r2, =_sbss
 8000d30:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d34:	200000d8 	.word	0x200000d8

08000d38 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d38:	e7fe      	b.n	8000d38 <ADC_IRQHandler>
	...

08000d3c <__libc_init_array>:
 8000d3c:	b570      	push	{r4, r5, r6, lr}
 8000d3e:	4d0d      	ldr	r5, [pc, #52]	; (8000d74 <__libc_init_array+0x38>)
 8000d40:	4c0d      	ldr	r4, [pc, #52]	; (8000d78 <__libc_init_array+0x3c>)
 8000d42:	1b64      	subs	r4, r4, r5
 8000d44:	10a4      	asrs	r4, r4, #2
 8000d46:	2600      	movs	r6, #0
 8000d48:	42a6      	cmp	r6, r4
 8000d4a:	d109      	bne.n	8000d60 <__libc_init_array+0x24>
 8000d4c:	4d0b      	ldr	r5, [pc, #44]	; (8000d7c <__libc_init_array+0x40>)
 8000d4e:	4c0c      	ldr	r4, [pc, #48]	; (8000d80 <__libc_init_array+0x44>)
 8000d50:	f001 f814 	bl	8001d7c <_init>
 8000d54:	1b64      	subs	r4, r4, r5
 8000d56:	10a4      	asrs	r4, r4, #2
 8000d58:	2600      	movs	r6, #0
 8000d5a:	42a6      	cmp	r6, r4
 8000d5c:	d105      	bne.n	8000d6a <__libc_init_array+0x2e>
 8000d5e:	bd70      	pop	{r4, r5, r6, pc}
 8000d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d64:	4798      	blx	r3
 8000d66:	3601      	adds	r6, #1
 8000d68:	e7ee      	b.n	8000d48 <__libc_init_array+0xc>
 8000d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d6e:	4798      	blx	r3
 8000d70:	3601      	adds	r6, #1
 8000d72:	e7f2      	b.n	8000d5a <__libc_init_array+0x1e>
 8000d74:	08001f08 	.word	0x08001f08
 8000d78:	08001f08 	.word	0x08001f08
 8000d7c:	08001f08 	.word	0x08001f08
 8000d80:	08001f0c 	.word	0x08001f0c

08000d84 <memset>:
 8000d84:	4402      	add	r2, r0
 8000d86:	4603      	mov	r3, r0
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d100      	bne.n	8000d8e <memset+0xa>
 8000d8c:	4770      	bx	lr
 8000d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8000d92:	e7f9      	b.n	8000d88 <memset+0x4>

08000d94 <__sfputc_r>:
 8000d94:	6893      	ldr	r3, [r2, #8]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	b410      	push	{r4}
 8000d9c:	6093      	str	r3, [r2, #8]
 8000d9e:	da08      	bge.n	8000db2 <__sfputc_r+0x1e>
 8000da0:	6994      	ldr	r4, [r2, #24]
 8000da2:	42a3      	cmp	r3, r4
 8000da4:	db01      	blt.n	8000daa <__sfputc_r+0x16>
 8000da6:	290a      	cmp	r1, #10
 8000da8:	d103      	bne.n	8000db2 <__sfputc_r+0x1e>
 8000daa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000dae:	f000 bb17 	b.w	80013e0 <__swbuf_r>
 8000db2:	6813      	ldr	r3, [r2, #0]
 8000db4:	1c58      	adds	r0, r3, #1
 8000db6:	6010      	str	r0, [r2, #0]
 8000db8:	7019      	strb	r1, [r3, #0]
 8000dba:	4608      	mov	r0, r1
 8000dbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <__sfputs_r>:
 8000dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dc4:	4606      	mov	r6, r0
 8000dc6:	460f      	mov	r7, r1
 8000dc8:	4614      	mov	r4, r2
 8000dca:	18d5      	adds	r5, r2, r3
 8000dcc:	42ac      	cmp	r4, r5
 8000dce:	d101      	bne.n	8000dd4 <__sfputs_r+0x12>
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	e007      	b.n	8000de4 <__sfputs_r+0x22>
 8000dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dd8:	463a      	mov	r2, r7
 8000dda:	4630      	mov	r0, r6
 8000ddc:	f7ff ffda 	bl	8000d94 <__sfputc_r>
 8000de0:	1c43      	adds	r3, r0, #1
 8000de2:	d1f3      	bne.n	8000dcc <__sfputs_r+0xa>
 8000de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000de8 <_vfiprintf_r>:
 8000de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dec:	460d      	mov	r5, r1
 8000dee:	b09d      	sub	sp, #116	; 0x74
 8000df0:	4614      	mov	r4, r2
 8000df2:	4698      	mov	r8, r3
 8000df4:	4606      	mov	r6, r0
 8000df6:	b118      	cbz	r0, 8000e00 <_vfiprintf_r+0x18>
 8000df8:	6983      	ldr	r3, [r0, #24]
 8000dfa:	b90b      	cbnz	r3, 8000e00 <_vfiprintf_r+0x18>
 8000dfc:	f000 fcca 	bl	8001794 <__sinit>
 8000e00:	4b89      	ldr	r3, [pc, #548]	; (8001028 <_vfiprintf_r+0x240>)
 8000e02:	429d      	cmp	r5, r3
 8000e04:	d11b      	bne.n	8000e3e <_vfiprintf_r+0x56>
 8000e06:	6875      	ldr	r5, [r6, #4]
 8000e08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e0a:	07d9      	lsls	r1, r3, #31
 8000e0c:	d405      	bmi.n	8000e1a <_vfiprintf_r+0x32>
 8000e0e:	89ab      	ldrh	r3, [r5, #12]
 8000e10:	059a      	lsls	r2, r3, #22
 8000e12:	d402      	bmi.n	8000e1a <_vfiprintf_r+0x32>
 8000e14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e16:	f000 fd5b 	bl	80018d0 <__retarget_lock_acquire_recursive>
 8000e1a:	89ab      	ldrh	r3, [r5, #12]
 8000e1c:	071b      	lsls	r3, r3, #28
 8000e1e:	d501      	bpl.n	8000e24 <_vfiprintf_r+0x3c>
 8000e20:	692b      	ldr	r3, [r5, #16]
 8000e22:	b9eb      	cbnz	r3, 8000e60 <_vfiprintf_r+0x78>
 8000e24:	4629      	mov	r1, r5
 8000e26:	4630      	mov	r0, r6
 8000e28:	f000 fb2c 	bl	8001484 <__swsetup_r>
 8000e2c:	b1c0      	cbz	r0, 8000e60 <_vfiprintf_r+0x78>
 8000e2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e30:	07dc      	lsls	r4, r3, #31
 8000e32:	d50e      	bpl.n	8000e52 <_vfiprintf_r+0x6a>
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e38:	b01d      	add	sp, #116	; 0x74
 8000e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e3e:	4b7b      	ldr	r3, [pc, #492]	; (800102c <_vfiprintf_r+0x244>)
 8000e40:	429d      	cmp	r5, r3
 8000e42:	d101      	bne.n	8000e48 <_vfiprintf_r+0x60>
 8000e44:	68b5      	ldr	r5, [r6, #8]
 8000e46:	e7df      	b.n	8000e08 <_vfiprintf_r+0x20>
 8000e48:	4b79      	ldr	r3, [pc, #484]	; (8001030 <_vfiprintf_r+0x248>)
 8000e4a:	429d      	cmp	r5, r3
 8000e4c:	bf08      	it	eq
 8000e4e:	68f5      	ldreq	r5, [r6, #12]
 8000e50:	e7da      	b.n	8000e08 <_vfiprintf_r+0x20>
 8000e52:	89ab      	ldrh	r3, [r5, #12]
 8000e54:	0598      	lsls	r0, r3, #22
 8000e56:	d4ed      	bmi.n	8000e34 <_vfiprintf_r+0x4c>
 8000e58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e5a:	f000 fd3a 	bl	80018d2 <__retarget_lock_release_recursive>
 8000e5e:	e7e9      	b.n	8000e34 <_vfiprintf_r+0x4c>
 8000e60:	2300      	movs	r3, #0
 8000e62:	9309      	str	r3, [sp, #36]	; 0x24
 8000e64:	2320      	movs	r3, #32
 8000e66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000e6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8000e6e:	2330      	movs	r3, #48	; 0x30
 8000e70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001034 <_vfiprintf_r+0x24c>
 8000e74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000e78:	f04f 0901 	mov.w	r9, #1
 8000e7c:	4623      	mov	r3, r4
 8000e7e:	469a      	mov	sl, r3
 8000e80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e84:	b10a      	cbz	r2, 8000e8a <_vfiprintf_r+0xa2>
 8000e86:	2a25      	cmp	r2, #37	; 0x25
 8000e88:	d1f9      	bne.n	8000e7e <_vfiprintf_r+0x96>
 8000e8a:	ebba 0b04 	subs.w	fp, sl, r4
 8000e8e:	d00b      	beq.n	8000ea8 <_vfiprintf_r+0xc0>
 8000e90:	465b      	mov	r3, fp
 8000e92:	4622      	mov	r2, r4
 8000e94:	4629      	mov	r1, r5
 8000e96:	4630      	mov	r0, r6
 8000e98:	f7ff ff93 	bl	8000dc2 <__sfputs_r>
 8000e9c:	3001      	adds	r0, #1
 8000e9e:	f000 80aa 	beq.w	8000ff6 <_vfiprintf_r+0x20e>
 8000ea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ea4:	445a      	add	r2, fp
 8000ea6:	9209      	str	r2, [sp, #36]	; 0x24
 8000ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f000 80a2 	beq.w	8000ff6 <_vfiprintf_r+0x20e>
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000eb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ebc:	f10a 0a01 	add.w	sl, sl, #1
 8000ec0:	9304      	str	r3, [sp, #16]
 8000ec2:	9307      	str	r3, [sp, #28]
 8000ec4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000ec8:	931a      	str	r3, [sp, #104]	; 0x68
 8000eca:	4654      	mov	r4, sl
 8000ecc:	2205      	movs	r2, #5
 8000ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ed2:	4858      	ldr	r0, [pc, #352]	; (8001034 <_vfiprintf_r+0x24c>)
 8000ed4:	f7ff f98c 	bl	80001f0 <memchr>
 8000ed8:	9a04      	ldr	r2, [sp, #16]
 8000eda:	b9d8      	cbnz	r0, 8000f14 <_vfiprintf_r+0x12c>
 8000edc:	06d1      	lsls	r1, r2, #27
 8000ede:	bf44      	itt	mi
 8000ee0:	2320      	movmi	r3, #32
 8000ee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ee6:	0713      	lsls	r3, r2, #28
 8000ee8:	bf44      	itt	mi
 8000eea:	232b      	movmi	r3, #43	; 0x2b
 8000eec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8000ef4:	2b2a      	cmp	r3, #42	; 0x2a
 8000ef6:	d015      	beq.n	8000f24 <_vfiprintf_r+0x13c>
 8000ef8:	9a07      	ldr	r2, [sp, #28]
 8000efa:	4654      	mov	r4, sl
 8000efc:	2000      	movs	r0, #0
 8000efe:	f04f 0c0a 	mov.w	ip, #10
 8000f02:	4621      	mov	r1, r4
 8000f04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000f08:	3b30      	subs	r3, #48	; 0x30
 8000f0a:	2b09      	cmp	r3, #9
 8000f0c:	d94e      	bls.n	8000fac <_vfiprintf_r+0x1c4>
 8000f0e:	b1b0      	cbz	r0, 8000f3e <_vfiprintf_r+0x156>
 8000f10:	9207      	str	r2, [sp, #28]
 8000f12:	e014      	b.n	8000f3e <_vfiprintf_r+0x156>
 8000f14:	eba0 0308 	sub.w	r3, r0, r8
 8000f18:	fa09 f303 	lsl.w	r3, r9, r3
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	9304      	str	r3, [sp, #16]
 8000f20:	46a2      	mov	sl, r4
 8000f22:	e7d2      	b.n	8000eca <_vfiprintf_r+0xe2>
 8000f24:	9b03      	ldr	r3, [sp, #12]
 8000f26:	1d19      	adds	r1, r3, #4
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	9103      	str	r1, [sp, #12]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	bfbb      	ittet	lt
 8000f30:	425b      	neglt	r3, r3
 8000f32:	f042 0202 	orrlt.w	r2, r2, #2
 8000f36:	9307      	strge	r3, [sp, #28]
 8000f38:	9307      	strlt	r3, [sp, #28]
 8000f3a:	bfb8      	it	lt
 8000f3c:	9204      	strlt	r2, [sp, #16]
 8000f3e:	7823      	ldrb	r3, [r4, #0]
 8000f40:	2b2e      	cmp	r3, #46	; 0x2e
 8000f42:	d10c      	bne.n	8000f5e <_vfiprintf_r+0x176>
 8000f44:	7863      	ldrb	r3, [r4, #1]
 8000f46:	2b2a      	cmp	r3, #42	; 0x2a
 8000f48:	d135      	bne.n	8000fb6 <_vfiprintf_r+0x1ce>
 8000f4a:	9b03      	ldr	r3, [sp, #12]
 8000f4c:	1d1a      	adds	r2, r3, #4
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	9203      	str	r2, [sp, #12]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	bfb8      	it	lt
 8000f56:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000f5a:	3402      	adds	r4, #2
 8000f5c:	9305      	str	r3, [sp, #20]
 8000f5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001044 <_vfiprintf_r+0x25c>
 8000f62:	7821      	ldrb	r1, [r4, #0]
 8000f64:	2203      	movs	r2, #3
 8000f66:	4650      	mov	r0, sl
 8000f68:	f7ff f942 	bl	80001f0 <memchr>
 8000f6c:	b140      	cbz	r0, 8000f80 <_vfiprintf_r+0x198>
 8000f6e:	2340      	movs	r3, #64	; 0x40
 8000f70:	eba0 000a 	sub.w	r0, r0, sl
 8000f74:	fa03 f000 	lsl.w	r0, r3, r0
 8000f78:	9b04      	ldr	r3, [sp, #16]
 8000f7a:	4303      	orrs	r3, r0
 8000f7c:	3401      	adds	r4, #1
 8000f7e:	9304      	str	r3, [sp, #16]
 8000f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f84:	482c      	ldr	r0, [pc, #176]	; (8001038 <_vfiprintf_r+0x250>)
 8000f86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000f8a:	2206      	movs	r2, #6
 8000f8c:	f7ff f930 	bl	80001f0 <memchr>
 8000f90:	2800      	cmp	r0, #0
 8000f92:	d03f      	beq.n	8001014 <_vfiprintf_r+0x22c>
 8000f94:	4b29      	ldr	r3, [pc, #164]	; (800103c <_vfiprintf_r+0x254>)
 8000f96:	bb1b      	cbnz	r3, 8000fe0 <_vfiprintf_r+0x1f8>
 8000f98:	9b03      	ldr	r3, [sp, #12]
 8000f9a:	3307      	adds	r3, #7
 8000f9c:	f023 0307 	bic.w	r3, r3, #7
 8000fa0:	3308      	adds	r3, #8
 8000fa2:	9303      	str	r3, [sp, #12]
 8000fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000fa6:	443b      	add	r3, r7
 8000fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8000faa:	e767      	b.n	8000e7c <_vfiprintf_r+0x94>
 8000fac:	fb0c 3202 	mla	r2, ip, r2, r3
 8000fb0:	460c      	mov	r4, r1
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	e7a5      	b.n	8000f02 <_vfiprintf_r+0x11a>
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	3401      	adds	r4, #1
 8000fba:	9305      	str	r3, [sp, #20]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f04f 0c0a 	mov.w	ip, #10
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000fc8:	3a30      	subs	r2, #48	; 0x30
 8000fca:	2a09      	cmp	r2, #9
 8000fcc:	d903      	bls.n	8000fd6 <_vfiprintf_r+0x1ee>
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0c5      	beq.n	8000f5e <_vfiprintf_r+0x176>
 8000fd2:	9105      	str	r1, [sp, #20]
 8000fd4:	e7c3      	b.n	8000f5e <_vfiprintf_r+0x176>
 8000fd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8000fda:	4604      	mov	r4, r0
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e7f0      	b.n	8000fc2 <_vfiprintf_r+0x1da>
 8000fe0:	ab03      	add	r3, sp, #12
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	462a      	mov	r2, r5
 8000fe6:	4b16      	ldr	r3, [pc, #88]	; (8001040 <_vfiprintf_r+0x258>)
 8000fe8:	a904      	add	r1, sp, #16
 8000fea:	4630      	mov	r0, r6
 8000fec:	f3af 8000 	nop.w
 8000ff0:	4607      	mov	r7, r0
 8000ff2:	1c78      	adds	r0, r7, #1
 8000ff4:	d1d6      	bne.n	8000fa4 <_vfiprintf_r+0x1bc>
 8000ff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ff8:	07d9      	lsls	r1, r3, #31
 8000ffa:	d405      	bmi.n	8001008 <_vfiprintf_r+0x220>
 8000ffc:	89ab      	ldrh	r3, [r5, #12]
 8000ffe:	059a      	lsls	r2, r3, #22
 8001000:	d402      	bmi.n	8001008 <_vfiprintf_r+0x220>
 8001002:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001004:	f000 fc65 	bl	80018d2 <__retarget_lock_release_recursive>
 8001008:	89ab      	ldrh	r3, [r5, #12]
 800100a:	065b      	lsls	r3, r3, #25
 800100c:	f53f af12 	bmi.w	8000e34 <_vfiprintf_r+0x4c>
 8001010:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001012:	e711      	b.n	8000e38 <_vfiprintf_r+0x50>
 8001014:	ab03      	add	r3, sp, #12
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	462a      	mov	r2, r5
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <_vfiprintf_r+0x258>)
 800101c:	a904      	add	r1, sp, #16
 800101e:	4630      	mov	r0, r6
 8001020:	f000 f88a 	bl	8001138 <_printf_i>
 8001024:	e7e4      	b.n	8000ff0 <_vfiprintf_r+0x208>
 8001026:	bf00      	nop
 8001028:	08001ec8 	.word	0x08001ec8
 800102c:	08001ee8 	.word	0x08001ee8
 8001030:	08001ea8 	.word	0x08001ea8
 8001034:	08001e74 	.word	0x08001e74
 8001038:	08001e7e 	.word	0x08001e7e
 800103c:	00000000 	.word	0x00000000
 8001040:	08000dc3 	.word	0x08000dc3
 8001044:	08001e7a 	.word	0x08001e7a

08001048 <vfiprintf>:
 8001048:	4613      	mov	r3, r2
 800104a:	460a      	mov	r2, r1
 800104c:	4601      	mov	r1, r0
 800104e:	4802      	ldr	r0, [pc, #8]	; (8001058 <vfiprintf+0x10>)
 8001050:	6800      	ldr	r0, [r0, #0]
 8001052:	f7ff bec9 	b.w	8000de8 <_vfiprintf_r>
 8001056:	bf00      	nop
 8001058:	20000004 	.word	0x20000004

0800105c <_printf_common>:
 800105c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001060:	4616      	mov	r6, r2
 8001062:	4699      	mov	r9, r3
 8001064:	688a      	ldr	r2, [r1, #8]
 8001066:	690b      	ldr	r3, [r1, #16]
 8001068:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800106c:	4293      	cmp	r3, r2
 800106e:	bfb8      	it	lt
 8001070:	4613      	movlt	r3, r2
 8001072:	6033      	str	r3, [r6, #0]
 8001074:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001078:	4607      	mov	r7, r0
 800107a:	460c      	mov	r4, r1
 800107c:	b10a      	cbz	r2, 8001082 <_printf_common+0x26>
 800107e:	3301      	adds	r3, #1
 8001080:	6033      	str	r3, [r6, #0]
 8001082:	6823      	ldr	r3, [r4, #0]
 8001084:	0699      	lsls	r1, r3, #26
 8001086:	bf42      	ittt	mi
 8001088:	6833      	ldrmi	r3, [r6, #0]
 800108a:	3302      	addmi	r3, #2
 800108c:	6033      	strmi	r3, [r6, #0]
 800108e:	6825      	ldr	r5, [r4, #0]
 8001090:	f015 0506 	ands.w	r5, r5, #6
 8001094:	d106      	bne.n	80010a4 <_printf_common+0x48>
 8001096:	f104 0a19 	add.w	sl, r4, #25
 800109a:	68e3      	ldr	r3, [r4, #12]
 800109c:	6832      	ldr	r2, [r6, #0]
 800109e:	1a9b      	subs	r3, r3, r2
 80010a0:	42ab      	cmp	r3, r5
 80010a2:	dc26      	bgt.n	80010f2 <_printf_common+0x96>
 80010a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80010a8:	1e13      	subs	r3, r2, #0
 80010aa:	6822      	ldr	r2, [r4, #0]
 80010ac:	bf18      	it	ne
 80010ae:	2301      	movne	r3, #1
 80010b0:	0692      	lsls	r2, r2, #26
 80010b2:	d42b      	bmi.n	800110c <_printf_common+0xb0>
 80010b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80010b8:	4649      	mov	r1, r9
 80010ba:	4638      	mov	r0, r7
 80010bc:	47c0      	blx	r8
 80010be:	3001      	adds	r0, #1
 80010c0:	d01e      	beq.n	8001100 <_printf_common+0xa4>
 80010c2:	6823      	ldr	r3, [r4, #0]
 80010c4:	68e5      	ldr	r5, [r4, #12]
 80010c6:	6832      	ldr	r2, [r6, #0]
 80010c8:	f003 0306 	and.w	r3, r3, #6
 80010cc:	2b04      	cmp	r3, #4
 80010ce:	bf08      	it	eq
 80010d0:	1aad      	subeq	r5, r5, r2
 80010d2:	68a3      	ldr	r3, [r4, #8]
 80010d4:	6922      	ldr	r2, [r4, #16]
 80010d6:	bf0c      	ite	eq
 80010d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80010dc:	2500      	movne	r5, #0
 80010de:	4293      	cmp	r3, r2
 80010e0:	bfc4      	itt	gt
 80010e2:	1a9b      	subgt	r3, r3, r2
 80010e4:	18ed      	addgt	r5, r5, r3
 80010e6:	2600      	movs	r6, #0
 80010e8:	341a      	adds	r4, #26
 80010ea:	42b5      	cmp	r5, r6
 80010ec:	d11a      	bne.n	8001124 <_printf_common+0xc8>
 80010ee:	2000      	movs	r0, #0
 80010f0:	e008      	b.n	8001104 <_printf_common+0xa8>
 80010f2:	2301      	movs	r3, #1
 80010f4:	4652      	mov	r2, sl
 80010f6:	4649      	mov	r1, r9
 80010f8:	4638      	mov	r0, r7
 80010fa:	47c0      	blx	r8
 80010fc:	3001      	adds	r0, #1
 80010fe:	d103      	bne.n	8001108 <_printf_common+0xac>
 8001100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001108:	3501      	adds	r5, #1
 800110a:	e7c6      	b.n	800109a <_printf_common+0x3e>
 800110c:	18e1      	adds	r1, r4, r3
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	2030      	movs	r0, #48	; 0x30
 8001112:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001116:	4422      	add	r2, r4
 8001118:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800111c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001120:	3302      	adds	r3, #2
 8001122:	e7c7      	b.n	80010b4 <_printf_common+0x58>
 8001124:	2301      	movs	r3, #1
 8001126:	4622      	mov	r2, r4
 8001128:	4649      	mov	r1, r9
 800112a:	4638      	mov	r0, r7
 800112c:	47c0      	blx	r8
 800112e:	3001      	adds	r0, #1
 8001130:	d0e6      	beq.n	8001100 <_printf_common+0xa4>
 8001132:	3601      	adds	r6, #1
 8001134:	e7d9      	b.n	80010ea <_printf_common+0x8e>
	...

08001138 <_printf_i>:
 8001138:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800113c:	460c      	mov	r4, r1
 800113e:	4691      	mov	r9, r2
 8001140:	7e27      	ldrb	r7, [r4, #24]
 8001142:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001144:	2f78      	cmp	r7, #120	; 0x78
 8001146:	4680      	mov	r8, r0
 8001148:	469a      	mov	sl, r3
 800114a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800114e:	d807      	bhi.n	8001160 <_printf_i+0x28>
 8001150:	2f62      	cmp	r7, #98	; 0x62
 8001152:	d80a      	bhi.n	800116a <_printf_i+0x32>
 8001154:	2f00      	cmp	r7, #0
 8001156:	f000 80d8 	beq.w	800130a <_printf_i+0x1d2>
 800115a:	2f58      	cmp	r7, #88	; 0x58
 800115c:	f000 80a3 	beq.w	80012a6 <_printf_i+0x16e>
 8001160:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001164:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001168:	e03a      	b.n	80011e0 <_printf_i+0xa8>
 800116a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800116e:	2b15      	cmp	r3, #21
 8001170:	d8f6      	bhi.n	8001160 <_printf_i+0x28>
 8001172:	a001      	add	r0, pc, #4	; (adr r0, 8001178 <_printf_i+0x40>)
 8001174:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001178:	080011d1 	.word	0x080011d1
 800117c:	080011e5 	.word	0x080011e5
 8001180:	08001161 	.word	0x08001161
 8001184:	08001161 	.word	0x08001161
 8001188:	08001161 	.word	0x08001161
 800118c:	08001161 	.word	0x08001161
 8001190:	080011e5 	.word	0x080011e5
 8001194:	08001161 	.word	0x08001161
 8001198:	08001161 	.word	0x08001161
 800119c:	08001161 	.word	0x08001161
 80011a0:	08001161 	.word	0x08001161
 80011a4:	080012f1 	.word	0x080012f1
 80011a8:	08001215 	.word	0x08001215
 80011ac:	080012d3 	.word	0x080012d3
 80011b0:	08001161 	.word	0x08001161
 80011b4:	08001161 	.word	0x08001161
 80011b8:	08001313 	.word	0x08001313
 80011bc:	08001161 	.word	0x08001161
 80011c0:	08001215 	.word	0x08001215
 80011c4:	08001161 	.word	0x08001161
 80011c8:	08001161 	.word	0x08001161
 80011cc:	080012db 	.word	0x080012db
 80011d0:	680b      	ldr	r3, [r1, #0]
 80011d2:	1d1a      	adds	r2, r3, #4
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	600a      	str	r2, [r1, #0]
 80011d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80011dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80011e0:	2301      	movs	r3, #1
 80011e2:	e0a3      	b.n	800132c <_printf_i+0x1f4>
 80011e4:	6825      	ldr	r5, [r4, #0]
 80011e6:	6808      	ldr	r0, [r1, #0]
 80011e8:	062e      	lsls	r6, r5, #24
 80011ea:	f100 0304 	add.w	r3, r0, #4
 80011ee:	d50a      	bpl.n	8001206 <_printf_i+0xce>
 80011f0:	6805      	ldr	r5, [r0, #0]
 80011f2:	600b      	str	r3, [r1, #0]
 80011f4:	2d00      	cmp	r5, #0
 80011f6:	da03      	bge.n	8001200 <_printf_i+0xc8>
 80011f8:	232d      	movs	r3, #45	; 0x2d
 80011fa:	426d      	negs	r5, r5
 80011fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001200:	485e      	ldr	r0, [pc, #376]	; (800137c <_printf_i+0x244>)
 8001202:	230a      	movs	r3, #10
 8001204:	e019      	b.n	800123a <_printf_i+0x102>
 8001206:	f015 0f40 	tst.w	r5, #64	; 0x40
 800120a:	6805      	ldr	r5, [r0, #0]
 800120c:	600b      	str	r3, [r1, #0]
 800120e:	bf18      	it	ne
 8001210:	b22d      	sxthne	r5, r5
 8001212:	e7ef      	b.n	80011f4 <_printf_i+0xbc>
 8001214:	680b      	ldr	r3, [r1, #0]
 8001216:	6825      	ldr	r5, [r4, #0]
 8001218:	1d18      	adds	r0, r3, #4
 800121a:	6008      	str	r0, [r1, #0]
 800121c:	0628      	lsls	r0, r5, #24
 800121e:	d501      	bpl.n	8001224 <_printf_i+0xec>
 8001220:	681d      	ldr	r5, [r3, #0]
 8001222:	e002      	b.n	800122a <_printf_i+0xf2>
 8001224:	0669      	lsls	r1, r5, #25
 8001226:	d5fb      	bpl.n	8001220 <_printf_i+0xe8>
 8001228:	881d      	ldrh	r5, [r3, #0]
 800122a:	4854      	ldr	r0, [pc, #336]	; (800137c <_printf_i+0x244>)
 800122c:	2f6f      	cmp	r7, #111	; 0x6f
 800122e:	bf0c      	ite	eq
 8001230:	2308      	moveq	r3, #8
 8001232:	230a      	movne	r3, #10
 8001234:	2100      	movs	r1, #0
 8001236:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800123a:	6866      	ldr	r6, [r4, #4]
 800123c:	60a6      	str	r6, [r4, #8]
 800123e:	2e00      	cmp	r6, #0
 8001240:	bfa2      	ittt	ge
 8001242:	6821      	ldrge	r1, [r4, #0]
 8001244:	f021 0104 	bicge.w	r1, r1, #4
 8001248:	6021      	strge	r1, [r4, #0]
 800124a:	b90d      	cbnz	r5, 8001250 <_printf_i+0x118>
 800124c:	2e00      	cmp	r6, #0
 800124e:	d04d      	beq.n	80012ec <_printf_i+0x1b4>
 8001250:	4616      	mov	r6, r2
 8001252:	fbb5 f1f3 	udiv	r1, r5, r3
 8001256:	fb03 5711 	mls	r7, r3, r1, r5
 800125a:	5dc7      	ldrb	r7, [r0, r7]
 800125c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001260:	462f      	mov	r7, r5
 8001262:	42bb      	cmp	r3, r7
 8001264:	460d      	mov	r5, r1
 8001266:	d9f4      	bls.n	8001252 <_printf_i+0x11a>
 8001268:	2b08      	cmp	r3, #8
 800126a:	d10b      	bne.n	8001284 <_printf_i+0x14c>
 800126c:	6823      	ldr	r3, [r4, #0]
 800126e:	07df      	lsls	r7, r3, #31
 8001270:	d508      	bpl.n	8001284 <_printf_i+0x14c>
 8001272:	6923      	ldr	r3, [r4, #16]
 8001274:	6861      	ldr	r1, [r4, #4]
 8001276:	4299      	cmp	r1, r3
 8001278:	bfde      	ittt	le
 800127a:	2330      	movle	r3, #48	; 0x30
 800127c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001280:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8001284:	1b92      	subs	r2, r2, r6
 8001286:	6122      	str	r2, [r4, #16]
 8001288:	f8cd a000 	str.w	sl, [sp]
 800128c:	464b      	mov	r3, r9
 800128e:	aa03      	add	r2, sp, #12
 8001290:	4621      	mov	r1, r4
 8001292:	4640      	mov	r0, r8
 8001294:	f7ff fee2 	bl	800105c <_printf_common>
 8001298:	3001      	adds	r0, #1
 800129a:	d14c      	bne.n	8001336 <_printf_i+0x1fe>
 800129c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012a0:	b004      	add	sp, #16
 80012a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012a6:	4835      	ldr	r0, [pc, #212]	; (800137c <_printf_i+0x244>)
 80012a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80012ac:	6823      	ldr	r3, [r4, #0]
 80012ae:	680e      	ldr	r6, [r1, #0]
 80012b0:	061f      	lsls	r7, r3, #24
 80012b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80012b6:	600e      	str	r6, [r1, #0]
 80012b8:	d514      	bpl.n	80012e4 <_printf_i+0x1ac>
 80012ba:	07d9      	lsls	r1, r3, #31
 80012bc:	bf44      	itt	mi
 80012be:	f043 0320 	orrmi.w	r3, r3, #32
 80012c2:	6023      	strmi	r3, [r4, #0]
 80012c4:	b91d      	cbnz	r5, 80012ce <_printf_i+0x196>
 80012c6:	6823      	ldr	r3, [r4, #0]
 80012c8:	f023 0320 	bic.w	r3, r3, #32
 80012cc:	6023      	str	r3, [r4, #0]
 80012ce:	2310      	movs	r3, #16
 80012d0:	e7b0      	b.n	8001234 <_printf_i+0xfc>
 80012d2:	6823      	ldr	r3, [r4, #0]
 80012d4:	f043 0320 	orr.w	r3, r3, #32
 80012d8:	6023      	str	r3, [r4, #0]
 80012da:	2378      	movs	r3, #120	; 0x78
 80012dc:	4828      	ldr	r0, [pc, #160]	; (8001380 <_printf_i+0x248>)
 80012de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80012e2:	e7e3      	b.n	80012ac <_printf_i+0x174>
 80012e4:	065e      	lsls	r6, r3, #25
 80012e6:	bf48      	it	mi
 80012e8:	b2ad      	uxthmi	r5, r5
 80012ea:	e7e6      	b.n	80012ba <_printf_i+0x182>
 80012ec:	4616      	mov	r6, r2
 80012ee:	e7bb      	b.n	8001268 <_printf_i+0x130>
 80012f0:	680b      	ldr	r3, [r1, #0]
 80012f2:	6826      	ldr	r6, [r4, #0]
 80012f4:	6960      	ldr	r0, [r4, #20]
 80012f6:	1d1d      	adds	r5, r3, #4
 80012f8:	600d      	str	r5, [r1, #0]
 80012fa:	0635      	lsls	r5, r6, #24
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	d501      	bpl.n	8001304 <_printf_i+0x1cc>
 8001300:	6018      	str	r0, [r3, #0]
 8001302:	e002      	b.n	800130a <_printf_i+0x1d2>
 8001304:	0671      	lsls	r1, r6, #25
 8001306:	d5fb      	bpl.n	8001300 <_printf_i+0x1c8>
 8001308:	8018      	strh	r0, [r3, #0]
 800130a:	2300      	movs	r3, #0
 800130c:	6123      	str	r3, [r4, #16]
 800130e:	4616      	mov	r6, r2
 8001310:	e7ba      	b.n	8001288 <_printf_i+0x150>
 8001312:	680b      	ldr	r3, [r1, #0]
 8001314:	1d1a      	adds	r2, r3, #4
 8001316:	600a      	str	r2, [r1, #0]
 8001318:	681e      	ldr	r6, [r3, #0]
 800131a:	6862      	ldr	r2, [r4, #4]
 800131c:	2100      	movs	r1, #0
 800131e:	4630      	mov	r0, r6
 8001320:	f7fe ff66 	bl	80001f0 <memchr>
 8001324:	b108      	cbz	r0, 800132a <_printf_i+0x1f2>
 8001326:	1b80      	subs	r0, r0, r6
 8001328:	6060      	str	r0, [r4, #4]
 800132a:	6863      	ldr	r3, [r4, #4]
 800132c:	6123      	str	r3, [r4, #16]
 800132e:	2300      	movs	r3, #0
 8001330:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001334:	e7a8      	b.n	8001288 <_printf_i+0x150>
 8001336:	6923      	ldr	r3, [r4, #16]
 8001338:	4632      	mov	r2, r6
 800133a:	4649      	mov	r1, r9
 800133c:	4640      	mov	r0, r8
 800133e:	47d0      	blx	sl
 8001340:	3001      	adds	r0, #1
 8001342:	d0ab      	beq.n	800129c <_printf_i+0x164>
 8001344:	6823      	ldr	r3, [r4, #0]
 8001346:	079b      	lsls	r3, r3, #30
 8001348:	d413      	bmi.n	8001372 <_printf_i+0x23a>
 800134a:	68e0      	ldr	r0, [r4, #12]
 800134c:	9b03      	ldr	r3, [sp, #12]
 800134e:	4298      	cmp	r0, r3
 8001350:	bfb8      	it	lt
 8001352:	4618      	movlt	r0, r3
 8001354:	e7a4      	b.n	80012a0 <_printf_i+0x168>
 8001356:	2301      	movs	r3, #1
 8001358:	4632      	mov	r2, r6
 800135a:	4649      	mov	r1, r9
 800135c:	4640      	mov	r0, r8
 800135e:	47d0      	blx	sl
 8001360:	3001      	adds	r0, #1
 8001362:	d09b      	beq.n	800129c <_printf_i+0x164>
 8001364:	3501      	adds	r5, #1
 8001366:	68e3      	ldr	r3, [r4, #12]
 8001368:	9903      	ldr	r1, [sp, #12]
 800136a:	1a5b      	subs	r3, r3, r1
 800136c:	42ab      	cmp	r3, r5
 800136e:	dcf2      	bgt.n	8001356 <_printf_i+0x21e>
 8001370:	e7eb      	b.n	800134a <_printf_i+0x212>
 8001372:	2500      	movs	r5, #0
 8001374:	f104 0619 	add.w	r6, r4, #25
 8001378:	e7f5      	b.n	8001366 <_printf_i+0x22e>
 800137a:	bf00      	nop
 800137c:	08001e85 	.word	0x08001e85
 8001380:	08001e96 	.word	0x08001e96

08001384 <iprintf>:
 8001384:	b40f      	push	{r0, r1, r2, r3}
 8001386:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <iprintf+0x2c>)
 8001388:	b513      	push	{r0, r1, r4, lr}
 800138a:	681c      	ldr	r4, [r3, #0]
 800138c:	b124      	cbz	r4, 8001398 <iprintf+0x14>
 800138e:	69a3      	ldr	r3, [r4, #24]
 8001390:	b913      	cbnz	r3, 8001398 <iprintf+0x14>
 8001392:	4620      	mov	r0, r4
 8001394:	f000 f9fe 	bl	8001794 <__sinit>
 8001398:	ab05      	add	r3, sp, #20
 800139a:	9a04      	ldr	r2, [sp, #16]
 800139c:	68a1      	ldr	r1, [r4, #8]
 800139e:	9301      	str	r3, [sp, #4]
 80013a0:	4620      	mov	r0, r4
 80013a2:	f7ff fd21 	bl	8000de8 <_vfiprintf_r>
 80013a6:	b002      	add	sp, #8
 80013a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013ac:	b004      	add	sp, #16
 80013ae:	4770      	bx	lr
 80013b0:	20000004 	.word	0x20000004

080013b4 <putchar>:
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <putchar+0x28>)
 80013b6:	b513      	push	{r0, r1, r4, lr}
 80013b8:	681c      	ldr	r4, [r3, #0]
 80013ba:	4601      	mov	r1, r0
 80013bc:	b134      	cbz	r4, 80013cc <putchar+0x18>
 80013be:	69a3      	ldr	r3, [r4, #24]
 80013c0:	b923      	cbnz	r3, 80013cc <putchar+0x18>
 80013c2:	9001      	str	r0, [sp, #4]
 80013c4:	4620      	mov	r0, r4
 80013c6:	f000 f9e5 	bl	8001794 <__sinit>
 80013ca:	9901      	ldr	r1, [sp, #4]
 80013cc:	68a2      	ldr	r2, [r4, #8]
 80013ce:	4620      	mov	r0, r4
 80013d0:	b002      	add	sp, #8
 80013d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013d6:	f000 bb8b 	b.w	8001af0 <_putc_r>
 80013da:	bf00      	nop
 80013dc:	20000004 	.word	0x20000004

080013e0 <__swbuf_r>:
 80013e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013e2:	460e      	mov	r6, r1
 80013e4:	4614      	mov	r4, r2
 80013e6:	4605      	mov	r5, r0
 80013e8:	b118      	cbz	r0, 80013f2 <__swbuf_r+0x12>
 80013ea:	6983      	ldr	r3, [r0, #24]
 80013ec:	b90b      	cbnz	r3, 80013f2 <__swbuf_r+0x12>
 80013ee:	f000 f9d1 	bl	8001794 <__sinit>
 80013f2:	4b21      	ldr	r3, [pc, #132]	; (8001478 <__swbuf_r+0x98>)
 80013f4:	429c      	cmp	r4, r3
 80013f6:	d12b      	bne.n	8001450 <__swbuf_r+0x70>
 80013f8:	686c      	ldr	r4, [r5, #4]
 80013fa:	69a3      	ldr	r3, [r4, #24]
 80013fc:	60a3      	str	r3, [r4, #8]
 80013fe:	89a3      	ldrh	r3, [r4, #12]
 8001400:	071a      	lsls	r2, r3, #28
 8001402:	d52f      	bpl.n	8001464 <__swbuf_r+0x84>
 8001404:	6923      	ldr	r3, [r4, #16]
 8001406:	b36b      	cbz	r3, 8001464 <__swbuf_r+0x84>
 8001408:	6923      	ldr	r3, [r4, #16]
 800140a:	6820      	ldr	r0, [r4, #0]
 800140c:	1ac0      	subs	r0, r0, r3
 800140e:	6963      	ldr	r3, [r4, #20]
 8001410:	b2f6      	uxtb	r6, r6
 8001412:	4283      	cmp	r3, r0
 8001414:	4637      	mov	r7, r6
 8001416:	dc04      	bgt.n	8001422 <__swbuf_r+0x42>
 8001418:	4621      	mov	r1, r4
 800141a:	4628      	mov	r0, r5
 800141c:	f000 f926 	bl	800166c <_fflush_r>
 8001420:	bb30      	cbnz	r0, 8001470 <__swbuf_r+0x90>
 8001422:	68a3      	ldr	r3, [r4, #8]
 8001424:	3b01      	subs	r3, #1
 8001426:	60a3      	str	r3, [r4, #8]
 8001428:	6823      	ldr	r3, [r4, #0]
 800142a:	1c5a      	adds	r2, r3, #1
 800142c:	6022      	str	r2, [r4, #0]
 800142e:	701e      	strb	r6, [r3, #0]
 8001430:	6963      	ldr	r3, [r4, #20]
 8001432:	3001      	adds	r0, #1
 8001434:	4283      	cmp	r3, r0
 8001436:	d004      	beq.n	8001442 <__swbuf_r+0x62>
 8001438:	89a3      	ldrh	r3, [r4, #12]
 800143a:	07db      	lsls	r3, r3, #31
 800143c:	d506      	bpl.n	800144c <__swbuf_r+0x6c>
 800143e:	2e0a      	cmp	r6, #10
 8001440:	d104      	bne.n	800144c <__swbuf_r+0x6c>
 8001442:	4621      	mov	r1, r4
 8001444:	4628      	mov	r0, r5
 8001446:	f000 f911 	bl	800166c <_fflush_r>
 800144a:	b988      	cbnz	r0, 8001470 <__swbuf_r+0x90>
 800144c:	4638      	mov	r0, r7
 800144e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001450:	4b0a      	ldr	r3, [pc, #40]	; (800147c <__swbuf_r+0x9c>)
 8001452:	429c      	cmp	r4, r3
 8001454:	d101      	bne.n	800145a <__swbuf_r+0x7a>
 8001456:	68ac      	ldr	r4, [r5, #8]
 8001458:	e7cf      	b.n	80013fa <__swbuf_r+0x1a>
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <__swbuf_r+0xa0>)
 800145c:	429c      	cmp	r4, r3
 800145e:	bf08      	it	eq
 8001460:	68ec      	ldreq	r4, [r5, #12]
 8001462:	e7ca      	b.n	80013fa <__swbuf_r+0x1a>
 8001464:	4621      	mov	r1, r4
 8001466:	4628      	mov	r0, r5
 8001468:	f000 f80c 	bl	8001484 <__swsetup_r>
 800146c:	2800      	cmp	r0, #0
 800146e:	d0cb      	beq.n	8001408 <__swbuf_r+0x28>
 8001470:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001474:	e7ea      	b.n	800144c <__swbuf_r+0x6c>
 8001476:	bf00      	nop
 8001478:	08001ec8 	.word	0x08001ec8
 800147c:	08001ee8 	.word	0x08001ee8
 8001480:	08001ea8 	.word	0x08001ea8

08001484 <__swsetup_r>:
 8001484:	4b32      	ldr	r3, [pc, #200]	; (8001550 <__swsetup_r+0xcc>)
 8001486:	b570      	push	{r4, r5, r6, lr}
 8001488:	681d      	ldr	r5, [r3, #0]
 800148a:	4606      	mov	r6, r0
 800148c:	460c      	mov	r4, r1
 800148e:	b125      	cbz	r5, 800149a <__swsetup_r+0x16>
 8001490:	69ab      	ldr	r3, [r5, #24]
 8001492:	b913      	cbnz	r3, 800149a <__swsetup_r+0x16>
 8001494:	4628      	mov	r0, r5
 8001496:	f000 f97d 	bl	8001794 <__sinit>
 800149a:	4b2e      	ldr	r3, [pc, #184]	; (8001554 <__swsetup_r+0xd0>)
 800149c:	429c      	cmp	r4, r3
 800149e:	d10f      	bne.n	80014c0 <__swsetup_r+0x3c>
 80014a0:	686c      	ldr	r4, [r5, #4]
 80014a2:	89a3      	ldrh	r3, [r4, #12]
 80014a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80014a8:	0719      	lsls	r1, r3, #28
 80014aa:	d42c      	bmi.n	8001506 <__swsetup_r+0x82>
 80014ac:	06dd      	lsls	r5, r3, #27
 80014ae:	d411      	bmi.n	80014d4 <__swsetup_r+0x50>
 80014b0:	2309      	movs	r3, #9
 80014b2:	6033      	str	r3, [r6, #0]
 80014b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80014b8:	81a3      	strh	r3, [r4, #12]
 80014ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014be:	e03e      	b.n	800153e <__swsetup_r+0xba>
 80014c0:	4b25      	ldr	r3, [pc, #148]	; (8001558 <__swsetup_r+0xd4>)
 80014c2:	429c      	cmp	r4, r3
 80014c4:	d101      	bne.n	80014ca <__swsetup_r+0x46>
 80014c6:	68ac      	ldr	r4, [r5, #8]
 80014c8:	e7eb      	b.n	80014a2 <__swsetup_r+0x1e>
 80014ca:	4b24      	ldr	r3, [pc, #144]	; (800155c <__swsetup_r+0xd8>)
 80014cc:	429c      	cmp	r4, r3
 80014ce:	bf08      	it	eq
 80014d0:	68ec      	ldreq	r4, [r5, #12]
 80014d2:	e7e6      	b.n	80014a2 <__swsetup_r+0x1e>
 80014d4:	0758      	lsls	r0, r3, #29
 80014d6:	d512      	bpl.n	80014fe <__swsetup_r+0x7a>
 80014d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80014da:	b141      	cbz	r1, 80014ee <__swsetup_r+0x6a>
 80014dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80014e0:	4299      	cmp	r1, r3
 80014e2:	d002      	beq.n	80014ea <__swsetup_r+0x66>
 80014e4:	4630      	mov	r0, r6
 80014e6:	f000 fa59 	bl	800199c <_free_r>
 80014ea:	2300      	movs	r3, #0
 80014ec:	6363      	str	r3, [r4, #52]	; 0x34
 80014ee:	89a3      	ldrh	r3, [r4, #12]
 80014f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80014f4:	81a3      	strh	r3, [r4, #12]
 80014f6:	2300      	movs	r3, #0
 80014f8:	6063      	str	r3, [r4, #4]
 80014fa:	6923      	ldr	r3, [r4, #16]
 80014fc:	6023      	str	r3, [r4, #0]
 80014fe:	89a3      	ldrh	r3, [r4, #12]
 8001500:	f043 0308 	orr.w	r3, r3, #8
 8001504:	81a3      	strh	r3, [r4, #12]
 8001506:	6923      	ldr	r3, [r4, #16]
 8001508:	b94b      	cbnz	r3, 800151e <__swsetup_r+0x9a>
 800150a:	89a3      	ldrh	r3, [r4, #12]
 800150c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001514:	d003      	beq.n	800151e <__swsetup_r+0x9a>
 8001516:	4621      	mov	r1, r4
 8001518:	4630      	mov	r0, r6
 800151a:	f000 f9ff 	bl	800191c <__smakebuf_r>
 800151e:	89a0      	ldrh	r0, [r4, #12]
 8001520:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001524:	f010 0301 	ands.w	r3, r0, #1
 8001528:	d00a      	beq.n	8001540 <__swsetup_r+0xbc>
 800152a:	2300      	movs	r3, #0
 800152c:	60a3      	str	r3, [r4, #8]
 800152e:	6963      	ldr	r3, [r4, #20]
 8001530:	425b      	negs	r3, r3
 8001532:	61a3      	str	r3, [r4, #24]
 8001534:	6923      	ldr	r3, [r4, #16]
 8001536:	b943      	cbnz	r3, 800154a <__swsetup_r+0xc6>
 8001538:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800153c:	d1ba      	bne.n	80014b4 <__swsetup_r+0x30>
 800153e:	bd70      	pop	{r4, r5, r6, pc}
 8001540:	0781      	lsls	r1, r0, #30
 8001542:	bf58      	it	pl
 8001544:	6963      	ldrpl	r3, [r4, #20]
 8001546:	60a3      	str	r3, [r4, #8]
 8001548:	e7f4      	b.n	8001534 <__swsetup_r+0xb0>
 800154a:	2000      	movs	r0, #0
 800154c:	e7f7      	b.n	800153e <__swsetup_r+0xba>
 800154e:	bf00      	nop
 8001550:	20000004 	.word	0x20000004
 8001554:	08001ec8 	.word	0x08001ec8
 8001558:	08001ee8 	.word	0x08001ee8
 800155c:	08001ea8 	.word	0x08001ea8

08001560 <__sflush_r>:
 8001560:	898a      	ldrh	r2, [r1, #12]
 8001562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001566:	4605      	mov	r5, r0
 8001568:	0710      	lsls	r0, r2, #28
 800156a:	460c      	mov	r4, r1
 800156c:	d458      	bmi.n	8001620 <__sflush_r+0xc0>
 800156e:	684b      	ldr	r3, [r1, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	dc05      	bgt.n	8001580 <__sflush_r+0x20>
 8001574:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001576:	2b00      	cmp	r3, #0
 8001578:	dc02      	bgt.n	8001580 <__sflush_r+0x20>
 800157a:	2000      	movs	r0, #0
 800157c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001580:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001582:	2e00      	cmp	r6, #0
 8001584:	d0f9      	beq.n	800157a <__sflush_r+0x1a>
 8001586:	2300      	movs	r3, #0
 8001588:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800158c:	682f      	ldr	r7, [r5, #0]
 800158e:	602b      	str	r3, [r5, #0]
 8001590:	d032      	beq.n	80015f8 <__sflush_r+0x98>
 8001592:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001594:	89a3      	ldrh	r3, [r4, #12]
 8001596:	075a      	lsls	r2, r3, #29
 8001598:	d505      	bpl.n	80015a6 <__sflush_r+0x46>
 800159a:	6863      	ldr	r3, [r4, #4]
 800159c:	1ac0      	subs	r0, r0, r3
 800159e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80015a0:	b10b      	cbz	r3, 80015a6 <__sflush_r+0x46>
 80015a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015a4:	1ac0      	subs	r0, r0, r3
 80015a6:	2300      	movs	r3, #0
 80015a8:	4602      	mov	r2, r0
 80015aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80015ac:	6a21      	ldr	r1, [r4, #32]
 80015ae:	4628      	mov	r0, r5
 80015b0:	47b0      	blx	r6
 80015b2:	1c43      	adds	r3, r0, #1
 80015b4:	89a3      	ldrh	r3, [r4, #12]
 80015b6:	d106      	bne.n	80015c6 <__sflush_r+0x66>
 80015b8:	6829      	ldr	r1, [r5, #0]
 80015ba:	291d      	cmp	r1, #29
 80015bc:	d82c      	bhi.n	8001618 <__sflush_r+0xb8>
 80015be:	4a2a      	ldr	r2, [pc, #168]	; (8001668 <__sflush_r+0x108>)
 80015c0:	40ca      	lsrs	r2, r1
 80015c2:	07d6      	lsls	r6, r2, #31
 80015c4:	d528      	bpl.n	8001618 <__sflush_r+0xb8>
 80015c6:	2200      	movs	r2, #0
 80015c8:	6062      	str	r2, [r4, #4]
 80015ca:	04d9      	lsls	r1, r3, #19
 80015cc:	6922      	ldr	r2, [r4, #16]
 80015ce:	6022      	str	r2, [r4, #0]
 80015d0:	d504      	bpl.n	80015dc <__sflush_r+0x7c>
 80015d2:	1c42      	adds	r2, r0, #1
 80015d4:	d101      	bne.n	80015da <__sflush_r+0x7a>
 80015d6:	682b      	ldr	r3, [r5, #0]
 80015d8:	b903      	cbnz	r3, 80015dc <__sflush_r+0x7c>
 80015da:	6560      	str	r0, [r4, #84]	; 0x54
 80015dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80015de:	602f      	str	r7, [r5, #0]
 80015e0:	2900      	cmp	r1, #0
 80015e2:	d0ca      	beq.n	800157a <__sflush_r+0x1a>
 80015e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80015e8:	4299      	cmp	r1, r3
 80015ea:	d002      	beq.n	80015f2 <__sflush_r+0x92>
 80015ec:	4628      	mov	r0, r5
 80015ee:	f000 f9d5 	bl	800199c <_free_r>
 80015f2:	2000      	movs	r0, #0
 80015f4:	6360      	str	r0, [r4, #52]	; 0x34
 80015f6:	e7c1      	b.n	800157c <__sflush_r+0x1c>
 80015f8:	6a21      	ldr	r1, [r4, #32]
 80015fa:	2301      	movs	r3, #1
 80015fc:	4628      	mov	r0, r5
 80015fe:	47b0      	blx	r6
 8001600:	1c41      	adds	r1, r0, #1
 8001602:	d1c7      	bne.n	8001594 <__sflush_r+0x34>
 8001604:	682b      	ldr	r3, [r5, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0c4      	beq.n	8001594 <__sflush_r+0x34>
 800160a:	2b1d      	cmp	r3, #29
 800160c:	d001      	beq.n	8001612 <__sflush_r+0xb2>
 800160e:	2b16      	cmp	r3, #22
 8001610:	d101      	bne.n	8001616 <__sflush_r+0xb6>
 8001612:	602f      	str	r7, [r5, #0]
 8001614:	e7b1      	b.n	800157a <__sflush_r+0x1a>
 8001616:	89a3      	ldrh	r3, [r4, #12]
 8001618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800161c:	81a3      	strh	r3, [r4, #12]
 800161e:	e7ad      	b.n	800157c <__sflush_r+0x1c>
 8001620:	690f      	ldr	r7, [r1, #16]
 8001622:	2f00      	cmp	r7, #0
 8001624:	d0a9      	beq.n	800157a <__sflush_r+0x1a>
 8001626:	0793      	lsls	r3, r2, #30
 8001628:	680e      	ldr	r6, [r1, #0]
 800162a:	bf08      	it	eq
 800162c:	694b      	ldreq	r3, [r1, #20]
 800162e:	600f      	str	r7, [r1, #0]
 8001630:	bf18      	it	ne
 8001632:	2300      	movne	r3, #0
 8001634:	eba6 0807 	sub.w	r8, r6, r7
 8001638:	608b      	str	r3, [r1, #8]
 800163a:	f1b8 0f00 	cmp.w	r8, #0
 800163e:	dd9c      	ble.n	800157a <__sflush_r+0x1a>
 8001640:	6a21      	ldr	r1, [r4, #32]
 8001642:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001644:	4643      	mov	r3, r8
 8001646:	463a      	mov	r2, r7
 8001648:	4628      	mov	r0, r5
 800164a:	47b0      	blx	r6
 800164c:	2800      	cmp	r0, #0
 800164e:	dc06      	bgt.n	800165e <__sflush_r+0xfe>
 8001650:	89a3      	ldrh	r3, [r4, #12]
 8001652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001656:	81a3      	strh	r3, [r4, #12]
 8001658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800165c:	e78e      	b.n	800157c <__sflush_r+0x1c>
 800165e:	4407      	add	r7, r0
 8001660:	eba8 0800 	sub.w	r8, r8, r0
 8001664:	e7e9      	b.n	800163a <__sflush_r+0xda>
 8001666:	bf00      	nop
 8001668:	20400001 	.word	0x20400001

0800166c <_fflush_r>:
 800166c:	b538      	push	{r3, r4, r5, lr}
 800166e:	690b      	ldr	r3, [r1, #16]
 8001670:	4605      	mov	r5, r0
 8001672:	460c      	mov	r4, r1
 8001674:	b913      	cbnz	r3, 800167c <_fflush_r+0x10>
 8001676:	2500      	movs	r5, #0
 8001678:	4628      	mov	r0, r5
 800167a:	bd38      	pop	{r3, r4, r5, pc}
 800167c:	b118      	cbz	r0, 8001686 <_fflush_r+0x1a>
 800167e:	6983      	ldr	r3, [r0, #24]
 8001680:	b90b      	cbnz	r3, 8001686 <_fflush_r+0x1a>
 8001682:	f000 f887 	bl	8001794 <__sinit>
 8001686:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <_fflush_r+0x6c>)
 8001688:	429c      	cmp	r4, r3
 800168a:	d11b      	bne.n	80016c4 <_fflush_r+0x58>
 800168c:	686c      	ldr	r4, [r5, #4]
 800168e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0ef      	beq.n	8001676 <_fflush_r+0xa>
 8001696:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001698:	07d0      	lsls	r0, r2, #31
 800169a:	d404      	bmi.n	80016a6 <_fflush_r+0x3a>
 800169c:	0599      	lsls	r1, r3, #22
 800169e:	d402      	bmi.n	80016a6 <_fflush_r+0x3a>
 80016a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80016a2:	f000 f915 	bl	80018d0 <__retarget_lock_acquire_recursive>
 80016a6:	4628      	mov	r0, r5
 80016a8:	4621      	mov	r1, r4
 80016aa:	f7ff ff59 	bl	8001560 <__sflush_r>
 80016ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80016b0:	07da      	lsls	r2, r3, #31
 80016b2:	4605      	mov	r5, r0
 80016b4:	d4e0      	bmi.n	8001678 <_fflush_r+0xc>
 80016b6:	89a3      	ldrh	r3, [r4, #12]
 80016b8:	059b      	lsls	r3, r3, #22
 80016ba:	d4dd      	bmi.n	8001678 <_fflush_r+0xc>
 80016bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80016be:	f000 f908 	bl	80018d2 <__retarget_lock_release_recursive>
 80016c2:	e7d9      	b.n	8001678 <_fflush_r+0xc>
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <_fflush_r+0x70>)
 80016c6:	429c      	cmp	r4, r3
 80016c8:	d101      	bne.n	80016ce <_fflush_r+0x62>
 80016ca:	68ac      	ldr	r4, [r5, #8]
 80016cc:	e7df      	b.n	800168e <_fflush_r+0x22>
 80016ce:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <_fflush_r+0x74>)
 80016d0:	429c      	cmp	r4, r3
 80016d2:	bf08      	it	eq
 80016d4:	68ec      	ldreq	r4, [r5, #12]
 80016d6:	e7da      	b.n	800168e <_fflush_r+0x22>
 80016d8:	08001ec8 	.word	0x08001ec8
 80016dc:	08001ee8 	.word	0x08001ee8
 80016e0:	08001ea8 	.word	0x08001ea8

080016e4 <std>:
 80016e4:	2300      	movs	r3, #0
 80016e6:	b510      	push	{r4, lr}
 80016e8:	4604      	mov	r4, r0
 80016ea:	e9c0 3300 	strd	r3, r3, [r0]
 80016ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80016f2:	6083      	str	r3, [r0, #8]
 80016f4:	8181      	strh	r1, [r0, #12]
 80016f6:	6643      	str	r3, [r0, #100]	; 0x64
 80016f8:	81c2      	strh	r2, [r0, #14]
 80016fa:	6183      	str	r3, [r0, #24]
 80016fc:	4619      	mov	r1, r3
 80016fe:	2208      	movs	r2, #8
 8001700:	305c      	adds	r0, #92	; 0x5c
 8001702:	f7ff fb3f 	bl	8000d84 <memset>
 8001706:	4b05      	ldr	r3, [pc, #20]	; (800171c <std+0x38>)
 8001708:	6263      	str	r3, [r4, #36]	; 0x24
 800170a:	4b05      	ldr	r3, [pc, #20]	; (8001720 <std+0x3c>)
 800170c:	62a3      	str	r3, [r4, #40]	; 0x28
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <std+0x40>)
 8001710:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001712:	4b05      	ldr	r3, [pc, #20]	; (8001728 <std+0x44>)
 8001714:	6224      	str	r4, [r4, #32]
 8001716:	6323      	str	r3, [r4, #48]	; 0x30
 8001718:	bd10      	pop	{r4, pc}
 800171a:	bf00      	nop
 800171c:	08001ba1 	.word	0x08001ba1
 8001720:	08001bc3 	.word	0x08001bc3
 8001724:	08001bfb 	.word	0x08001bfb
 8001728:	08001c1f 	.word	0x08001c1f

0800172c <_cleanup_r>:
 800172c:	4901      	ldr	r1, [pc, #4]	; (8001734 <_cleanup_r+0x8>)
 800172e:	f000 b8af 	b.w	8001890 <_fwalk_reent>
 8001732:	bf00      	nop
 8001734:	0800166d 	.word	0x0800166d

08001738 <__sfmoreglue>:
 8001738:	b570      	push	{r4, r5, r6, lr}
 800173a:	1e4a      	subs	r2, r1, #1
 800173c:	2568      	movs	r5, #104	; 0x68
 800173e:	4355      	muls	r5, r2
 8001740:	460e      	mov	r6, r1
 8001742:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001746:	f000 f979 	bl	8001a3c <_malloc_r>
 800174a:	4604      	mov	r4, r0
 800174c:	b140      	cbz	r0, 8001760 <__sfmoreglue+0x28>
 800174e:	2100      	movs	r1, #0
 8001750:	e9c0 1600 	strd	r1, r6, [r0]
 8001754:	300c      	adds	r0, #12
 8001756:	60a0      	str	r0, [r4, #8]
 8001758:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800175c:	f7ff fb12 	bl	8000d84 <memset>
 8001760:	4620      	mov	r0, r4
 8001762:	bd70      	pop	{r4, r5, r6, pc}

08001764 <__sfp_lock_acquire>:
 8001764:	4801      	ldr	r0, [pc, #4]	; (800176c <__sfp_lock_acquire+0x8>)
 8001766:	f000 b8b3 	b.w	80018d0 <__retarget_lock_acquire_recursive>
 800176a:	bf00      	nop
 800176c:	200000d0 	.word	0x200000d0

08001770 <__sfp_lock_release>:
 8001770:	4801      	ldr	r0, [pc, #4]	; (8001778 <__sfp_lock_release+0x8>)
 8001772:	f000 b8ae 	b.w	80018d2 <__retarget_lock_release_recursive>
 8001776:	bf00      	nop
 8001778:	200000d0 	.word	0x200000d0

0800177c <__sinit_lock_acquire>:
 800177c:	4801      	ldr	r0, [pc, #4]	; (8001784 <__sinit_lock_acquire+0x8>)
 800177e:	f000 b8a7 	b.w	80018d0 <__retarget_lock_acquire_recursive>
 8001782:	bf00      	nop
 8001784:	200000cb 	.word	0x200000cb

08001788 <__sinit_lock_release>:
 8001788:	4801      	ldr	r0, [pc, #4]	; (8001790 <__sinit_lock_release+0x8>)
 800178a:	f000 b8a2 	b.w	80018d2 <__retarget_lock_release_recursive>
 800178e:	bf00      	nop
 8001790:	200000cb 	.word	0x200000cb

08001794 <__sinit>:
 8001794:	b510      	push	{r4, lr}
 8001796:	4604      	mov	r4, r0
 8001798:	f7ff fff0 	bl	800177c <__sinit_lock_acquire>
 800179c:	69a3      	ldr	r3, [r4, #24]
 800179e:	b11b      	cbz	r3, 80017a8 <__sinit+0x14>
 80017a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017a4:	f7ff bff0 	b.w	8001788 <__sinit_lock_release>
 80017a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80017ac:	6523      	str	r3, [r4, #80]	; 0x50
 80017ae:	4b13      	ldr	r3, [pc, #76]	; (80017fc <__sinit+0x68>)
 80017b0:	4a13      	ldr	r2, [pc, #76]	; (8001800 <__sinit+0x6c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80017b6:	42a3      	cmp	r3, r4
 80017b8:	bf04      	itt	eq
 80017ba:	2301      	moveq	r3, #1
 80017bc:	61a3      	streq	r3, [r4, #24]
 80017be:	4620      	mov	r0, r4
 80017c0:	f000 f820 	bl	8001804 <__sfp>
 80017c4:	6060      	str	r0, [r4, #4]
 80017c6:	4620      	mov	r0, r4
 80017c8:	f000 f81c 	bl	8001804 <__sfp>
 80017cc:	60a0      	str	r0, [r4, #8]
 80017ce:	4620      	mov	r0, r4
 80017d0:	f000 f818 	bl	8001804 <__sfp>
 80017d4:	2200      	movs	r2, #0
 80017d6:	60e0      	str	r0, [r4, #12]
 80017d8:	2104      	movs	r1, #4
 80017da:	6860      	ldr	r0, [r4, #4]
 80017dc:	f7ff ff82 	bl	80016e4 <std>
 80017e0:	68a0      	ldr	r0, [r4, #8]
 80017e2:	2201      	movs	r2, #1
 80017e4:	2109      	movs	r1, #9
 80017e6:	f7ff ff7d 	bl	80016e4 <std>
 80017ea:	68e0      	ldr	r0, [r4, #12]
 80017ec:	2202      	movs	r2, #2
 80017ee:	2112      	movs	r1, #18
 80017f0:	f7ff ff78 	bl	80016e4 <std>
 80017f4:	2301      	movs	r3, #1
 80017f6:	61a3      	str	r3, [r4, #24]
 80017f8:	e7d2      	b.n	80017a0 <__sinit+0xc>
 80017fa:	bf00      	nop
 80017fc:	08001e70 	.word	0x08001e70
 8001800:	0800172d 	.word	0x0800172d

08001804 <__sfp>:
 8001804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001806:	4607      	mov	r7, r0
 8001808:	f7ff ffac 	bl	8001764 <__sfp_lock_acquire>
 800180c:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <__sfp+0x84>)
 800180e:	681e      	ldr	r6, [r3, #0]
 8001810:	69b3      	ldr	r3, [r6, #24]
 8001812:	b913      	cbnz	r3, 800181a <__sfp+0x16>
 8001814:	4630      	mov	r0, r6
 8001816:	f7ff ffbd 	bl	8001794 <__sinit>
 800181a:	3648      	adds	r6, #72	; 0x48
 800181c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001820:	3b01      	subs	r3, #1
 8001822:	d503      	bpl.n	800182c <__sfp+0x28>
 8001824:	6833      	ldr	r3, [r6, #0]
 8001826:	b30b      	cbz	r3, 800186c <__sfp+0x68>
 8001828:	6836      	ldr	r6, [r6, #0]
 800182a:	e7f7      	b.n	800181c <__sfp+0x18>
 800182c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001830:	b9d5      	cbnz	r5, 8001868 <__sfp+0x64>
 8001832:	4b16      	ldr	r3, [pc, #88]	; (800188c <__sfp+0x88>)
 8001834:	60e3      	str	r3, [r4, #12]
 8001836:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800183a:	6665      	str	r5, [r4, #100]	; 0x64
 800183c:	f000 f847 	bl	80018ce <__retarget_lock_init_recursive>
 8001840:	f7ff ff96 	bl	8001770 <__sfp_lock_release>
 8001844:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001848:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800184c:	6025      	str	r5, [r4, #0]
 800184e:	61a5      	str	r5, [r4, #24]
 8001850:	2208      	movs	r2, #8
 8001852:	4629      	mov	r1, r5
 8001854:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001858:	f7ff fa94 	bl	8000d84 <memset>
 800185c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001860:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001864:	4620      	mov	r0, r4
 8001866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001868:	3468      	adds	r4, #104	; 0x68
 800186a:	e7d9      	b.n	8001820 <__sfp+0x1c>
 800186c:	2104      	movs	r1, #4
 800186e:	4638      	mov	r0, r7
 8001870:	f7ff ff62 	bl	8001738 <__sfmoreglue>
 8001874:	4604      	mov	r4, r0
 8001876:	6030      	str	r0, [r6, #0]
 8001878:	2800      	cmp	r0, #0
 800187a:	d1d5      	bne.n	8001828 <__sfp+0x24>
 800187c:	f7ff ff78 	bl	8001770 <__sfp_lock_release>
 8001880:	230c      	movs	r3, #12
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	e7ee      	b.n	8001864 <__sfp+0x60>
 8001886:	bf00      	nop
 8001888:	08001e70 	.word	0x08001e70
 800188c:	ffff0001 	.word	0xffff0001

08001890 <_fwalk_reent>:
 8001890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001894:	4606      	mov	r6, r0
 8001896:	4688      	mov	r8, r1
 8001898:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800189c:	2700      	movs	r7, #0
 800189e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80018a2:	f1b9 0901 	subs.w	r9, r9, #1
 80018a6:	d505      	bpl.n	80018b4 <_fwalk_reent+0x24>
 80018a8:	6824      	ldr	r4, [r4, #0]
 80018aa:	2c00      	cmp	r4, #0
 80018ac:	d1f7      	bne.n	800189e <_fwalk_reent+0xe>
 80018ae:	4638      	mov	r0, r7
 80018b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80018b4:	89ab      	ldrh	r3, [r5, #12]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d907      	bls.n	80018ca <_fwalk_reent+0x3a>
 80018ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80018be:	3301      	adds	r3, #1
 80018c0:	d003      	beq.n	80018ca <_fwalk_reent+0x3a>
 80018c2:	4629      	mov	r1, r5
 80018c4:	4630      	mov	r0, r6
 80018c6:	47c0      	blx	r8
 80018c8:	4307      	orrs	r7, r0
 80018ca:	3568      	adds	r5, #104	; 0x68
 80018cc:	e7e9      	b.n	80018a2 <_fwalk_reent+0x12>

080018ce <__retarget_lock_init_recursive>:
 80018ce:	4770      	bx	lr

080018d0 <__retarget_lock_acquire_recursive>:
 80018d0:	4770      	bx	lr

080018d2 <__retarget_lock_release_recursive>:
 80018d2:	4770      	bx	lr

080018d4 <__swhatbuf_r>:
 80018d4:	b570      	push	{r4, r5, r6, lr}
 80018d6:	460e      	mov	r6, r1
 80018d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018dc:	2900      	cmp	r1, #0
 80018de:	b096      	sub	sp, #88	; 0x58
 80018e0:	4614      	mov	r4, r2
 80018e2:	461d      	mov	r5, r3
 80018e4:	da07      	bge.n	80018f6 <__swhatbuf_r+0x22>
 80018e6:	2300      	movs	r3, #0
 80018e8:	602b      	str	r3, [r5, #0]
 80018ea:	89b3      	ldrh	r3, [r6, #12]
 80018ec:	061a      	lsls	r2, r3, #24
 80018ee:	d410      	bmi.n	8001912 <__swhatbuf_r+0x3e>
 80018f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018f4:	e00e      	b.n	8001914 <__swhatbuf_r+0x40>
 80018f6:	466a      	mov	r2, sp
 80018f8:	f000 f9b8 	bl	8001c6c <_fstat_r>
 80018fc:	2800      	cmp	r0, #0
 80018fe:	dbf2      	blt.n	80018e6 <__swhatbuf_r+0x12>
 8001900:	9a01      	ldr	r2, [sp, #4]
 8001902:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001906:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800190a:	425a      	negs	r2, r3
 800190c:	415a      	adcs	r2, r3
 800190e:	602a      	str	r2, [r5, #0]
 8001910:	e7ee      	b.n	80018f0 <__swhatbuf_r+0x1c>
 8001912:	2340      	movs	r3, #64	; 0x40
 8001914:	2000      	movs	r0, #0
 8001916:	6023      	str	r3, [r4, #0]
 8001918:	b016      	add	sp, #88	; 0x58
 800191a:	bd70      	pop	{r4, r5, r6, pc}

0800191c <__smakebuf_r>:
 800191c:	898b      	ldrh	r3, [r1, #12]
 800191e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001920:	079d      	lsls	r5, r3, #30
 8001922:	4606      	mov	r6, r0
 8001924:	460c      	mov	r4, r1
 8001926:	d507      	bpl.n	8001938 <__smakebuf_r+0x1c>
 8001928:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800192c:	6023      	str	r3, [r4, #0]
 800192e:	6123      	str	r3, [r4, #16]
 8001930:	2301      	movs	r3, #1
 8001932:	6163      	str	r3, [r4, #20]
 8001934:	b002      	add	sp, #8
 8001936:	bd70      	pop	{r4, r5, r6, pc}
 8001938:	ab01      	add	r3, sp, #4
 800193a:	466a      	mov	r2, sp
 800193c:	f7ff ffca 	bl	80018d4 <__swhatbuf_r>
 8001940:	9900      	ldr	r1, [sp, #0]
 8001942:	4605      	mov	r5, r0
 8001944:	4630      	mov	r0, r6
 8001946:	f000 f879 	bl	8001a3c <_malloc_r>
 800194a:	b948      	cbnz	r0, 8001960 <__smakebuf_r+0x44>
 800194c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001950:	059a      	lsls	r2, r3, #22
 8001952:	d4ef      	bmi.n	8001934 <__smakebuf_r+0x18>
 8001954:	f023 0303 	bic.w	r3, r3, #3
 8001958:	f043 0302 	orr.w	r3, r3, #2
 800195c:	81a3      	strh	r3, [r4, #12]
 800195e:	e7e3      	b.n	8001928 <__smakebuf_r+0xc>
 8001960:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <__smakebuf_r+0x7c>)
 8001962:	62b3      	str	r3, [r6, #40]	; 0x28
 8001964:	89a3      	ldrh	r3, [r4, #12]
 8001966:	6020      	str	r0, [r4, #0]
 8001968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800196c:	81a3      	strh	r3, [r4, #12]
 800196e:	9b00      	ldr	r3, [sp, #0]
 8001970:	6163      	str	r3, [r4, #20]
 8001972:	9b01      	ldr	r3, [sp, #4]
 8001974:	6120      	str	r0, [r4, #16]
 8001976:	b15b      	cbz	r3, 8001990 <__smakebuf_r+0x74>
 8001978:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800197c:	4630      	mov	r0, r6
 800197e:	f000 f987 	bl	8001c90 <_isatty_r>
 8001982:	b128      	cbz	r0, 8001990 <__smakebuf_r+0x74>
 8001984:	89a3      	ldrh	r3, [r4, #12]
 8001986:	f023 0303 	bic.w	r3, r3, #3
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	81a3      	strh	r3, [r4, #12]
 8001990:	89a0      	ldrh	r0, [r4, #12]
 8001992:	4305      	orrs	r5, r0
 8001994:	81a5      	strh	r5, [r4, #12]
 8001996:	e7cd      	b.n	8001934 <__smakebuf_r+0x18>
 8001998:	0800172d 	.word	0x0800172d

0800199c <_free_r>:
 800199c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800199e:	2900      	cmp	r1, #0
 80019a0:	d048      	beq.n	8001a34 <_free_r+0x98>
 80019a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019a6:	9001      	str	r0, [sp, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f1a1 0404 	sub.w	r4, r1, #4
 80019ae:	bfb8      	it	lt
 80019b0:	18e4      	addlt	r4, r4, r3
 80019b2:	f000 f98f 	bl	8001cd4 <__malloc_lock>
 80019b6:	4a20      	ldr	r2, [pc, #128]	; (8001a38 <_free_r+0x9c>)
 80019b8:	9801      	ldr	r0, [sp, #4]
 80019ba:	6813      	ldr	r3, [r2, #0]
 80019bc:	4615      	mov	r5, r2
 80019be:	b933      	cbnz	r3, 80019ce <_free_r+0x32>
 80019c0:	6063      	str	r3, [r4, #4]
 80019c2:	6014      	str	r4, [r2, #0]
 80019c4:	b003      	add	sp, #12
 80019c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80019ca:	f000 b989 	b.w	8001ce0 <__malloc_unlock>
 80019ce:	42a3      	cmp	r3, r4
 80019d0:	d90b      	bls.n	80019ea <_free_r+0x4e>
 80019d2:	6821      	ldr	r1, [r4, #0]
 80019d4:	1862      	adds	r2, r4, r1
 80019d6:	4293      	cmp	r3, r2
 80019d8:	bf04      	itt	eq
 80019da:	681a      	ldreq	r2, [r3, #0]
 80019dc:	685b      	ldreq	r3, [r3, #4]
 80019de:	6063      	str	r3, [r4, #4]
 80019e0:	bf04      	itt	eq
 80019e2:	1852      	addeq	r2, r2, r1
 80019e4:	6022      	streq	r2, [r4, #0]
 80019e6:	602c      	str	r4, [r5, #0]
 80019e8:	e7ec      	b.n	80019c4 <_free_r+0x28>
 80019ea:	461a      	mov	r2, r3
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	b10b      	cbz	r3, 80019f4 <_free_r+0x58>
 80019f0:	42a3      	cmp	r3, r4
 80019f2:	d9fa      	bls.n	80019ea <_free_r+0x4e>
 80019f4:	6811      	ldr	r1, [r2, #0]
 80019f6:	1855      	adds	r5, r2, r1
 80019f8:	42a5      	cmp	r5, r4
 80019fa:	d10b      	bne.n	8001a14 <_free_r+0x78>
 80019fc:	6824      	ldr	r4, [r4, #0]
 80019fe:	4421      	add	r1, r4
 8001a00:	1854      	adds	r4, r2, r1
 8001a02:	42a3      	cmp	r3, r4
 8001a04:	6011      	str	r1, [r2, #0]
 8001a06:	d1dd      	bne.n	80019c4 <_free_r+0x28>
 8001a08:	681c      	ldr	r4, [r3, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	6053      	str	r3, [r2, #4]
 8001a0e:	4421      	add	r1, r4
 8001a10:	6011      	str	r1, [r2, #0]
 8001a12:	e7d7      	b.n	80019c4 <_free_r+0x28>
 8001a14:	d902      	bls.n	8001a1c <_free_r+0x80>
 8001a16:	230c      	movs	r3, #12
 8001a18:	6003      	str	r3, [r0, #0]
 8001a1a:	e7d3      	b.n	80019c4 <_free_r+0x28>
 8001a1c:	6825      	ldr	r5, [r4, #0]
 8001a1e:	1961      	adds	r1, r4, r5
 8001a20:	428b      	cmp	r3, r1
 8001a22:	bf04      	itt	eq
 8001a24:	6819      	ldreq	r1, [r3, #0]
 8001a26:	685b      	ldreq	r3, [r3, #4]
 8001a28:	6063      	str	r3, [r4, #4]
 8001a2a:	bf04      	itt	eq
 8001a2c:	1949      	addeq	r1, r1, r5
 8001a2e:	6021      	streq	r1, [r4, #0]
 8001a30:	6054      	str	r4, [r2, #4]
 8001a32:	e7c7      	b.n	80019c4 <_free_r+0x28>
 8001a34:	b003      	add	sp, #12
 8001a36:	bd30      	pop	{r4, r5, pc}
 8001a38:	20000088 	.word	0x20000088

08001a3c <_malloc_r>:
 8001a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a3e:	1ccd      	adds	r5, r1, #3
 8001a40:	f025 0503 	bic.w	r5, r5, #3
 8001a44:	3508      	adds	r5, #8
 8001a46:	2d0c      	cmp	r5, #12
 8001a48:	bf38      	it	cc
 8001a4a:	250c      	movcc	r5, #12
 8001a4c:	2d00      	cmp	r5, #0
 8001a4e:	4606      	mov	r6, r0
 8001a50:	db01      	blt.n	8001a56 <_malloc_r+0x1a>
 8001a52:	42a9      	cmp	r1, r5
 8001a54:	d903      	bls.n	8001a5e <_malloc_r+0x22>
 8001a56:	230c      	movs	r3, #12
 8001a58:	6033      	str	r3, [r6, #0]
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a5e:	f000 f939 	bl	8001cd4 <__malloc_lock>
 8001a62:	4921      	ldr	r1, [pc, #132]	; (8001ae8 <_malloc_r+0xac>)
 8001a64:	680a      	ldr	r2, [r1, #0]
 8001a66:	4614      	mov	r4, r2
 8001a68:	b99c      	cbnz	r4, 8001a92 <_malloc_r+0x56>
 8001a6a:	4f20      	ldr	r7, [pc, #128]	; (8001aec <_malloc_r+0xb0>)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	b923      	cbnz	r3, 8001a7a <_malloc_r+0x3e>
 8001a70:	4621      	mov	r1, r4
 8001a72:	4630      	mov	r0, r6
 8001a74:	f000 f884 	bl	8001b80 <_sbrk_r>
 8001a78:	6038      	str	r0, [r7, #0]
 8001a7a:	4629      	mov	r1, r5
 8001a7c:	4630      	mov	r0, r6
 8001a7e:	f000 f87f 	bl	8001b80 <_sbrk_r>
 8001a82:	1c43      	adds	r3, r0, #1
 8001a84:	d123      	bne.n	8001ace <_malloc_r+0x92>
 8001a86:	230c      	movs	r3, #12
 8001a88:	6033      	str	r3, [r6, #0]
 8001a8a:	4630      	mov	r0, r6
 8001a8c:	f000 f928 	bl	8001ce0 <__malloc_unlock>
 8001a90:	e7e3      	b.n	8001a5a <_malloc_r+0x1e>
 8001a92:	6823      	ldr	r3, [r4, #0]
 8001a94:	1b5b      	subs	r3, r3, r5
 8001a96:	d417      	bmi.n	8001ac8 <_malloc_r+0x8c>
 8001a98:	2b0b      	cmp	r3, #11
 8001a9a:	d903      	bls.n	8001aa4 <_malloc_r+0x68>
 8001a9c:	6023      	str	r3, [r4, #0]
 8001a9e:	441c      	add	r4, r3
 8001aa0:	6025      	str	r5, [r4, #0]
 8001aa2:	e004      	b.n	8001aae <_malloc_r+0x72>
 8001aa4:	6863      	ldr	r3, [r4, #4]
 8001aa6:	42a2      	cmp	r2, r4
 8001aa8:	bf0c      	ite	eq
 8001aaa:	600b      	streq	r3, [r1, #0]
 8001aac:	6053      	strne	r3, [r2, #4]
 8001aae:	4630      	mov	r0, r6
 8001ab0:	f000 f916 	bl	8001ce0 <__malloc_unlock>
 8001ab4:	f104 000b 	add.w	r0, r4, #11
 8001ab8:	1d23      	adds	r3, r4, #4
 8001aba:	f020 0007 	bic.w	r0, r0, #7
 8001abe:	1ac2      	subs	r2, r0, r3
 8001ac0:	d0cc      	beq.n	8001a5c <_malloc_r+0x20>
 8001ac2:	1a1b      	subs	r3, r3, r0
 8001ac4:	50a3      	str	r3, [r4, r2]
 8001ac6:	e7c9      	b.n	8001a5c <_malloc_r+0x20>
 8001ac8:	4622      	mov	r2, r4
 8001aca:	6864      	ldr	r4, [r4, #4]
 8001acc:	e7cc      	b.n	8001a68 <_malloc_r+0x2c>
 8001ace:	1cc4      	adds	r4, r0, #3
 8001ad0:	f024 0403 	bic.w	r4, r4, #3
 8001ad4:	42a0      	cmp	r0, r4
 8001ad6:	d0e3      	beq.n	8001aa0 <_malloc_r+0x64>
 8001ad8:	1a21      	subs	r1, r4, r0
 8001ada:	4630      	mov	r0, r6
 8001adc:	f000 f850 	bl	8001b80 <_sbrk_r>
 8001ae0:	3001      	adds	r0, #1
 8001ae2:	d1dd      	bne.n	8001aa0 <_malloc_r+0x64>
 8001ae4:	e7cf      	b.n	8001a86 <_malloc_r+0x4a>
 8001ae6:	bf00      	nop
 8001ae8:	20000088 	.word	0x20000088
 8001aec:	2000008c 	.word	0x2000008c

08001af0 <_putc_r>:
 8001af0:	b570      	push	{r4, r5, r6, lr}
 8001af2:	460d      	mov	r5, r1
 8001af4:	4614      	mov	r4, r2
 8001af6:	4606      	mov	r6, r0
 8001af8:	b118      	cbz	r0, 8001b02 <_putc_r+0x12>
 8001afa:	6983      	ldr	r3, [r0, #24]
 8001afc:	b90b      	cbnz	r3, 8001b02 <_putc_r+0x12>
 8001afe:	f7ff fe49 	bl	8001794 <__sinit>
 8001b02:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <_putc_r+0x84>)
 8001b04:	429c      	cmp	r4, r3
 8001b06:	d124      	bne.n	8001b52 <_putc_r+0x62>
 8001b08:	6874      	ldr	r4, [r6, #4]
 8001b0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b0c:	07d8      	lsls	r0, r3, #31
 8001b0e:	d405      	bmi.n	8001b1c <_putc_r+0x2c>
 8001b10:	89a3      	ldrh	r3, [r4, #12]
 8001b12:	0599      	lsls	r1, r3, #22
 8001b14:	d402      	bmi.n	8001b1c <_putc_r+0x2c>
 8001b16:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b18:	f7ff feda 	bl	80018d0 <__retarget_lock_acquire_recursive>
 8001b1c:	68a3      	ldr	r3, [r4, #8]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	60a3      	str	r3, [r4, #8]
 8001b24:	da05      	bge.n	8001b32 <_putc_r+0x42>
 8001b26:	69a2      	ldr	r2, [r4, #24]
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	db1c      	blt.n	8001b66 <_putc_r+0x76>
 8001b2c:	b2eb      	uxtb	r3, r5
 8001b2e:	2b0a      	cmp	r3, #10
 8001b30:	d019      	beq.n	8001b66 <_putc_r+0x76>
 8001b32:	6823      	ldr	r3, [r4, #0]
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	6022      	str	r2, [r4, #0]
 8001b38:	701d      	strb	r5, [r3, #0]
 8001b3a:	b2ed      	uxtb	r5, r5
 8001b3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b3e:	07da      	lsls	r2, r3, #31
 8001b40:	d405      	bmi.n	8001b4e <_putc_r+0x5e>
 8001b42:	89a3      	ldrh	r3, [r4, #12]
 8001b44:	059b      	lsls	r3, r3, #22
 8001b46:	d402      	bmi.n	8001b4e <_putc_r+0x5e>
 8001b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b4a:	f7ff fec2 	bl	80018d2 <__retarget_lock_release_recursive>
 8001b4e:	4628      	mov	r0, r5
 8001b50:	bd70      	pop	{r4, r5, r6, pc}
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <_putc_r+0x88>)
 8001b54:	429c      	cmp	r4, r3
 8001b56:	d101      	bne.n	8001b5c <_putc_r+0x6c>
 8001b58:	68b4      	ldr	r4, [r6, #8]
 8001b5a:	e7d6      	b.n	8001b0a <_putc_r+0x1a>
 8001b5c:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <_putc_r+0x8c>)
 8001b5e:	429c      	cmp	r4, r3
 8001b60:	bf08      	it	eq
 8001b62:	68f4      	ldreq	r4, [r6, #12]
 8001b64:	e7d1      	b.n	8001b0a <_putc_r+0x1a>
 8001b66:	4629      	mov	r1, r5
 8001b68:	4622      	mov	r2, r4
 8001b6a:	4630      	mov	r0, r6
 8001b6c:	f7ff fc38 	bl	80013e0 <__swbuf_r>
 8001b70:	4605      	mov	r5, r0
 8001b72:	e7e3      	b.n	8001b3c <_putc_r+0x4c>
 8001b74:	08001ec8 	.word	0x08001ec8
 8001b78:	08001ee8 	.word	0x08001ee8
 8001b7c:	08001ea8 	.word	0x08001ea8

08001b80 <_sbrk_r>:
 8001b80:	b538      	push	{r3, r4, r5, lr}
 8001b82:	4d06      	ldr	r5, [pc, #24]	; (8001b9c <_sbrk_r+0x1c>)
 8001b84:	2300      	movs	r3, #0
 8001b86:	4604      	mov	r4, r0
 8001b88:	4608      	mov	r0, r1
 8001b8a:	602b      	str	r3, [r5, #0]
 8001b8c:	f000 f8e8 	bl	8001d60 <_sbrk>
 8001b90:	1c43      	adds	r3, r0, #1
 8001b92:	d102      	bne.n	8001b9a <_sbrk_r+0x1a>
 8001b94:	682b      	ldr	r3, [r5, #0]
 8001b96:	b103      	cbz	r3, 8001b9a <_sbrk_r+0x1a>
 8001b98:	6023      	str	r3, [r4, #0]
 8001b9a:	bd38      	pop	{r3, r4, r5, pc}
 8001b9c:	200000d4 	.word	0x200000d4

08001ba0 <__sread>:
 8001ba0:	b510      	push	{r4, lr}
 8001ba2:	460c      	mov	r4, r1
 8001ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ba8:	f000 f8a0 	bl	8001cec <_read_r>
 8001bac:	2800      	cmp	r0, #0
 8001bae:	bfab      	itete	ge
 8001bb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001bb2:	89a3      	ldrhlt	r3, [r4, #12]
 8001bb4:	181b      	addge	r3, r3, r0
 8001bb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001bba:	bfac      	ite	ge
 8001bbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8001bbe:	81a3      	strhlt	r3, [r4, #12]
 8001bc0:	bd10      	pop	{r4, pc}

08001bc2 <__swrite>:
 8001bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bc6:	461f      	mov	r7, r3
 8001bc8:	898b      	ldrh	r3, [r1, #12]
 8001bca:	05db      	lsls	r3, r3, #23
 8001bcc:	4605      	mov	r5, r0
 8001bce:	460c      	mov	r4, r1
 8001bd0:	4616      	mov	r6, r2
 8001bd2:	d505      	bpl.n	8001be0 <__swrite+0x1e>
 8001bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bd8:	2302      	movs	r3, #2
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f000 f868 	bl	8001cb0 <_lseek_r>
 8001be0:	89a3      	ldrh	r3, [r4, #12]
 8001be2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001be6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bea:	81a3      	strh	r3, [r4, #12]
 8001bec:	4632      	mov	r2, r6
 8001bee:	463b      	mov	r3, r7
 8001bf0:	4628      	mov	r0, r5
 8001bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001bf6:	f000 b817 	b.w	8001c28 <_write_r>

08001bfa <__sseek>:
 8001bfa:	b510      	push	{r4, lr}
 8001bfc:	460c      	mov	r4, r1
 8001bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c02:	f000 f855 	bl	8001cb0 <_lseek_r>
 8001c06:	1c43      	adds	r3, r0, #1
 8001c08:	89a3      	ldrh	r3, [r4, #12]
 8001c0a:	bf15      	itete	ne
 8001c0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8001c0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001c12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001c16:	81a3      	strheq	r3, [r4, #12]
 8001c18:	bf18      	it	ne
 8001c1a:	81a3      	strhne	r3, [r4, #12]
 8001c1c:	bd10      	pop	{r4, pc}

08001c1e <__sclose>:
 8001c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c22:	f000 b813 	b.w	8001c4c <_close_r>
	...

08001c28 <_write_r>:
 8001c28:	b538      	push	{r3, r4, r5, lr}
 8001c2a:	4d07      	ldr	r5, [pc, #28]	; (8001c48 <_write_r+0x20>)
 8001c2c:	4604      	mov	r4, r0
 8001c2e:	4608      	mov	r0, r1
 8001c30:	4611      	mov	r1, r2
 8001c32:	2200      	movs	r2, #0
 8001c34:	602a      	str	r2, [r5, #0]
 8001c36:	461a      	mov	r2, r3
 8001c38:	f7fe fb51 	bl	80002de <_write>
 8001c3c:	1c43      	adds	r3, r0, #1
 8001c3e:	d102      	bne.n	8001c46 <_write_r+0x1e>
 8001c40:	682b      	ldr	r3, [r5, #0]
 8001c42:	b103      	cbz	r3, 8001c46 <_write_r+0x1e>
 8001c44:	6023      	str	r3, [r4, #0]
 8001c46:	bd38      	pop	{r3, r4, r5, pc}
 8001c48:	200000d4 	.word	0x200000d4

08001c4c <_close_r>:
 8001c4c:	b538      	push	{r3, r4, r5, lr}
 8001c4e:	4d06      	ldr	r5, [pc, #24]	; (8001c68 <_close_r+0x1c>)
 8001c50:	2300      	movs	r3, #0
 8001c52:	4604      	mov	r4, r0
 8001c54:	4608      	mov	r0, r1
 8001c56:	602b      	str	r3, [r5, #0]
 8001c58:	f000 f85a 	bl	8001d10 <_close>
 8001c5c:	1c43      	adds	r3, r0, #1
 8001c5e:	d102      	bne.n	8001c66 <_close_r+0x1a>
 8001c60:	682b      	ldr	r3, [r5, #0]
 8001c62:	b103      	cbz	r3, 8001c66 <_close_r+0x1a>
 8001c64:	6023      	str	r3, [r4, #0]
 8001c66:	bd38      	pop	{r3, r4, r5, pc}
 8001c68:	200000d4 	.word	0x200000d4

08001c6c <_fstat_r>:
 8001c6c:	b538      	push	{r3, r4, r5, lr}
 8001c6e:	4d07      	ldr	r5, [pc, #28]	; (8001c8c <_fstat_r+0x20>)
 8001c70:	2300      	movs	r3, #0
 8001c72:	4604      	mov	r4, r0
 8001c74:	4608      	mov	r0, r1
 8001c76:	4611      	mov	r1, r2
 8001c78:	602b      	str	r3, [r5, #0]
 8001c7a:	f000 f851 	bl	8001d20 <_fstat>
 8001c7e:	1c43      	adds	r3, r0, #1
 8001c80:	d102      	bne.n	8001c88 <_fstat_r+0x1c>
 8001c82:	682b      	ldr	r3, [r5, #0]
 8001c84:	b103      	cbz	r3, 8001c88 <_fstat_r+0x1c>
 8001c86:	6023      	str	r3, [r4, #0]
 8001c88:	bd38      	pop	{r3, r4, r5, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200000d4 	.word	0x200000d4

08001c90 <_isatty_r>:
 8001c90:	b538      	push	{r3, r4, r5, lr}
 8001c92:	4d06      	ldr	r5, [pc, #24]	; (8001cac <_isatty_r+0x1c>)
 8001c94:	2300      	movs	r3, #0
 8001c96:	4604      	mov	r4, r0
 8001c98:	4608      	mov	r0, r1
 8001c9a:	602b      	str	r3, [r5, #0]
 8001c9c:	f000 f848 	bl	8001d30 <_isatty>
 8001ca0:	1c43      	adds	r3, r0, #1
 8001ca2:	d102      	bne.n	8001caa <_isatty_r+0x1a>
 8001ca4:	682b      	ldr	r3, [r5, #0]
 8001ca6:	b103      	cbz	r3, 8001caa <_isatty_r+0x1a>
 8001ca8:	6023      	str	r3, [r4, #0]
 8001caa:	bd38      	pop	{r3, r4, r5, pc}
 8001cac:	200000d4 	.word	0x200000d4

08001cb0 <_lseek_r>:
 8001cb0:	b538      	push	{r3, r4, r5, lr}
 8001cb2:	4d07      	ldr	r5, [pc, #28]	; (8001cd0 <_lseek_r+0x20>)
 8001cb4:	4604      	mov	r4, r0
 8001cb6:	4608      	mov	r0, r1
 8001cb8:	4611      	mov	r1, r2
 8001cba:	2200      	movs	r2, #0
 8001cbc:	602a      	str	r2, [r5, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	f000 f83e 	bl	8001d40 <_lseek>
 8001cc4:	1c43      	adds	r3, r0, #1
 8001cc6:	d102      	bne.n	8001cce <_lseek_r+0x1e>
 8001cc8:	682b      	ldr	r3, [r5, #0]
 8001cca:	b103      	cbz	r3, 8001cce <_lseek_r+0x1e>
 8001ccc:	6023      	str	r3, [r4, #0]
 8001cce:	bd38      	pop	{r3, r4, r5, pc}
 8001cd0:	200000d4 	.word	0x200000d4

08001cd4 <__malloc_lock>:
 8001cd4:	4801      	ldr	r0, [pc, #4]	; (8001cdc <__malloc_lock+0x8>)
 8001cd6:	f7ff bdfb 	b.w	80018d0 <__retarget_lock_acquire_recursive>
 8001cda:	bf00      	nop
 8001cdc:	200000cc 	.word	0x200000cc

08001ce0 <__malloc_unlock>:
 8001ce0:	4801      	ldr	r0, [pc, #4]	; (8001ce8 <__malloc_unlock+0x8>)
 8001ce2:	f7ff bdf6 	b.w	80018d2 <__retarget_lock_release_recursive>
 8001ce6:	bf00      	nop
 8001ce8:	200000cc 	.word	0x200000cc

08001cec <_read_r>:
 8001cec:	b538      	push	{r3, r4, r5, lr}
 8001cee:	4d07      	ldr	r5, [pc, #28]	; (8001d0c <_read_r+0x20>)
 8001cf0:	4604      	mov	r4, r0
 8001cf2:	4608      	mov	r0, r1
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	602a      	str	r2, [r5, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	f000 f828 	bl	8001d50 <_read>
 8001d00:	1c43      	adds	r3, r0, #1
 8001d02:	d102      	bne.n	8001d0a <_read_r+0x1e>
 8001d04:	682b      	ldr	r3, [r5, #0]
 8001d06:	b103      	cbz	r3, 8001d0a <_read_r+0x1e>
 8001d08:	6023      	str	r3, [r4, #0]
 8001d0a:	bd38      	pop	{r3, r4, r5, pc}
 8001d0c:	200000d4 	.word	0x200000d4

08001d10 <_close>:
 8001d10:	4b02      	ldr	r3, [pc, #8]	; (8001d1c <_close+0xc>)
 8001d12:	2258      	movs	r2, #88	; 0x58
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d1a:	4770      	bx	lr
 8001d1c:	200000d4 	.word	0x200000d4

08001d20 <_fstat>:
 8001d20:	4b02      	ldr	r3, [pc, #8]	; (8001d2c <_fstat+0xc>)
 8001d22:	2258      	movs	r2, #88	; 0x58
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d2a:	4770      	bx	lr
 8001d2c:	200000d4 	.word	0x200000d4

08001d30 <_isatty>:
 8001d30:	4b02      	ldr	r3, [pc, #8]	; (8001d3c <_isatty+0xc>)
 8001d32:	2258      	movs	r2, #88	; 0x58
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	2000      	movs	r0, #0
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	200000d4 	.word	0x200000d4

08001d40 <_lseek>:
 8001d40:	4b02      	ldr	r3, [pc, #8]	; (8001d4c <_lseek+0xc>)
 8001d42:	2258      	movs	r2, #88	; 0x58
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d4a:	4770      	bx	lr
 8001d4c:	200000d4 	.word	0x200000d4

08001d50 <_read>:
 8001d50:	4b02      	ldr	r3, [pc, #8]	; (8001d5c <_read+0xc>)
 8001d52:	2258      	movs	r2, #88	; 0x58
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d5a:	4770      	bx	lr
 8001d5c:	200000d4 	.word	0x200000d4

08001d60 <_sbrk>:
 8001d60:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <_sbrk+0x14>)
 8001d62:	6819      	ldr	r1, [r3, #0]
 8001d64:	4602      	mov	r2, r0
 8001d66:	b909      	cbnz	r1, 8001d6c <_sbrk+0xc>
 8001d68:	4903      	ldr	r1, [pc, #12]	; (8001d78 <_sbrk+0x18>)
 8001d6a:	6019      	str	r1, [r3, #0]
 8001d6c:	6818      	ldr	r0, [r3, #0]
 8001d6e:	4402      	add	r2, r0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	4770      	bx	lr
 8001d74:	20000090 	.word	0x20000090
 8001d78:	200000d8 	.word	0x200000d8

08001d7c <_init>:
 8001d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d7e:	bf00      	nop
 8001d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d82:	bc08      	pop	{r3}
 8001d84:	469e      	mov	lr, r3
 8001d86:	4770      	bx	lr

08001d88 <_fini>:
 8001d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d8a:	bf00      	nop
 8001d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d8e:	bc08      	pop	{r3}
 8001d90:	469e      	mov	lr, r3
 8001d92:	4770      	bx	lr
