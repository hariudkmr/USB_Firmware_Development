
USB_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001af0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08001ca0  08001ca0  00011ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001df8  08001df8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001df8  08001df8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001df8  08001df8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001df8  08001df8  00011df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001dfc  08001dfc  00011dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001e00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000068  08001e68  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08001e68  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000025b5  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000093b  00000000  00000000  0002264d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b8  00000000  00000000  00022f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000160  00000000  00000000  00023140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019446  00000000  00000000  000232a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002094  00000000  00000000  0003c6e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c6a2  00000000  00000000  0003e77a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cae1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ea0  00000000  00000000  000cae70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000084  00000000  00000000  000cbd10  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000117  00000000  00000000  000cbd94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001c88 	.word	0x08001c88

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08001c88 	.word	0x08001c88

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000298:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800029c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80002a0:	f003 0301 	and.w	r3, r3, #1
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d013      	beq.n	80002d0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80002a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002ac:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80002b0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d00b      	beq.n	80002d0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002b8:	e000      	b.n	80002bc <ITM_SendChar+0x2c>
    {
      __NOP();
 80002ba:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d0f9      	beq.n	80002ba <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002c6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002d0:	687b      	ldr	r3, [r7, #4]
}
 80002d2:	4618      	mov	r0, r3
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr

080002de <_write>:

/** \brief Redirects `printf()` output to the serial wire out (SWO).
 * This function overrides a weak function symbol and is not to be used directly.
 */
int _write(int file, char *ptr, int len)
{
 80002de:	b580      	push	{r7, lr}
 80002e0:	b086      	sub	sp, #24
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	60f8      	str	r0, [r7, #12]
 80002e6:	60b9      	str	r1, [r7, #8]
 80002e8:	607a      	str	r2, [r7, #4]
  int i=0;
 80002ea:	2300      	movs	r3, #0
 80002ec:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80002ee:	2300      	movs	r3, #0
 80002f0:	617b      	str	r3, [r7, #20]
 80002f2:	e009      	b.n	8000308 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	1c5a      	adds	r2, r3, #1
 80002f8:	60ba      	str	r2, [r7, #8]
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	4618      	mov	r0, r3
 80002fe:	f7ff ffc7 	bl	8000290 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000302:	697b      	ldr	r3, [r7, #20]
 8000304:	3301      	adds	r3, #1
 8000306:	617b      	str	r3, [r7, #20]
 8000308:	697a      	ldr	r2, [r7, #20]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	429a      	cmp	r2, r3
 800030e:	dbf1      	blt.n	80002f4 <_write+0x16>

  return len;
 8000310:	687b      	ldr	r3, [r7, #4]
}
 8000312:	4618      	mov	r0, r3
 8000314:	3718      	adds	r7, #24
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <_get_log_level_string>:

char const * const _get_log_level_string(LogLevel const log_level)
{
 800031c:	b480      	push	{r7}
 800031e:	b085      	sub	sp, #20
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	71fb      	strb	r3, [r7, #7]
    char *ptr;
	switch(log_level)
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	2b02      	cmp	r3, #2
 800032a:	d00a      	beq.n	8000342 <_get_log_level_string+0x26>
 800032c:	2b02      	cmp	r3, #2
 800032e:	dc0a      	bgt.n	8000346 <_get_log_level_string+0x2a>
 8000330:	2b00      	cmp	r3, #0
 8000332:	d002      	beq.n	800033a <_get_log_level_string+0x1e>
 8000334:	2b01      	cmp	r3, #1
 8000336:	d002      	beq.n	800033e <_get_log_level_string+0x22>
 8000338:	e005      	b.n	8000346 <_get_log_level_string+0x2a>
    {
        case LOG_LEVEL_ERROR:
        	ptr = "ERROR";
 800033a:	4b06      	ldr	r3, [pc, #24]	; (8000354 <_get_log_level_string+0x38>)
 800033c:	60fb      	str	r3, [r7, #12]
        case LOG_LEVEL_INFORMATION:
        	ptr =  "INFO";
 800033e:	4b06      	ldr	r3, [pc, #24]	; (8000358 <_get_log_level_string+0x3c>)
 8000340:	60fb      	str	r3, [r7, #12]
        case LOG_LEVEL_DEBUG:
        	ptr =  "DEBUG";
 8000342:	4b06      	ldr	r3, [pc, #24]	; (800035c <_get_log_level_string+0x40>)
 8000344:	60fb      	str	r3, [r7, #12]
    }
	return ptr;
 8000346:	68fb      	ldr	r3, [r7, #12]
}
 8000348:	4618      	mov	r0, r3
 800034a:	3714      	adds	r7, #20
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	08001ca0 	.word	0x08001ca0
 8000358:	08001ca8 	.word	0x08001ca8
 800035c:	08001cb0 	.word	0x08001cb0

08000360 <_log>:

static void _log(LogLevel const log_level, char const * const format, va_list args)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	60b9      	str	r1, [r7, #8]
 800036a:	607a      	str	r2, [r7, #4]
 800036c:	73fb      	strb	r3, [r7, #15]
    if (log_level > system_log_level){
 800036e:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <_log+0x4c>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	7bfa      	ldrb	r2, [r7, #15]
 8000374:	429a      	cmp	r2, r3
 8000376:	d814      	bhi.n	80003a2 <_log+0x42>
        return;
    }

	printf("[%s] ", _get_log_level_string(log_level));
 8000378:	7bfb      	ldrb	r3, [r7, #15]
 800037a:	4618      	mov	r0, r3
 800037c:	f7ff ffce 	bl	800031c <_get_log_level_string>
 8000380:	4603      	mov	r3, r0
 8000382:	4619      	mov	r1, r3
 8000384:	480a      	ldr	r0, [pc, #40]	; (80003b0 <_log+0x50>)
 8000386:	f000 ff83 	bl	8001290 <iprintf>
	vfprintf(stdout, format, args);
 800038a:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <_log+0x54>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	68b9      	ldr	r1, [r7, #8]
 8000394:	4618      	mov	r0, r3
 8000396:	f000 fddd 	bl	8000f54 <vfiprintf>
	printf("\n");
 800039a:	200a      	movs	r0, #10
 800039c:	f000 ff90 	bl	80012c0 <putchar>
 80003a0:	e000      	b.n	80003a4 <_log+0x44>
        return;
 80003a2:	bf00      	nop
}
 80003a4:	3710      	adds	r7, #16
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	20000000 	.word	0x20000000
 80003b0:	08001cb8 	.word	0x08001cb8
 80003b4:	20000004 	.word	0x20000004

080003b8 <log_info>:
    _log(LOG_LEVEL_ERROR, format, args);
    va_end(args);
}

void log_info(char const * const format, ...)
{
 80003b8:	b40f      	push	{r0, r1, r2, r3}
 80003ba:	b580      	push	{r7, lr}
 80003bc:	b082      	sub	sp, #8
 80003be:	af00      	add	r7, sp, #0
    va_list args;
	va_start(args, format);
 80003c0:	f107 0314 	add.w	r3, r7, #20
 80003c4:	607b      	str	r3, [r7, #4]
    _log(LOG_LEVEL_INFORMATION, format, args);
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	6939      	ldr	r1, [r7, #16]
 80003ca:	2001      	movs	r0, #1
 80003cc:	f7ff ffc8 	bl	8000360 <_log>
    va_end(args);
}
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80003da:	b004      	add	sp, #16
 80003dc:	4770      	bx	lr
	...

080003e0 <main>:
#include "logger.h"
#include "usb_framework.h"


int main(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	log_info("Program Entry-Point");
 80003e4:	4803      	ldr	r0, [pc, #12]	; (80003f4 <main+0x14>)
 80003e6:	f7ff ffe7 	bl	80003b8 <log_info>
	usbd_initialize();
 80003ea:	f000 fbe9 	bl	8000bc0 <usbd_initialize>
    /* Loop forever */
	for(;;)
	{
		usbd_poll();
 80003ee:	f000 fbf7 	bl	8000be0 <usbd_poll>
 80003f2:	e7fc      	b.n	80003ee <main+0xe>
 80003f4:	08001ce0 	.word	0x08001ce0

080003f8 <configure_clock>:

LogLevel system_log_level = LOG_LEVEL_DEBUG;
uint32_t SystemCoreClock = 72000000; // 72 MHz

static void configure_clock()
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
	// Configures flash latency.
	MODIFY_REG(FLASH->ACR,
 80003fc:	4b25      	ldr	r3, [pc, #148]	; (8000494 <configure_clock+0x9c>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	f023 0307 	bic.w	r3, r3, #7
 8000404:	4a23      	ldr	r2, [pc, #140]	; (8000494 <configure_clock+0x9c>)
 8000406:	f043 0302 	orr.w	r3, r3, #2
 800040a:	6013      	str	r3, [r2, #0]
		FLASH_ACR_LATENCY,
		_VAL2FLD(FLASH_ACR_LATENCY, FLASH_ACR_LATENCY_2WS) //FLASH_ACR_LATENCY_2WS << FLASH_ACR_LATENCY_Pos
	);

	// Enables HSE.
	SET_BIT(RCC->CR, RCC_CR_HSEON);
 800040c:	4b22      	ldr	r3, [pc, #136]	; (8000498 <configure_clock+0xa0>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a21      	ldr	r2, [pc, #132]	; (8000498 <configure_clock+0xa0>)
 8000412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000416:	6013      	str	r3, [r2, #0]

	// Waits until HSE is stable.
	while (!READ_BIT(RCC->CR, RCC_CR_HSERDY));
 8000418:	bf00      	nop
 800041a:	4b1f      	ldr	r3, [pc, #124]	; (8000498 <configure_clock+0xa0>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000422:	2b00      	cmp	r3, #0
 8000424:	d0f9      	beq.n	800041a <configure_clock+0x22>

	// Configures PLL: source = HSE, PLLCLK = 72MHz.
	MODIFY_REG(RCC->PLLCFGR,
 8000426:	4b1c      	ldr	r3, [pc, #112]	; (8000498 <configure_clock+0xa0>)
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	4a1c      	ldr	r2, [pc, #112]	; (800049c <configure_clock+0xa4>)
 800042c:	401a      	ands	r2, r3
 800042e:	491a      	ldr	r1, [pc, #104]	; (8000498 <configure_clock+0xa0>)
 8000430:	4b1b      	ldr	r3, [pc, #108]	; (80004a0 <configure_clock+0xa8>)
 8000432:	4313      	orrs	r3, r2
 8000434:	604b      	str	r3, [r1, #4]
		RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ | RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLP,
		_VAL2FLD(RCC_PLLCFGR_PLLM, 4) | _VAL2FLD(RCC_PLLCFGR_PLLN, 72) | _VAL2FLD(RCC_PLLCFGR_PLLQ, 3) | RCC_PLLCFGR_PLLSRC_HSE
	);

	// Enables PLL module.
	SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000436:	4b18      	ldr	r3, [pc, #96]	; (8000498 <configure_clock+0xa0>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a17      	ldr	r2, [pc, #92]	; (8000498 <configure_clock+0xa0>)
 800043c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000440:	6013      	str	r3, [r2, #0]

	// Waits until PLL is stable.
	while (!READ_BIT(RCC->CR, RCC_CR_PLLRDY));
 8000442:	bf00      	nop
 8000444:	4b14      	ldr	r3, [pc, #80]	; (8000498 <configure_clock+0xa0>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800044c:	2b00      	cmp	r3, #0
 800044e:	d0f9      	beq.n	8000444 <configure_clock+0x4c>

	// Switches system clock to PLL.
	MODIFY_REG(RCC->CFGR,
 8000450:	4b11      	ldr	r3, [pc, #68]	; (8000498 <configure_clock+0xa0>)
 8000452:	689b      	ldr	r3, [r3, #8]
 8000454:	f023 0303 	bic.w	r3, r3, #3
 8000458:	4a0f      	ldr	r2, [pc, #60]	; (8000498 <configure_clock+0xa0>)
 800045a:	f043 0302 	orr.w	r3, r3, #2
 800045e:	6093      	str	r3, [r2, #8]
		RCC_CFGR_SW,
		_VAL2FLD(RCC_CFGR_SW, RCC_CFGR_SW_PLL)
	);

	// Configures PPRE1 = 2, (PPRE2 = 1, HPRE = 1 by default).
	MODIFY_REG(RCC->CFGR,
 8000460:	4b0d      	ldr	r3, [pc, #52]	; (8000498 <configure_clock+0xa0>)
 8000462:	689b      	ldr	r3, [r3, #8]
 8000464:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000468:	4a0b      	ldr	r2, [pc, #44]	; (8000498 <configure_clock+0xa0>)
 800046a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800046e:	6093      	str	r3, [r2, #8]
		RCC_CFGR_PPRE1,
		_VAL2FLD(RCC_CFGR_PPRE1, 4)
	);

	// Waits until PLL is used.
	while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000470:	bf00      	nop
 8000472:	4b09      	ldr	r3, [pc, #36]	; (8000498 <configure_clock+0xa0>)
 8000474:	689b      	ldr	r3, [r3, #8]
 8000476:	f003 030c 	and.w	r3, r3, #12
 800047a:	2b08      	cmp	r3, #8
 800047c:	d1f9      	bne.n	8000472 <configure_clock+0x7a>

	// Disables HSI.
	CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800047e:	4b06      	ldr	r3, [pc, #24]	; (8000498 <configure_clock+0xa0>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a05      	ldr	r2, [pc, #20]	; (8000498 <configure_clock+0xa0>)
 8000484:	f023 0301 	bic.w	r3, r3, #1
 8000488:	6013      	str	r3, [r2, #0]
}
 800048a:	bf00      	nop
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr
 8000494:	40023c00 	.word	0x40023c00
 8000498:	40023800 	.word	0x40023800
 800049c:	f0bc8000 	.word	0xf0bc8000
 80004a0:	03401204 	.word	0x03401204

080004a4 <SystemInit>:
		_VAL2FLD(GPIO_MODER_MODER8, 2)
	);
}

void SystemInit(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
//	configure_mco1();
	configure_clock();
 80004a8:	f7ff ffa6 	bl	80003f8 <configure_clock>
}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <IN_ENDPOINT>:

/** \brief Returns the structure contains the registers of a specific IN endpoint.
 * \param endpoint_number The number of the IN endpoint we want to access its registers.
 */
inline static USB_OTG_INEndpointTypeDef * IN_ENDPOINT(uint8_t endpoint_number)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
    return (USB_OTG_INEndpointTypeDef *)(USB_OTG_FS_PERIPH_BASE + USB_OTG_IN_ENDPOINT_BASE + (endpoint_number * 0x20));
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	015b      	lsls	r3, r3, #5
 80004be:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
 80004c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr

080004d2 <OUT_ENDPOINT>:

/** \brief Returns the structure contains the registers of a specific OUT endpoint.
 * \param endpoint_number The number of the OUT endpoint we want to access its registers.
 */
inline static USB_OTG_OUTEndpointTypeDef * OUT_ENDPOINT(uint8_t endpoint_number)
{
 80004d2:	b480      	push	{r7}
 80004d4:	b083      	sub	sp, #12
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	4603      	mov	r3, r0
 80004da:	71fb      	strb	r3, [r7, #7]
    return (USB_OTG_OUTEndpointTypeDef *)(USB_OTG_FS_PERIPH_BASE + USB_OTG_OUT_ENDPOINT_BASE + (endpoint_number * 0x20));
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	015b      	lsls	r3, r3, #5
 80004e0:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
 80004e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr

080004f4 <FIFO>:

inline static __IO uint32_t *FIFO(uint8_t endpoint_number)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
    return (__IO uint32_t *)(USB_OTG_FS_PERIPH_BASE + USB_OTG_FIFO_BASE + (endpoint_number * 0x1000));
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	031b      	lsls	r3, r3, #12
 8000502:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
 8000506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
}
 800050a:	4618      	mov	r0, r3
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
	...

08000518 <initialize_gpio_pins>:
#include "logger.h"
#include "usb_driver.h"
#include "usb_standards.h"

static void initialize_gpio_pins()
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
	// Enables the clock for GPIOA.
	SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOAEN);
 800051c:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <initialize_gpio_pins+0x3c>)
 800051e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000520:	4a0c      	ldr	r2, [pc, #48]	; (8000554 <initialize_gpio_pins+0x3c>)
 8000522:	f043 0301 	orr.w	r3, r3, #1
 8000526:	6313      	str	r3, [r2, #48]	; 0x30

	// Sets alternate function 10 for: PA11 (-), and PA12 (+).
	MODIFY_REG(GPIOA->AFR[1],
 8000528:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <initialize_gpio_pins+0x40>)
 800052a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800052c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8000530:	4a09      	ldr	r2, [pc, #36]	; (8000558 <initialize_gpio_pins+0x40>)
 8000532:	f443 232a 	orr.w	r3, r3, #696320	; 0xaa000
 8000536:	6253      	str	r3, [r2, #36]	; 0x24
		GPIO_AFRH_AFSEL11 | GPIO_AFRH_AFSEL12,
		_VAL2FLD(GPIO_AFRH_AFSEL11, 0xA) | _VAL2FLD(GPIO_AFRH_AFSEL12, 0xA)
	);

	// Configures USB pins (in GPIOA) to work in alternate function mode.
	MODIFY_REG(GPIOA->MODER,
 8000538:	4b07      	ldr	r3, [pc, #28]	; (8000558 <initialize_gpio_pins+0x40>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f023 7370 	bic.w	r3, r3, #62914560	; 0x3c00000
 8000540:	4a05      	ldr	r2, [pc, #20]	; (8000558 <initialize_gpio_pins+0x40>)
 8000542:	f043 7320 	orr.w	r3, r3, #41943040	; 0x2800000
 8000546:	6013      	str	r3, [r2, #0]
		GPIO_MODER_MODER11 | GPIO_MODER_MODER12,
		_VAL2FLD(GPIO_MODER_MODER11, 2) | _VAL2FLD(GPIO_MODER_MODER12, 2)
	);
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	40023800 	.word	0x40023800
 8000558:	40020000 	.word	0x40020000

0800055c <initialize_core>:

static void initialize_core()
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
	// Enables the clock for USB core FullSpeed
	SET_BIT(RCC->AHB2ENR, RCC_AHB2ENR_OTGFSEN);
 8000560:	4b1d      	ldr	r3, [pc, #116]	; (80005d8 <initialize_core+0x7c>)
 8000562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000564:	4a1c      	ldr	r2, [pc, #112]	; (80005d8 <initialize_core+0x7c>)
 8000566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800056a:	6353      	str	r3, [r2, #52]	; 0x34

	// Configures the USB core to run in device mode, and to use the embedded full-speed PHY.
	MODIFY_REG(USB_OTG_FS->GUSBCFG,
 800056c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000570:	68db      	ldr	r3, [r3, #12]
 8000572:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000576:	f423 5371 	bic.w	r3, r3, #15424	; 0x3c40
 800057a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800057e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000582:	f443 5311 	orr.w	r3, r3, #9280	; 0x2440
 8000586:	60d3      	str	r3, [r2, #12]
		USB_OTG_GUSBCFG_FDMOD | USB_OTG_GUSBCFG_PHYSEL | USB_OTG_GUSBCFG_TRDT,
		USB_OTG_GUSBCFG_FDMOD | USB_OTG_GUSBCFG_PHYSEL | _VAL2FLD(USB_OTG_GUSBCFG_TRDT, 0x09)
	);

	// Configures the device to run in full speed mode.
	MODIFY_REG(USB_OTG_FS_DEVICE->DCFG,
 8000588:	4b14      	ldr	r3, [pc, #80]	; (80005dc <initialize_core+0x80>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a13      	ldr	r2, [pc, #76]	; (80005dc <initialize_core+0x80>)
 800058e:	f043 0303 	orr.w	r3, r3, #3
 8000592:	6013      	str	r3, [r2, #0]
		USB_OTG_DCFG_DSPD,
		_VAL2FLD(USB_OTG_DCFG_DSPD, 0x03)
	);

	// Enables VBUS sensing device.
	SET_BIT(USB_OTG_FS->GCCFG, USB_OTG_GCCFG_VBUSBSEN);
 8000594:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800059a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800059e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005a2:	6393      	str	r3, [r2, #56]	; 0x38

	// Unmasks the main USB core interrupts.
	SET_BIT(USB_OTG_FS->GINTMSK,
 80005a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80005a8:	699a      	ldr	r2, [r3, #24]
 80005aa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <initialize_core+0x84>)
 80005b0:	4313      	orrs	r3, r2
 80005b2:	618b      	str	r3, [r1, #24]
		USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_WUIM | USB_OTG_GINTMSK_IEPINT |
		USB_OTG_GINTSTS_OEPINT | USB_OTG_GINTMSK_RXFLVLM
	);

	// Clears all pending core interrupts.
	WRITE_REG(USB_OTG_FS->GINTSTS, 0xFFFFFFFF);
 80005b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80005b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005bc:	615a      	str	r2, [r3, #20]

	// Unmasks USB global interrupt.
	SET_BIT(USB_OTG_FS->GAHBCFG, USB_OTG_GAHBCFG_GINT);
 80005be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6093      	str	r3, [r2, #8]

}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	40023800 	.word	0x40023800
 80005dc:	50000800 	.word	0x50000800
 80005e0:	800c3818 	.word	0x800c3818

080005e4 <connect>:

/** \brief Connects the USB device to the bus.
 */
static void connect()
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
	// Powers the transceivers on.
    SET_BIT(USB_OTG_FS->GCCFG, USB_OTG_GCCFG_PWRDWN);
 80005e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80005ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80005f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005f6:	6393      	str	r3, [r2, #56]	; 0x38

	// Connects the device to the bus.
    CLEAR_BIT(USB_OTG_FS_DEVICE->DCTL, USB_OTG_DCTL_SDIS);
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <connect+0x2c>)
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	4a04      	ldr	r2, [pc, #16]	; (8000610 <connect+0x2c>)
 80005fe:	f023 0302 	bic.w	r3, r3, #2
 8000602:	6053      	str	r3, [r2, #4]
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	50000800 	.word	0x50000800

08000614 <disconnect>:

/** \brief Disconnects the USB device from the bus.
 */
static void disconnect()
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
	// Disconnects the device from the bus.
	SET_BIT(USB_OTG_FS_DEVICE->DCTL, USB_OTG_DCTL_SDIS);
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <disconnect+0x44>)
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	4a0e      	ldr	r2, [pc, #56]	; (8000658 <disconnect+0x44>)
 800061e:	f043 0302 	orr.w	r3, r3, #2
 8000622:	6053      	str	r3, [r2, #4]

	// Powers the transceivers off.
	CLEAR_BIT(USB_OTG_FS->GCCFG, USB_OTG_GCCFG_PWRDWN);
 8000624:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800062a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800062e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000632:	6393      	str	r3, [r2, #56]	; 0x38

	// Unmasks transfer completed interrupts for all endpoints.
	SET_BIT(USB_OTG_FS_DEVICE->DOEPMSK, USB_OTG_DOEPMSK_XFRCM);
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <disconnect+0x44>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	4a07      	ldr	r2, [pc, #28]	; (8000658 <disconnect+0x44>)
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	6153      	str	r3, [r2, #20]
	SET_BIT(USB_OTG_FS_DEVICE->DIEPMSK, USB_OTG_DIEPMSK_XFRCM);
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <disconnect+0x44>)
 8000642:	691b      	ldr	r3, [r3, #16]
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <disconnect+0x44>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	6113      	str	r3, [r2, #16]
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	50000800 	.word	0x50000800

0800065c <read_packet>:
/** \brief Pops data from the RxFIFO and stores it in the buffer.
 * \param buffer Pointer to the buffer, in which the popped data will be stored.
 * \param size Count of bytes to be popped from the dedicated RxFIFO memory.
 */
static void read_packet(void *buffer, uint16_t size)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	460b      	mov	r3, r1
 8000666:	807b      	strh	r3, [r7, #2]
	// Note: There is only one RxFIFO.
	uint32_t *fifo = FIFO(0);
 8000668:	2000      	movs	r0, #0
 800066a:	f7ff ff43 	bl	80004f4 <FIFO>
 800066e:	6138      	str	r0, [r7, #16]

	for (; size >= 4; size -=4, buffer += 4)
 8000670:	e00b      	b.n	800068a <read_packet+0x2e>
	{
		// Pops one 32-bit word of data (until there is less than one word remaining).
		uint32_t data = *fifo;
 8000672:	693b      	ldr	r3, [r7, #16]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	60fb      	str	r3, [r7, #12]
		// Stores the data in the buffer.
		*((uint32_t*)buffer) = data;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	68fa      	ldr	r2, [r7, #12]
 800067c:	601a      	str	r2, [r3, #0]
	for (; size >= 4; size -=4, buffer += 4)
 800067e:	887b      	ldrh	r3, [r7, #2]
 8000680:	3b04      	subs	r3, #4
 8000682:	807b      	strh	r3, [r7, #2]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	3304      	adds	r3, #4
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	887b      	ldrh	r3, [r7, #2]
 800068c:	2b03      	cmp	r3, #3
 800068e:	d8f0      	bhi.n	8000672 <read_packet+0x16>
	}

	if (size > 0)
 8000690:	887b      	ldrh	r3, [r7, #2]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d013      	beq.n	80006be <read_packet+0x62>
	{
		// Pops the last remaining bytes (which are less than one word).
		uint32_t data = *fifo;
 8000696:	693b      	ldr	r3, [r7, #16]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	617b      	str	r3, [r7, #20]

		for(; size > 0; size--, buffer++, data >>= 8)
 800069c:	e00c      	b.n	80006b8 <read_packet+0x5c>
		{
			// Stores the data in the buffer with the correct alignment.
			*((uint8_t*)buffer) = 0xFF & data;
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	b2da      	uxtb	r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	701a      	strb	r2, [r3, #0]
		for(; size > 0; size--, buffer++, data >>= 8)
 80006a6:	887b      	ldrh	r3, [r7, #2]
 80006a8:	3b01      	subs	r3, #1
 80006aa:	807b      	strh	r3, [r7, #2]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	3301      	adds	r3, #1
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	0a1b      	lsrs	r3, r3, #8
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	887b      	ldrh	r3, [r7, #2]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d1ef      	bne.n	800069e <read_packet+0x42>
		}
	}
}
 80006be:	bf00      	nop
 80006c0:	3718      	adds	r7, #24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <write_packet>:
 * \param endpoint_number The number of the endpoint, to which the data will be written.
 * \param buffer Pointer to the buffer contains the data to be written to the endpoint.
 * \param size The size of data to be written in bytes.
 */
static void write_packet(uint8_t endpoint_number, void const *buffer, uint16_t size)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b084      	sub	sp, #16
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	4603      	mov	r3, r0
 80006ce:	6039      	str	r1, [r7, #0]
 80006d0:	71fb      	strb	r3, [r7, #7]
 80006d2:	4613      	mov	r3, r2
 80006d4:	80bb      	strh	r3, [r7, #4]
	uint32_t *fifo = FIFO(endpoint_number);
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff0b 	bl	80004f4 <FIFO>
 80006de:	60f8      	str	r0, [r7, #12]
	USB_OTG_INEndpointTypeDef *in_endpoint = IN_ENDPOINT(endpoint_number);
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff fee4 	bl	80004b0 <IN_ENDPOINT>
 80006e8:	60b8      	str	r0, [r7, #8]

	// Configures the transmission (1 packet that has `size` bytes).
	MODIFY_REG(in_endpoint->DIEPTSIZ,
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	691b      	ldr	r3, [r3, #16]
 80006ee:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80006f2:	88bb      	ldrh	r3, [r7, #4]
 80006f4:	4313      	orrs	r3, r2
 80006f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	611a      	str	r2, [r3, #16]
		USB_OTG_DIEPTSIZ_PKTCNT | USB_OTG_DIEPTSIZ_XFRSIZ,
		_VAL2FLD(USB_OTG_DIEPTSIZ_PKTCNT, 1) | _VAL2FLD(USB_OTG_DIEPTSIZ_XFRSIZ, size)
	);

	// Enables the transmission after clearing both STALL and NAK of the endpoint.
	MODIFY_REG(in_endpoint->DIEPCTL,
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f023 4304 	bic.w	r3, r3, #2214592512	; 0x84000000
 8000706:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800070a:	f043 4204 	orr.w	r2, r3, #2214592512	; 0x84000000
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	601a      	str	r2, [r3, #0]
		USB_OTG_DIEPCTL_STALL,
		USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA
	);

	// Gets the size in term of 32-bit words (to avoid integer overflow in the loop).
	size = (size + 3) / 4;
 8000712:	88bb      	ldrh	r3, [r7, #4]
 8000714:	3303      	adds	r3, #3
 8000716:	2b00      	cmp	r3, #0
 8000718:	da00      	bge.n	800071c <write_packet+0x56>
 800071a:	3303      	adds	r3, #3
 800071c:	109b      	asrs	r3, r3, #2
 800071e:	80bb      	strh	r3, [r7, #4]

	for (; size > 0; size--, buffer += 4)
 8000720:	e009      	b.n	8000736 <write_packet+0x70>
	{
		// Pushes the data to the TxFIFO.
		*fifo = *((uint32_t *)buffer);
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	601a      	str	r2, [r3, #0]
	for (; size > 0; size--, buffer += 4)
 800072a:	88bb      	ldrh	r3, [r7, #4]
 800072c:	3b01      	subs	r3, #1
 800072e:	80bb      	strh	r3, [r7, #4]
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	3304      	adds	r3, #4
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	88bb      	ldrh	r3, [r7, #4]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d1f2      	bne.n	8000722 <write_packet+0x5c>
	}
}
 800073c:	bf00      	nop
 800073e:	bf00      	nop
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <refresh_fifo_start_addresses>:


/** \brief Updates the start addresses of all FIFOs according to the size of each FIFO.
 */
static void refresh_fifo_start_addresses()
{
 8000746:	b480      	push	{r7}
 8000748:	b083      	sub	sp, #12
 800074a:	af00      	add	r7, sp, #0
	// The first changeable start address begins after the region of RxFIFO.
	uint16_t start_address = _FLD2VAL(USB_OTG_GRXFSIZ_RXFD, USB_OTG_FS->GRXFSIZ) * 4;
 800074c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	b29b      	uxth	r3, r3
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	80fb      	strh	r3, [r7, #6]

	// Updates the start address of the TxFIFO0.
	MODIFY_REG(USB_OTG_FS->DIEPTXF0_HNPTXFSIZ,
 8000758:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800075c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800075e:	0c1b      	lsrs	r3, r3, #16
 8000760:	041b      	lsls	r3, r3, #16
 8000762:	88fa      	ldrh	r2, [r7, #6]
 8000764:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000768:	4313      	orrs	r3, r2
 800076a:	628b      	str	r3, [r1, #40]	; 0x28
		USB_OTG_TX0FSA,
		_VAL2FLD(USB_OTG_TX0FSA, start_address)
	);

	// The next start address is after where the last TxFIFO ends.
	start_address += _FLD2VAL(USB_OTG_TX0FD, USB_OTG_FS->DIEPTXF0_HNPTXFSIZ) * 4;
 800076c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000772:	0c1b      	lsrs	r3, r3, #16
 8000774:	b29b      	uxth	r3, r3
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	b29a      	uxth	r2, r3
 800077a:	88fb      	ldrh	r3, [r7, #6]
 800077c:	4413      	add	r3, r2
 800077e:	80fb      	strh	r3, [r7, #6]

	// Updates the start addresses of the rest TxFIFOs.
	for (uint8_t txfifo_number = 0; txfifo_number < ENDPOINT_COUNT - 1; txfifo_number++)
 8000780:	2300      	movs	r3, #0
 8000782:	717b      	strb	r3, [r7, #5]
 8000784:	e023      	b.n	80007ce <refresh_fifo_start_addresses+0x88>
	{
		MODIFY_REG(USB_OTG_FS->DIEPTXF[txfifo_number],
 8000786:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800078a:	797b      	ldrb	r3, [r7, #5]
 800078c:	3340      	adds	r3, #64	; 0x40
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	4413      	add	r3, r2
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	0c1b      	lsrs	r3, r3, #16
 8000796:	041b      	lsls	r3, r3, #16
 8000798:	88fa      	ldrh	r2, [r7, #6]
 800079a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800079e:	7979      	ldrb	r1, [r7, #5]
 80007a0:	431a      	orrs	r2, r3
 80007a2:	f101 0340 	add.w	r3, r1, #64	; 0x40
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	4403      	add	r3, r0
 80007aa:	605a      	str	r2, [r3, #4]
			USB_OTG_NPTXFSA,
			_VAL2FLD(USB_OTG_NPTXFSA, start_address)
		);

		start_address += _FLD2VAL(USB_OTG_NPTXFD, USB_OTG_FS->DIEPTXF[txfifo_number]) * 4;
 80007ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007b0:	797b      	ldrb	r3, [r7, #5]
 80007b2:	3340      	adds	r3, #64	; 0x40
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	4413      	add	r3, r2
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	0c1b      	lsrs	r3, r3, #16
 80007bc:	b29b      	uxth	r3, r3
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	88fb      	ldrh	r3, [r7, #6]
 80007c4:	4413      	add	r3, r2
 80007c6:	80fb      	strh	r3, [r7, #6]
	for (uint8_t txfifo_number = 0; txfifo_number < ENDPOINT_COUNT - 1; txfifo_number++)
 80007c8:	797b      	ldrb	r3, [r7, #5]
 80007ca:	3301      	adds	r3, #1
 80007cc:	717b      	strb	r3, [r7, #5]
 80007ce:	797b      	ldrb	r3, [r7, #5]
 80007d0:	2b04      	cmp	r3, #4
 80007d2:	d9d8      	bls.n	8000786 <refresh_fifo_start_addresses+0x40>
	}
}
 80007d4:	bf00      	nop
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <configure_rxfifo_size>:
/** \brief Configures the RxFIFO of all OUT endpoints.
 * \param size The size of the largest OUT endpoint in bytes.
 * \note The RxFIFO is shared between all OUT endpoints.
 */
static void configure_rxfifo_size(uint16_t size)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	80fb      	strh	r3, [r7, #6]
	// Considers the space required to save status packets in RxFIFO and gets the size in term of 32-bit words.
	size = 10 + (2 * ((size / 4) + 1));
 80007ec:	88fb      	ldrh	r3, [r7, #6]
 80007ee:	089b      	lsrs	r3, r3, #2
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	3306      	adds	r3, #6
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	80fb      	strh	r3, [r7, #6]

	// Configures the depth of the FIFO.
	MODIFY_REG(USB_OTG_FS->GRXFSIZ,
 80007fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80007fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000800:	0c1b      	lsrs	r3, r3, #16
 8000802:	041b      	lsls	r3, r3, #16
 8000804:	88fa      	ldrh	r2, [r7, #6]
 8000806:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800080a:	4313      	orrs	r3, r2
 800080c:	624b      	str	r3, [r1, #36]	; 0x24
		USB_OTG_GRXFSIZ_RXFD,
		_VAL2FLD(USB_OTG_GRXFSIZ_RXFD, size)
	);

	refresh_fifo_start_addresses();
 800080e:	f7ff ff9a 	bl	8000746 <refresh_fifo_start_addresses>
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <configure_txfifo_size>:
 * \param endpoint_number The number of the IN endpoint we want to configure its TxFIFO
 * \param size The size of the IN endpoint in bytes.
 * \note Any change on any FIFO will update the the registers of all TxFIFOs to adapt the start offsets in the FIFO dedicated memory.
 */
static void configure_txfifo_size(uint8_t endpoint_number, uint16_t size)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	4603      	mov	r3, r0
 8000822:	460a      	mov	r2, r1
 8000824:	71fb      	strb	r3, [r7, #7]
 8000826:	4613      	mov	r3, r2
 8000828:	80bb      	strh	r3, [r7, #4]
	// Gets the FIFO size in term of 32-bit words.
	size = (size + 3) / 4;
 800082a:	88bb      	ldrh	r3, [r7, #4]
 800082c:	3303      	adds	r3, #3
 800082e:	2b00      	cmp	r3, #0
 8000830:	da00      	bge.n	8000834 <configure_txfifo_size+0x1a>
 8000832:	3303      	adds	r3, #3
 8000834:	109b      	asrs	r3, r3, #2
 8000836:	80bb      	strh	r3, [r7, #4]

	// Configures the depth of the TxFIFO.
	if (endpoint_number == 0)
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d10a      	bne.n	8000854 <configure_txfifo_size+0x3a>
	{
		MODIFY_REG(USB_OTG_FS->DIEPTXF0_HNPTXFSIZ,
 800083e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000844:	b29a      	uxth	r2, r3
 8000846:	88bb      	ldrh	r3, [r7, #4]
 8000848:	041b      	lsls	r3, r3, #16
 800084a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800084e:	4313      	orrs	r3, r2
 8000850:	628b      	str	r3, [r1, #40]	; 0x28
 8000852:	e013      	b.n	800087c <configure_txfifo_size+0x62>
			_VAL2FLD(USB_OTG_TX0FD, size)
		);
	}
	else
	{
		MODIFY_REG(USB_OTG_FS->DIEPTXF[endpoint_number - 1],
 8000854:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	3b01      	subs	r3, #1
 800085c:	3340      	adds	r3, #64	; 0x40
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	4413      	add	r3, r2
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	b299      	uxth	r1, r3
 8000866:	88bb      	ldrh	r3, [r7, #4]
 8000868:	041a      	lsls	r2, r3, #16
 800086a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	3b01      	subs	r3, #1
 8000872:	430a      	orrs	r2, r1
 8000874:	3340      	adds	r3, #64	; 0x40
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	4403      	add	r3, r0
 800087a:	605a      	str	r2, [r3, #4]
			USB_OTG_NPTXFD,
			_VAL2FLD(USB_OTG_NPTXFD, size)
		);
	}

	refresh_fifo_start_addresses();
 800087c:	f7ff ff63 	bl	8000746 <refresh_fifo_start_addresses>
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <flush_rxfifo>:

/** \brief Flushes the RxFIFO of all OUT endpoints.
 */
static void flush_rxfifo()
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
	SET_BIT(USB_OTG_FS->GRSTCTL, USB_OTG_GRSTCTL_RXFFLSH);
 800088c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000890:	691b      	ldr	r3, [r3, #16]
 8000892:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000896:	f043 0310 	orr.w	r3, r3, #16
 800089a:	6113      	str	r3, [r2, #16]
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <flush_txfifo>:

/** \brief Flushes the TxFIFO of an IN endpoint.
 * \param endpoint_number The number of an IN endpoint to flush its TxFIFO.
 */
static void flush_txfifo(uint8_t endpoint_number)
{
 80008a6:	b480      	push	{r7}
 80008a8:	b083      	sub	sp, #12
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	4603      	mov	r3, r0
 80008ae:	71fb      	strb	r3, [r7, #7]
	// Sets the number of the TxFIFO to be flushed and then triggers the flush.
	MODIFY_REG(USB_OTG_FS->GRSTCTL,
 80008b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80008b4:	691b      	ldr	r3, [r3, #16]
 80008b6:	f423 62f8 	bic.w	r2, r3, #1984	; 0x7c0
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	019b      	lsls	r3, r3, #6
 80008be:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80008c2:	4313      	orrs	r3, r2
 80008c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008c8:	f043 0320 	orr.w	r3, r3, #32
 80008cc:	6113      	str	r3, [r2, #16]
		USB_OTG_GRSTCTL_TXFNUM,
		_VAL2FLD(USB_OTG_GRSTCTL_TXFNUM, endpoint_number) | USB_OTG_GRSTCTL_TXFFLSH
	);
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
	...

080008dc <configure_endpoint0>:

static void configure_endpoint0(uint8_t endpoint_size)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
	// Unmasks all interrupts of IN and OUT endpoint0.
	SET_BIT(USB_OTG_FS_DEVICE->DAINTMSK, 1 << 0 | 1 << 16);
 80008e6:	4b18      	ldr	r3, [pc, #96]	; (8000948 <configure_endpoint0+0x6c>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	4a17      	ldr	r2, [pc, #92]	; (8000948 <configure_endpoint0+0x6c>)
 80008ec:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80008f0:	61d3      	str	r3, [r2, #28]

	// Configures the maximum packet size, activates the endpoint, and NAK the endpoint (cannot send data yet).
	MODIFY_REG(IN_ENDPOINT(0)->DIEPCTL,
 80008f2:	2000      	movs	r0, #0
 80008f4:	f7ff fddc 	bl	80004b0 <IN_ENDPOINT>
 80008f8:	4603      	mov	r3, r0
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000900:	f023 0307 	bic.w	r3, r3, #7
 8000904:	79fa      	ldrb	r2, [r7, #7]
 8000906:	ea43 0402 	orr.w	r4, r3, r2
 800090a:	2000      	movs	r0, #0
 800090c:	f7ff fdd0 	bl	80004b0 <IN_ENDPOINT>
 8000910:	4602      	mov	r2, r0
 8000912:	f044 6300 	orr.w	r3, r4, #134217728	; 0x8000000
 8000916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800091a:	6013      	str	r3, [r2, #0]
		USB_OTG_DIEPCTL_MPSIZ,
		USB_OTG_DIEPCTL_USBAEP | _VAL2FLD(USB_OTG_DIEPCTL_MPSIZ, endpoint_size) | USB_OTG_DIEPCTL_SNAK
	);

	// Clears NAK, and enables endpoint data transmission.
	SET_BIT(OUT_ENDPOINT(0)->DOEPCTL,
 800091c:	2000      	movs	r0, #0
 800091e:	f7ff fdd8 	bl	80004d2 <OUT_ENDPOINT>
 8000922:	4603      	mov	r3, r0
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800092a:	601a      	str	r2, [r3, #0]
		USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK
	);

	// Note: 64 bytes is the maximum packet size for full speed USB devices.
	configure_rxfifo_size(64);
 800092c:	2040      	movs	r0, #64	; 0x40
 800092e:	f7ff ff58 	bl	80007e2 <configure_rxfifo_size>
	configure_txfifo_size(0, endpoint_size);
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	b29b      	uxth	r3, r3
 8000936:	4619      	mov	r1, r3
 8000938:	2000      	movs	r0, #0
 800093a:	f7ff ff6e 	bl	800081a <configure_txfifo_size>
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	bd90      	pop	{r4, r7, pc}
 8000946:	bf00      	nop
 8000948:	50000800 	.word	0x50000800

0800094c <configure_in_endpoint>:

static void configure_in_endpoint(uint8_t endpoint_number, UsbEndpointType endpoint_type, uint16_t endpoint_size)
{
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
 8000956:	460b      	mov	r3, r1
 8000958:	71bb      	strb	r3, [r7, #6]
 800095a:	4613      	mov	r3, r2
 800095c:	80bb      	strh	r3, [r7, #4]
	// Unmasks all interrupts of the targeted IN endpoint.
	SET_BIT(USB_OTG_FS_DEVICE->DAINTMSK, 1 << endpoint_number);
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <configure_in_endpoint+0x7c>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	79fa      	ldrb	r2, [r7, #7]
 8000964:	2101      	movs	r1, #1
 8000966:	fa01 f202 	lsl.w	r2, r1, r2
 800096a:	4611      	mov	r1, r2
 800096c:	4a16      	ldr	r2, [pc, #88]	; (80009c8 <configure_in_endpoint+0x7c>)
 800096e:	430b      	orrs	r3, r1
 8000970:	61d3      	str	r3, [r2, #28]

	// Activates the endpoint, sets endpoint handshake to NAK (not ready to send data), sets DATA0 packet identifier,
	// configures its type, its maximum packet size, and assigns it a TxFIFO.
	MODIFY_REG(IN_ENDPOINT(endpoint_number)->DIEPCTL,
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fd9b 	bl	80004b0 <IN_ENDPOINT>
 800097a:	4603      	mov	r3, r0
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	4b13      	ldr	r3, [pc, #76]	; (80009cc <configure_in_endpoint+0x80>)
 8000980:	4013      	ands	r3, r2
 8000982:	88ba      	ldrh	r2, [r7, #4]
 8000984:	f3c2 010a 	ubfx	r1, r2, #0, #11
 8000988:	79ba      	ldrb	r2, [r7, #6]
 800098a:	0492      	lsls	r2, r2, #18
 800098c:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8000990:	4311      	orrs	r1, r2
 8000992:	79fa      	ldrb	r2, [r7, #7]
 8000994:	0592      	lsls	r2, r2, #22
 8000996:	f002 7270 	and.w	r2, r2, #62914560	; 0x3c00000
 800099a:	430a      	orrs	r2, r1
 800099c:	ea43 0402 	orr.w	r4, r3, r2
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff fd84 	bl	80004b0 <IN_ENDPOINT>
 80009a8:	4602      	mov	r2, r0
 80009aa:	f044 53c0 	orr.w	r3, r4, #402653184	; 0x18000000
 80009ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009b2:	6013      	str	r3, [r2, #0]
		USB_OTG_DIEPCTL_MPSIZ | USB_OTG_DIEPCTL_EPTYP | USB_OTG_DIEPCTL_TXFNUM,
		USB_OTG_DIEPCTL_USBAEP | _VAL2FLD(USB_OTG_DIEPCTL_MPSIZ, endpoint_size) | USB_OTG_DIEPCTL_SNAK |
		_VAL2FLD(USB_OTG_DIEPCTL_EPTYP, endpoint_type) | _VAL2FLD(USB_OTG_DIEPCTL_TXFNUM, endpoint_number) | USB_OTG_DIEPCTL_SD0PID_SEVNFRM
	);

	configure_txfifo_size(endpoint_number, endpoint_size);
 80009b4:	88ba      	ldrh	r2, [r7, #4]
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	4611      	mov	r1, r2
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ff2d 	bl	800081a <configure_txfifo_size>
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd90      	pop	{r4, r7, pc}
 80009c8:	50000800 	.word	0x50000800
 80009cc:	fc33f800 	.word	0xfc33f800

080009d0 <deconfigure_endpoint>:

/** \brief Deconfigures IN and OUT endpoints of a specific endpoint number.
 * \param endpoint_number The number of the IN and OUT endpoints to deconfigure.
 */
static void deconfigure_endpoint(uint8_t endpoint_number)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
	USB_OTG_INEndpointTypeDef *in_endpoint = IN_ENDPOINT(endpoint_number);
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fd67 	bl	80004b0 <IN_ENDPOINT>
 80009e2:	60f8      	str	r0, [r7, #12]
	USB_OTG_OUTEndpointTypeDef *out_endpoint = OUT_ENDPOINT(endpoint_number);
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fd73 	bl	80004d2 <OUT_ENDPOINT>
 80009ec:	60b8      	str	r0, [r7, #8]

	// Masks all interrupts of the targeted IN and OUT endpoints.
	CLEAR_BIT(USB_OTG_FS_DEVICE->DAINTMSK,
 80009ee:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <deconfigure_endpoint+0xb8>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	79fa      	ldrb	r2, [r7, #7]
 80009f4:	2101      	movs	r1, #1
 80009f6:	4091      	lsls	r1, r2
 80009f8:	79fa      	ldrb	r2, [r7, #7]
 80009fa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80009fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000a02:	430a      	orrs	r2, r1
 8000a04:	43d2      	mvns	r2, r2
 8000a06:	4611      	mov	r1, r2
 8000a08:	4a1f      	ldr	r2, [pc, #124]	; (8000a88 <deconfigure_endpoint+0xb8>)
 8000a0a:	400b      	ands	r3, r1
 8000a0c:	61d3      	str	r3, [r2, #28]
		(1 << endpoint_number) | (1 << 16 << endpoint_number)
	);

	// Clears all interrupts of the endpoint.
	SET_BIT(in_endpoint->DIEPINT, 0x29FF);
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	f443 5327 	orr.w	r3, r3, #10688	; 0x29c0
 8000a16:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	6093      	str	r3, [r2, #8]
	SET_BIT(out_endpoint->DOEPINT, 0x71FF);
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	f443 43e3 	orr.w	r3, r3, #29056	; 0x7180
 8000a26:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	6093      	str	r3, [r2, #8]

	// Disables the endpoints if possible.
	if (in_endpoint->DIEPCTL & USB_OTG_DIEPCTL_EPENA)
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	da05      	bge.n	8000a42 <deconfigure_endpoint+0x72>
	{
		// Disables endpoint transmission.
		SET_BIT(in_endpoint->DIEPCTL, USB_OTG_DIEPCTL_EPDIS);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	601a      	str	r2, [r3, #0]
	}

	// Deactivates the endpoint.
	CLEAR_BIT(in_endpoint->DIEPCTL, USB_OTG_DIEPCTL_USBAEP);
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	601a      	str	r2, [r3, #0]

	if (endpoint_number != 0)
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d00f      	beq.n	8000a74 <deconfigure_endpoint+0xa4>
	{
		if (out_endpoint->DOEPCTL & USB_OTG_DOEPCTL_EPENA)
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	da05      	bge.n	8000a68 <deconfigure_endpoint+0x98>
		{
			// Disables endpoint transmission.
			SET_BIT(out_endpoint->DOEPCTL, USB_OTG_DOEPCTL_EPDIS);
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	601a      	str	r2, [r3, #0]
		}

		// Deactivates the endpoint.
		CLEAR_BIT(out_endpoint->DOEPCTL, USB_OTG_DOEPCTL_USBAEP);
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	601a      	str	r2, [r3, #0]
	}

	// Flushes the FIFOs.
	flush_txfifo(endpoint_number);
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff ff15 	bl	80008a6 <flush_txfifo>
	flush_rxfifo();
 8000a7c:	f7ff ff04 	bl	8000888 <flush_rxfifo>
}
 8000a80:	bf00      	nop
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	50000800 	.word	0x50000800

08000a8c <enumdne_handler>:

static void enumdne_handler()
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	log_info("USB device speed enumeration done.");
 8000a90:	4803      	ldr	r0, [pc, #12]	; (8000aa0 <enumdne_handler+0x14>)
 8000a92:	f7ff fc91 	bl	80003b8 <log_info>
	configure_endpoint0(8);
 8000a96:	2008      	movs	r0, #8
 8000a98:	f7ff ff20 	bl	80008dc <configure_endpoint0>
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	08001cf4 	.word	0x08001cf4

08000aa4 <rxflvl_handler>:

static void rxflvl_handler()
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
	 // Pops the status information word from the RxFIFO.
	uint32_t receive_status = USB_OTG_FS_GLOBAL->GRXSTSP;
 8000aaa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000aae:	6a1b      	ldr	r3, [r3, #32]
 8000ab0:	60fb      	str	r3, [r7, #12]

	// The endpoint that received the data.
	uint8_t endpoint_number = _FLD2VAL(USB_OTG_GRXSTSP_EPNUM, receive_status);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	f003 030f 	and.w	r3, r3, #15
 8000aba:	72fb      	strb	r3, [r7, #11]
	// The count of bytes in the received packet.
	uint16_t bcnt = _FLD2VAL(USB_OTG_GRXSTSP_BCNT, receive_status);
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	091b      	lsrs	r3, r3, #4
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ac6:	813b      	strh	r3, [r7, #8]
	// The status of the received packet.
	uint16_t pktsts = _FLD2VAL(USB_OTG_GRXSTSP_PKTSTS, receive_status);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	0c5b      	lsrs	r3, r3, #17
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	f003 030f 	and.w	r3, r3, #15
 8000ad2:	80fb      	strh	r3, [r7, #6]

	switch (pktsts)
 8000ad4:	88fb      	ldrh	r3, [r7, #6]
 8000ad6:	3b02      	subs	r3, #2
 8000ad8:	2b04      	cmp	r3, #4
 8000ada:	d80e      	bhi.n	8000afa <rxflvl_handler+0x56>
 8000adc:	a201      	add	r2, pc, #4	; (adr r2, 8000ae4 <rxflvl_handler+0x40>)
 8000ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae2:	bf00      	nop
 8000ae4:	08000af9 	.word	0x08000af9
 8000ae8:	08000af9 	.word	0x08000af9
 8000aec:	08000af9 	.word	0x08000af9
 8000af0:	08000afb 	.word	0x08000afb
 8000af4:	08000af9 	.word	0x08000af9
	{
	case 0x06: // SETUP packet (includes data).
    case 0x02: // OUT packet (includes data).
    	// ToDo
		break;
 8000af8:	bf00      	nop
    case 0x04: // SETUP stage has completed.
    	break;
    case 0x03: // OUT transfer has completed.
    	break;
	}
}
 8000afa:	bf00      	nop
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <usbrst_handler>:

static void usbrst_handler()
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
	log_info("USB reset signal was detected");
 8000b0e:	480a      	ldr	r0, [pc, #40]	; (8000b38 <usbrst_handler+0x30>)
 8000b10:	f7ff fc52 	bl	80003b8 <log_info>
	for (uint8_t i = 0; i <= ENDPOINT_COUNT; i++)
 8000b14:	2300      	movs	r3, #0
 8000b16:	71fb      	strb	r3, [r7, #7]
 8000b18:	e006      	b.n	8000b28 <usbrst_handler+0x20>
	{
		deconfigure_endpoint(i);
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff57 	bl	80009d0 <deconfigure_endpoint>
	for (uint8_t i = 0; i <= ENDPOINT_COUNT; i++)
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	3301      	adds	r3, #1
 8000b26:	71fb      	strb	r3, [r7, #7]
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	2b06      	cmp	r3, #6
 8000b2c:	d9f5      	bls.n	8000b1a <usbrst_handler+0x12>
	}

}
 8000b2e:	bf00      	nop
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	08001d18 	.word	0x08001d18

08000b3c <gintsts_handler>:

static void gintsts_handler()
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
	volatile uint32_t gintsts = USB_OTG_FS_GLOBAL->GINTSTS;
 8000b42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b46:	695b      	ldr	r3, [r3, #20]
 8000b48:	607b      	str	r3, [r7, #4]

	if (gintsts & USB_OTG_GINTSTS_USBRST)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d00a      	beq.n	8000b6a <gintsts_handler+0x2e>
	{
		usbrst_handler();
 8000b54:	f7ff ffd8 	bl	8000b08 <usbrst_handler>
		// Clears the interrupt.
		SET_BIT(USB_OTG_FS_GLOBAL->GINTSTS, USB_OTG_GINTSTS_USBRST);
 8000b58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b66:	6153      	str	r3, [r2, #20]
	{

	}


}
 8000b68:	e025      	b.n	8000bb6 <gintsts_handler+0x7a>
	else if (gintsts & USB_OTG_GINTSTS_ENUMDNE)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d00a      	beq.n	8000b8a <gintsts_handler+0x4e>
		enumdne_handler();
 8000b74:	f7ff ff8a 	bl	8000a8c <enumdne_handler>
		SET_BIT(USB_OTG_FS_GLOBAL->GINTSTS, USB_OTG_GINTSTS_ENUMDNE);
 8000b78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b86:	6153      	str	r3, [r2, #20]
}
 8000b88:	e015      	b.n	8000bb6 <gintsts_handler+0x7a>
	else if (gintsts & USB_OTG_GINTSTS_RXFLVL)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f003 0310 	and.w	r3, r3, #16
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d00a      	beq.n	8000baa <gintsts_handler+0x6e>
		rxflvl_handler();
 8000b94:	f7ff ff86 	bl	8000aa4 <rxflvl_handler>
		SET_BIT(USB_OTG_FS_GLOBAL->GINTSTS, USB_OTG_GINTSTS_RXFLVL);
 8000b98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ba2:	f043 0310 	orr.w	r3, r3, #16
 8000ba6:	6153      	str	r3, [r2, #20]
}
 8000ba8:	e005      	b.n	8000bb6 <gintsts_handler+0x7a>
	else if (gintsts & USB_OTG_GINTSTS_IEPINT)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d100      	bne.n	8000bb6 <gintsts_handler+0x7a>
	else if (gintsts & USB_OTG_GINTSTS_OEPINT)
 8000bb4:	687b      	ldr	r3, [r7, #4]
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <usbd_initialize>:
 */

#include "usb_framework.h"
#include "usb_driver.h"

void usbd_initialize(){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0

	usb_driver.initialize_gpio_pins();
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <usbd_initialize+0x1c>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	4798      	blx	r3
	usb_driver.initialize_core();
 8000bca:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <usbd_initialize+0x1c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4798      	blx	r3
	usb_driver.connect();
 8000bd0:	4b02      	ldr	r3, [pc, #8]	; (8000bdc <usbd_initialize+0x1c>)
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	4798      	blx	r3


}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	08001d38 	.word	0x08001d38

08000be0 <usbd_poll>:

void usbd_poll()
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	usb_driver.poll();
 8000be4:	4b02      	ldr	r3, [pc, #8]	; (8000bf0 <usbd_poll+0x10>)
 8000be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be8:	4798      	blx	r3
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	08001d38 	.word	0x08001d38

08000bf4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bf4:	480d      	ldr	r0, [pc, #52]	; (8000c2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bf6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bf8:	f7ff fc54 	bl	80004a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bfc:	480c      	ldr	r0, [pc, #48]	; (8000c30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bfe:	490d      	ldr	r1, [pc, #52]	; (8000c34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c00:	4a0d      	ldr	r2, [pc, #52]	; (8000c38 <LoopForever+0xe>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c04:	e002      	b.n	8000c0c <LoopCopyDataInit>

08000c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0a:	3304      	adds	r3, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c10:	d3f9      	bcc.n	8000c06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c12:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c14:	4c0a      	ldr	r4, [pc, #40]	; (8000c40 <LoopForever+0x16>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c18:	e001      	b.n	8000c1e <LoopFillZerobss>

08000c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1c:	3204      	adds	r2, #4

08000c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c20:	d3fb      	bcc.n	8000c1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c22:	f000 f811 	bl	8000c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c26:	f7ff fbdb 	bl	80003e0 <main>

08000c2a <LoopForever>:

LoopForever:
    b LoopForever
 8000c2a:	e7fe      	b.n	8000c2a <LoopForever>
  ldr   r0, =_estack
 8000c2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c34:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c38:	08001e00 	.word	0x08001e00
  ldr r2, =_sbss
 8000c3c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c40:	200000a0 	.word	0x200000a0

08000c44 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <ADC_IRQHandler>
	...

08000c48 <__libc_init_array>:
 8000c48:	b570      	push	{r4, r5, r6, lr}
 8000c4a:	4d0d      	ldr	r5, [pc, #52]	; (8000c80 <__libc_init_array+0x38>)
 8000c4c:	4c0d      	ldr	r4, [pc, #52]	; (8000c84 <__libc_init_array+0x3c>)
 8000c4e:	1b64      	subs	r4, r4, r5
 8000c50:	10a4      	asrs	r4, r4, #2
 8000c52:	2600      	movs	r6, #0
 8000c54:	42a6      	cmp	r6, r4
 8000c56:	d109      	bne.n	8000c6c <__libc_init_array+0x24>
 8000c58:	4d0b      	ldr	r5, [pc, #44]	; (8000c88 <__libc_init_array+0x40>)
 8000c5a:	4c0c      	ldr	r4, [pc, #48]	; (8000c8c <__libc_init_array+0x44>)
 8000c5c:	f001 f814 	bl	8001c88 <_init>
 8000c60:	1b64      	subs	r4, r4, r5
 8000c62:	10a4      	asrs	r4, r4, #2
 8000c64:	2600      	movs	r6, #0
 8000c66:	42a6      	cmp	r6, r4
 8000c68:	d105      	bne.n	8000c76 <__libc_init_array+0x2e>
 8000c6a:	bd70      	pop	{r4, r5, r6, pc}
 8000c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c70:	4798      	blx	r3
 8000c72:	3601      	adds	r6, #1
 8000c74:	e7ee      	b.n	8000c54 <__libc_init_array+0xc>
 8000c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c7a:	4798      	blx	r3
 8000c7c:	3601      	adds	r6, #1
 8000c7e:	e7f2      	b.n	8000c66 <__libc_init_array+0x1e>
 8000c80:	08001df8 	.word	0x08001df8
 8000c84:	08001df8 	.word	0x08001df8
 8000c88:	08001df8 	.word	0x08001df8
 8000c8c:	08001dfc 	.word	0x08001dfc

08000c90 <memset>:
 8000c90:	4402      	add	r2, r0
 8000c92:	4603      	mov	r3, r0
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d100      	bne.n	8000c9a <memset+0xa>
 8000c98:	4770      	bx	lr
 8000c9a:	f803 1b01 	strb.w	r1, [r3], #1
 8000c9e:	e7f9      	b.n	8000c94 <memset+0x4>

08000ca0 <__sfputc_r>:
 8000ca0:	6893      	ldr	r3, [r2, #8]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	b410      	push	{r4}
 8000ca8:	6093      	str	r3, [r2, #8]
 8000caa:	da08      	bge.n	8000cbe <__sfputc_r+0x1e>
 8000cac:	6994      	ldr	r4, [r2, #24]
 8000cae:	42a3      	cmp	r3, r4
 8000cb0:	db01      	blt.n	8000cb6 <__sfputc_r+0x16>
 8000cb2:	290a      	cmp	r1, #10
 8000cb4:	d103      	bne.n	8000cbe <__sfputc_r+0x1e>
 8000cb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cba:	f000 bb17 	b.w	80012ec <__swbuf_r>
 8000cbe:	6813      	ldr	r3, [r2, #0]
 8000cc0:	1c58      	adds	r0, r3, #1
 8000cc2:	6010      	str	r0, [r2, #0]
 8000cc4:	7019      	strb	r1, [r3, #0]
 8000cc6:	4608      	mov	r0, r1
 8000cc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <__sfputs_r>:
 8000cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cd0:	4606      	mov	r6, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	4614      	mov	r4, r2
 8000cd6:	18d5      	adds	r5, r2, r3
 8000cd8:	42ac      	cmp	r4, r5
 8000cda:	d101      	bne.n	8000ce0 <__sfputs_r+0x12>
 8000cdc:	2000      	movs	r0, #0
 8000cde:	e007      	b.n	8000cf0 <__sfputs_r+0x22>
 8000ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ce4:	463a      	mov	r2, r7
 8000ce6:	4630      	mov	r0, r6
 8000ce8:	f7ff ffda 	bl	8000ca0 <__sfputc_r>
 8000cec:	1c43      	adds	r3, r0, #1
 8000cee:	d1f3      	bne.n	8000cd8 <__sfputs_r+0xa>
 8000cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000cf4 <_vfiprintf_r>:
 8000cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cf8:	460d      	mov	r5, r1
 8000cfa:	b09d      	sub	sp, #116	; 0x74
 8000cfc:	4614      	mov	r4, r2
 8000cfe:	4698      	mov	r8, r3
 8000d00:	4606      	mov	r6, r0
 8000d02:	b118      	cbz	r0, 8000d0c <_vfiprintf_r+0x18>
 8000d04:	6983      	ldr	r3, [r0, #24]
 8000d06:	b90b      	cbnz	r3, 8000d0c <_vfiprintf_r+0x18>
 8000d08:	f000 fcca 	bl	80016a0 <__sinit>
 8000d0c:	4b89      	ldr	r3, [pc, #548]	; (8000f34 <_vfiprintf_r+0x240>)
 8000d0e:	429d      	cmp	r5, r3
 8000d10:	d11b      	bne.n	8000d4a <_vfiprintf_r+0x56>
 8000d12:	6875      	ldr	r5, [r6, #4]
 8000d14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d16:	07d9      	lsls	r1, r3, #31
 8000d18:	d405      	bmi.n	8000d26 <_vfiprintf_r+0x32>
 8000d1a:	89ab      	ldrh	r3, [r5, #12]
 8000d1c:	059a      	lsls	r2, r3, #22
 8000d1e:	d402      	bmi.n	8000d26 <_vfiprintf_r+0x32>
 8000d20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d22:	f000 fd5b 	bl	80017dc <__retarget_lock_acquire_recursive>
 8000d26:	89ab      	ldrh	r3, [r5, #12]
 8000d28:	071b      	lsls	r3, r3, #28
 8000d2a:	d501      	bpl.n	8000d30 <_vfiprintf_r+0x3c>
 8000d2c:	692b      	ldr	r3, [r5, #16]
 8000d2e:	b9eb      	cbnz	r3, 8000d6c <_vfiprintf_r+0x78>
 8000d30:	4629      	mov	r1, r5
 8000d32:	4630      	mov	r0, r6
 8000d34:	f000 fb2c 	bl	8001390 <__swsetup_r>
 8000d38:	b1c0      	cbz	r0, 8000d6c <_vfiprintf_r+0x78>
 8000d3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d3c:	07dc      	lsls	r4, r3, #31
 8000d3e:	d50e      	bpl.n	8000d5e <_vfiprintf_r+0x6a>
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d44:	b01d      	add	sp, #116	; 0x74
 8000d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d4a:	4b7b      	ldr	r3, [pc, #492]	; (8000f38 <_vfiprintf_r+0x244>)
 8000d4c:	429d      	cmp	r5, r3
 8000d4e:	d101      	bne.n	8000d54 <_vfiprintf_r+0x60>
 8000d50:	68b5      	ldr	r5, [r6, #8]
 8000d52:	e7df      	b.n	8000d14 <_vfiprintf_r+0x20>
 8000d54:	4b79      	ldr	r3, [pc, #484]	; (8000f3c <_vfiprintf_r+0x248>)
 8000d56:	429d      	cmp	r5, r3
 8000d58:	bf08      	it	eq
 8000d5a:	68f5      	ldreq	r5, [r6, #12]
 8000d5c:	e7da      	b.n	8000d14 <_vfiprintf_r+0x20>
 8000d5e:	89ab      	ldrh	r3, [r5, #12]
 8000d60:	0598      	lsls	r0, r3, #22
 8000d62:	d4ed      	bmi.n	8000d40 <_vfiprintf_r+0x4c>
 8000d64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d66:	f000 fd3a 	bl	80017de <__retarget_lock_release_recursive>
 8000d6a:	e7e9      	b.n	8000d40 <_vfiprintf_r+0x4c>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8000d70:	2320      	movs	r3, #32
 8000d72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000d76:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d7a:	2330      	movs	r3, #48	; 0x30
 8000d7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000f40 <_vfiprintf_r+0x24c>
 8000d80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000d84:	f04f 0901 	mov.w	r9, #1
 8000d88:	4623      	mov	r3, r4
 8000d8a:	469a      	mov	sl, r3
 8000d8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d90:	b10a      	cbz	r2, 8000d96 <_vfiprintf_r+0xa2>
 8000d92:	2a25      	cmp	r2, #37	; 0x25
 8000d94:	d1f9      	bne.n	8000d8a <_vfiprintf_r+0x96>
 8000d96:	ebba 0b04 	subs.w	fp, sl, r4
 8000d9a:	d00b      	beq.n	8000db4 <_vfiprintf_r+0xc0>
 8000d9c:	465b      	mov	r3, fp
 8000d9e:	4622      	mov	r2, r4
 8000da0:	4629      	mov	r1, r5
 8000da2:	4630      	mov	r0, r6
 8000da4:	f7ff ff93 	bl	8000cce <__sfputs_r>
 8000da8:	3001      	adds	r0, #1
 8000daa:	f000 80aa 	beq.w	8000f02 <_vfiprintf_r+0x20e>
 8000dae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000db0:	445a      	add	r2, fp
 8000db2:	9209      	str	r2, [sp, #36]	; 0x24
 8000db4:	f89a 3000 	ldrb.w	r3, [sl]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	f000 80a2 	beq.w	8000f02 <_vfiprintf_r+0x20e>
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000dc8:	f10a 0a01 	add.w	sl, sl, #1
 8000dcc:	9304      	str	r3, [sp, #16]
 8000dce:	9307      	str	r3, [sp, #28]
 8000dd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000dd4:	931a      	str	r3, [sp, #104]	; 0x68
 8000dd6:	4654      	mov	r4, sl
 8000dd8:	2205      	movs	r2, #5
 8000dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dde:	4858      	ldr	r0, [pc, #352]	; (8000f40 <_vfiprintf_r+0x24c>)
 8000de0:	f7ff fa06 	bl	80001f0 <memchr>
 8000de4:	9a04      	ldr	r2, [sp, #16]
 8000de6:	b9d8      	cbnz	r0, 8000e20 <_vfiprintf_r+0x12c>
 8000de8:	06d1      	lsls	r1, r2, #27
 8000dea:	bf44      	itt	mi
 8000dec:	2320      	movmi	r3, #32
 8000dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000df2:	0713      	lsls	r3, r2, #28
 8000df4:	bf44      	itt	mi
 8000df6:	232b      	movmi	r3, #43	; 0x2b
 8000df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8000e00:	2b2a      	cmp	r3, #42	; 0x2a
 8000e02:	d015      	beq.n	8000e30 <_vfiprintf_r+0x13c>
 8000e04:	9a07      	ldr	r2, [sp, #28]
 8000e06:	4654      	mov	r4, sl
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f04f 0c0a 	mov.w	ip, #10
 8000e0e:	4621      	mov	r1, r4
 8000e10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e14:	3b30      	subs	r3, #48	; 0x30
 8000e16:	2b09      	cmp	r3, #9
 8000e18:	d94e      	bls.n	8000eb8 <_vfiprintf_r+0x1c4>
 8000e1a:	b1b0      	cbz	r0, 8000e4a <_vfiprintf_r+0x156>
 8000e1c:	9207      	str	r2, [sp, #28]
 8000e1e:	e014      	b.n	8000e4a <_vfiprintf_r+0x156>
 8000e20:	eba0 0308 	sub.w	r3, r0, r8
 8000e24:	fa09 f303 	lsl.w	r3, r9, r3
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	9304      	str	r3, [sp, #16]
 8000e2c:	46a2      	mov	sl, r4
 8000e2e:	e7d2      	b.n	8000dd6 <_vfiprintf_r+0xe2>
 8000e30:	9b03      	ldr	r3, [sp, #12]
 8000e32:	1d19      	adds	r1, r3, #4
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	9103      	str	r1, [sp, #12]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	bfbb      	ittet	lt
 8000e3c:	425b      	neglt	r3, r3
 8000e3e:	f042 0202 	orrlt.w	r2, r2, #2
 8000e42:	9307      	strge	r3, [sp, #28]
 8000e44:	9307      	strlt	r3, [sp, #28]
 8000e46:	bfb8      	it	lt
 8000e48:	9204      	strlt	r2, [sp, #16]
 8000e4a:	7823      	ldrb	r3, [r4, #0]
 8000e4c:	2b2e      	cmp	r3, #46	; 0x2e
 8000e4e:	d10c      	bne.n	8000e6a <_vfiprintf_r+0x176>
 8000e50:	7863      	ldrb	r3, [r4, #1]
 8000e52:	2b2a      	cmp	r3, #42	; 0x2a
 8000e54:	d135      	bne.n	8000ec2 <_vfiprintf_r+0x1ce>
 8000e56:	9b03      	ldr	r3, [sp, #12]
 8000e58:	1d1a      	adds	r2, r3, #4
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	9203      	str	r2, [sp, #12]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	bfb8      	it	lt
 8000e62:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000e66:	3402      	adds	r4, #2
 8000e68:	9305      	str	r3, [sp, #20]
 8000e6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000f50 <_vfiprintf_r+0x25c>
 8000e6e:	7821      	ldrb	r1, [r4, #0]
 8000e70:	2203      	movs	r2, #3
 8000e72:	4650      	mov	r0, sl
 8000e74:	f7ff f9bc 	bl	80001f0 <memchr>
 8000e78:	b140      	cbz	r0, 8000e8c <_vfiprintf_r+0x198>
 8000e7a:	2340      	movs	r3, #64	; 0x40
 8000e7c:	eba0 000a 	sub.w	r0, r0, sl
 8000e80:	fa03 f000 	lsl.w	r0, r3, r0
 8000e84:	9b04      	ldr	r3, [sp, #16]
 8000e86:	4303      	orrs	r3, r0
 8000e88:	3401      	adds	r4, #1
 8000e8a:	9304      	str	r3, [sp, #16]
 8000e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e90:	482c      	ldr	r0, [pc, #176]	; (8000f44 <_vfiprintf_r+0x250>)
 8000e92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000e96:	2206      	movs	r2, #6
 8000e98:	f7ff f9aa 	bl	80001f0 <memchr>
 8000e9c:	2800      	cmp	r0, #0
 8000e9e:	d03f      	beq.n	8000f20 <_vfiprintf_r+0x22c>
 8000ea0:	4b29      	ldr	r3, [pc, #164]	; (8000f48 <_vfiprintf_r+0x254>)
 8000ea2:	bb1b      	cbnz	r3, 8000eec <_vfiprintf_r+0x1f8>
 8000ea4:	9b03      	ldr	r3, [sp, #12]
 8000ea6:	3307      	adds	r3, #7
 8000ea8:	f023 0307 	bic.w	r3, r3, #7
 8000eac:	3308      	adds	r3, #8
 8000eae:	9303      	str	r3, [sp, #12]
 8000eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000eb2:	443b      	add	r3, r7
 8000eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8000eb6:	e767      	b.n	8000d88 <_vfiprintf_r+0x94>
 8000eb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8000ebc:	460c      	mov	r4, r1
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	e7a5      	b.n	8000e0e <_vfiprintf_r+0x11a>
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	3401      	adds	r4, #1
 8000ec6:	9305      	str	r3, [sp, #20]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f04f 0c0a 	mov.w	ip, #10
 8000ece:	4620      	mov	r0, r4
 8000ed0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ed4:	3a30      	subs	r2, #48	; 0x30
 8000ed6:	2a09      	cmp	r2, #9
 8000ed8:	d903      	bls.n	8000ee2 <_vfiprintf_r+0x1ee>
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d0c5      	beq.n	8000e6a <_vfiprintf_r+0x176>
 8000ede:	9105      	str	r1, [sp, #20]
 8000ee0:	e7c3      	b.n	8000e6a <_vfiprintf_r+0x176>
 8000ee2:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e7f0      	b.n	8000ece <_vfiprintf_r+0x1da>
 8000eec:	ab03      	add	r3, sp, #12
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	462a      	mov	r2, r5
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <_vfiprintf_r+0x258>)
 8000ef4:	a904      	add	r1, sp, #16
 8000ef6:	4630      	mov	r0, r6
 8000ef8:	f3af 8000 	nop.w
 8000efc:	4607      	mov	r7, r0
 8000efe:	1c78      	adds	r0, r7, #1
 8000f00:	d1d6      	bne.n	8000eb0 <_vfiprintf_r+0x1bc>
 8000f02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f04:	07d9      	lsls	r1, r3, #31
 8000f06:	d405      	bmi.n	8000f14 <_vfiprintf_r+0x220>
 8000f08:	89ab      	ldrh	r3, [r5, #12]
 8000f0a:	059a      	lsls	r2, r3, #22
 8000f0c:	d402      	bmi.n	8000f14 <_vfiprintf_r+0x220>
 8000f0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f10:	f000 fc65 	bl	80017de <__retarget_lock_release_recursive>
 8000f14:	89ab      	ldrh	r3, [r5, #12]
 8000f16:	065b      	lsls	r3, r3, #25
 8000f18:	f53f af12 	bmi.w	8000d40 <_vfiprintf_r+0x4c>
 8000f1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f1e:	e711      	b.n	8000d44 <_vfiprintf_r+0x50>
 8000f20:	ab03      	add	r3, sp, #12
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	462a      	mov	r2, r5
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <_vfiprintf_r+0x258>)
 8000f28:	a904      	add	r1, sp, #16
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	f000 f88a 	bl	8001044 <_printf_i>
 8000f30:	e7e4      	b.n	8000efc <_vfiprintf_r+0x208>
 8000f32:	bf00      	nop
 8000f34:	08001db8 	.word	0x08001db8
 8000f38:	08001dd8 	.word	0x08001dd8
 8000f3c:	08001d98 	.word	0x08001d98
 8000f40:	08001d64 	.word	0x08001d64
 8000f44:	08001d6e 	.word	0x08001d6e
 8000f48:	00000000 	.word	0x00000000
 8000f4c:	08000ccf 	.word	0x08000ccf
 8000f50:	08001d6a 	.word	0x08001d6a

08000f54 <vfiprintf>:
 8000f54:	4613      	mov	r3, r2
 8000f56:	460a      	mov	r2, r1
 8000f58:	4601      	mov	r1, r0
 8000f5a:	4802      	ldr	r0, [pc, #8]	; (8000f64 <vfiprintf+0x10>)
 8000f5c:	6800      	ldr	r0, [r0, #0]
 8000f5e:	f7ff bec9 	b.w	8000cf4 <_vfiprintf_r>
 8000f62:	bf00      	nop
 8000f64:	20000004 	.word	0x20000004

08000f68 <_printf_common>:
 8000f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f6c:	4616      	mov	r6, r2
 8000f6e:	4699      	mov	r9, r3
 8000f70:	688a      	ldr	r2, [r1, #8]
 8000f72:	690b      	ldr	r3, [r1, #16]
 8000f74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	bfb8      	it	lt
 8000f7c:	4613      	movlt	r3, r2
 8000f7e:	6033      	str	r3, [r6, #0]
 8000f80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000f84:	4607      	mov	r7, r0
 8000f86:	460c      	mov	r4, r1
 8000f88:	b10a      	cbz	r2, 8000f8e <_printf_common+0x26>
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	6033      	str	r3, [r6, #0]
 8000f8e:	6823      	ldr	r3, [r4, #0]
 8000f90:	0699      	lsls	r1, r3, #26
 8000f92:	bf42      	ittt	mi
 8000f94:	6833      	ldrmi	r3, [r6, #0]
 8000f96:	3302      	addmi	r3, #2
 8000f98:	6033      	strmi	r3, [r6, #0]
 8000f9a:	6825      	ldr	r5, [r4, #0]
 8000f9c:	f015 0506 	ands.w	r5, r5, #6
 8000fa0:	d106      	bne.n	8000fb0 <_printf_common+0x48>
 8000fa2:	f104 0a19 	add.w	sl, r4, #25
 8000fa6:	68e3      	ldr	r3, [r4, #12]
 8000fa8:	6832      	ldr	r2, [r6, #0]
 8000faa:	1a9b      	subs	r3, r3, r2
 8000fac:	42ab      	cmp	r3, r5
 8000fae:	dc26      	bgt.n	8000ffe <_printf_common+0x96>
 8000fb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000fb4:	1e13      	subs	r3, r2, #0
 8000fb6:	6822      	ldr	r2, [r4, #0]
 8000fb8:	bf18      	it	ne
 8000fba:	2301      	movne	r3, #1
 8000fbc:	0692      	lsls	r2, r2, #26
 8000fbe:	d42b      	bmi.n	8001018 <_printf_common+0xb0>
 8000fc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000fc4:	4649      	mov	r1, r9
 8000fc6:	4638      	mov	r0, r7
 8000fc8:	47c0      	blx	r8
 8000fca:	3001      	adds	r0, #1
 8000fcc:	d01e      	beq.n	800100c <_printf_common+0xa4>
 8000fce:	6823      	ldr	r3, [r4, #0]
 8000fd0:	68e5      	ldr	r5, [r4, #12]
 8000fd2:	6832      	ldr	r2, [r6, #0]
 8000fd4:	f003 0306 	and.w	r3, r3, #6
 8000fd8:	2b04      	cmp	r3, #4
 8000fda:	bf08      	it	eq
 8000fdc:	1aad      	subeq	r5, r5, r2
 8000fde:	68a3      	ldr	r3, [r4, #8]
 8000fe0:	6922      	ldr	r2, [r4, #16]
 8000fe2:	bf0c      	ite	eq
 8000fe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000fe8:	2500      	movne	r5, #0
 8000fea:	4293      	cmp	r3, r2
 8000fec:	bfc4      	itt	gt
 8000fee:	1a9b      	subgt	r3, r3, r2
 8000ff0:	18ed      	addgt	r5, r5, r3
 8000ff2:	2600      	movs	r6, #0
 8000ff4:	341a      	adds	r4, #26
 8000ff6:	42b5      	cmp	r5, r6
 8000ff8:	d11a      	bne.n	8001030 <_printf_common+0xc8>
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	e008      	b.n	8001010 <_printf_common+0xa8>
 8000ffe:	2301      	movs	r3, #1
 8001000:	4652      	mov	r2, sl
 8001002:	4649      	mov	r1, r9
 8001004:	4638      	mov	r0, r7
 8001006:	47c0      	blx	r8
 8001008:	3001      	adds	r0, #1
 800100a:	d103      	bne.n	8001014 <_printf_common+0xac>
 800100c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001014:	3501      	adds	r5, #1
 8001016:	e7c6      	b.n	8000fa6 <_printf_common+0x3e>
 8001018:	18e1      	adds	r1, r4, r3
 800101a:	1c5a      	adds	r2, r3, #1
 800101c:	2030      	movs	r0, #48	; 0x30
 800101e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001022:	4422      	add	r2, r4
 8001024:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001028:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800102c:	3302      	adds	r3, #2
 800102e:	e7c7      	b.n	8000fc0 <_printf_common+0x58>
 8001030:	2301      	movs	r3, #1
 8001032:	4622      	mov	r2, r4
 8001034:	4649      	mov	r1, r9
 8001036:	4638      	mov	r0, r7
 8001038:	47c0      	blx	r8
 800103a:	3001      	adds	r0, #1
 800103c:	d0e6      	beq.n	800100c <_printf_common+0xa4>
 800103e:	3601      	adds	r6, #1
 8001040:	e7d9      	b.n	8000ff6 <_printf_common+0x8e>
	...

08001044 <_printf_i>:
 8001044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001048:	460c      	mov	r4, r1
 800104a:	4691      	mov	r9, r2
 800104c:	7e27      	ldrb	r7, [r4, #24]
 800104e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001050:	2f78      	cmp	r7, #120	; 0x78
 8001052:	4680      	mov	r8, r0
 8001054:	469a      	mov	sl, r3
 8001056:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800105a:	d807      	bhi.n	800106c <_printf_i+0x28>
 800105c:	2f62      	cmp	r7, #98	; 0x62
 800105e:	d80a      	bhi.n	8001076 <_printf_i+0x32>
 8001060:	2f00      	cmp	r7, #0
 8001062:	f000 80d8 	beq.w	8001216 <_printf_i+0x1d2>
 8001066:	2f58      	cmp	r7, #88	; 0x58
 8001068:	f000 80a3 	beq.w	80011b2 <_printf_i+0x16e>
 800106c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001070:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001074:	e03a      	b.n	80010ec <_printf_i+0xa8>
 8001076:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800107a:	2b15      	cmp	r3, #21
 800107c:	d8f6      	bhi.n	800106c <_printf_i+0x28>
 800107e:	a001      	add	r0, pc, #4	; (adr r0, 8001084 <_printf_i+0x40>)
 8001080:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001084:	080010dd 	.word	0x080010dd
 8001088:	080010f1 	.word	0x080010f1
 800108c:	0800106d 	.word	0x0800106d
 8001090:	0800106d 	.word	0x0800106d
 8001094:	0800106d 	.word	0x0800106d
 8001098:	0800106d 	.word	0x0800106d
 800109c:	080010f1 	.word	0x080010f1
 80010a0:	0800106d 	.word	0x0800106d
 80010a4:	0800106d 	.word	0x0800106d
 80010a8:	0800106d 	.word	0x0800106d
 80010ac:	0800106d 	.word	0x0800106d
 80010b0:	080011fd 	.word	0x080011fd
 80010b4:	08001121 	.word	0x08001121
 80010b8:	080011df 	.word	0x080011df
 80010bc:	0800106d 	.word	0x0800106d
 80010c0:	0800106d 	.word	0x0800106d
 80010c4:	0800121f 	.word	0x0800121f
 80010c8:	0800106d 	.word	0x0800106d
 80010cc:	08001121 	.word	0x08001121
 80010d0:	0800106d 	.word	0x0800106d
 80010d4:	0800106d 	.word	0x0800106d
 80010d8:	080011e7 	.word	0x080011e7
 80010dc:	680b      	ldr	r3, [r1, #0]
 80010de:	1d1a      	adds	r2, r3, #4
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	600a      	str	r2, [r1, #0]
 80010e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80010e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80010ec:	2301      	movs	r3, #1
 80010ee:	e0a3      	b.n	8001238 <_printf_i+0x1f4>
 80010f0:	6825      	ldr	r5, [r4, #0]
 80010f2:	6808      	ldr	r0, [r1, #0]
 80010f4:	062e      	lsls	r6, r5, #24
 80010f6:	f100 0304 	add.w	r3, r0, #4
 80010fa:	d50a      	bpl.n	8001112 <_printf_i+0xce>
 80010fc:	6805      	ldr	r5, [r0, #0]
 80010fe:	600b      	str	r3, [r1, #0]
 8001100:	2d00      	cmp	r5, #0
 8001102:	da03      	bge.n	800110c <_printf_i+0xc8>
 8001104:	232d      	movs	r3, #45	; 0x2d
 8001106:	426d      	negs	r5, r5
 8001108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800110c:	485e      	ldr	r0, [pc, #376]	; (8001288 <_printf_i+0x244>)
 800110e:	230a      	movs	r3, #10
 8001110:	e019      	b.n	8001146 <_printf_i+0x102>
 8001112:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001116:	6805      	ldr	r5, [r0, #0]
 8001118:	600b      	str	r3, [r1, #0]
 800111a:	bf18      	it	ne
 800111c:	b22d      	sxthne	r5, r5
 800111e:	e7ef      	b.n	8001100 <_printf_i+0xbc>
 8001120:	680b      	ldr	r3, [r1, #0]
 8001122:	6825      	ldr	r5, [r4, #0]
 8001124:	1d18      	adds	r0, r3, #4
 8001126:	6008      	str	r0, [r1, #0]
 8001128:	0628      	lsls	r0, r5, #24
 800112a:	d501      	bpl.n	8001130 <_printf_i+0xec>
 800112c:	681d      	ldr	r5, [r3, #0]
 800112e:	e002      	b.n	8001136 <_printf_i+0xf2>
 8001130:	0669      	lsls	r1, r5, #25
 8001132:	d5fb      	bpl.n	800112c <_printf_i+0xe8>
 8001134:	881d      	ldrh	r5, [r3, #0]
 8001136:	4854      	ldr	r0, [pc, #336]	; (8001288 <_printf_i+0x244>)
 8001138:	2f6f      	cmp	r7, #111	; 0x6f
 800113a:	bf0c      	ite	eq
 800113c:	2308      	moveq	r3, #8
 800113e:	230a      	movne	r3, #10
 8001140:	2100      	movs	r1, #0
 8001142:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001146:	6866      	ldr	r6, [r4, #4]
 8001148:	60a6      	str	r6, [r4, #8]
 800114a:	2e00      	cmp	r6, #0
 800114c:	bfa2      	ittt	ge
 800114e:	6821      	ldrge	r1, [r4, #0]
 8001150:	f021 0104 	bicge.w	r1, r1, #4
 8001154:	6021      	strge	r1, [r4, #0]
 8001156:	b90d      	cbnz	r5, 800115c <_printf_i+0x118>
 8001158:	2e00      	cmp	r6, #0
 800115a:	d04d      	beq.n	80011f8 <_printf_i+0x1b4>
 800115c:	4616      	mov	r6, r2
 800115e:	fbb5 f1f3 	udiv	r1, r5, r3
 8001162:	fb03 5711 	mls	r7, r3, r1, r5
 8001166:	5dc7      	ldrb	r7, [r0, r7]
 8001168:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800116c:	462f      	mov	r7, r5
 800116e:	42bb      	cmp	r3, r7
 8001170:	460d      	mov	r5, r1
 8001172:	d9f4      	bls.n	800115e <_printf_i+0x11a>
 8001174:	2b08      	cmp	r3, #8
 8001176:	d10b      	bne.n	8001190 <_printf_i+0x14c>
 8001178:	6823      	ldr	r3, [r4, #0]
 800117a:	07df      	lsls	r7, r3, #31
 800117c:	d508      	bpl.n	8001190 <_printf_i+0x14c>
 800117e:	6923      	ldr	r3, [r4, #16]
 8001180:	6861      	ldr	r1, [r4, #4]
 8001182:	4299      	cmp	r1, r3
 8001184:	bfde      	ittt	le
 8001186:	2330      	movle	r3, #48	; 0x30
 8001188:	f806 3c01 	strble.w	r3, [r6, #-1]
 800118c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8001190:	1b92      	subs	r2, r2, r6
 8001192:	6122      	str	r2, [r4, #16]
 8001194:	f8cd a000 	str.w	sl, [sp]
 8001198:	464b      	mov	r3, r9
 800119a:	aa03      	add	r2, sp, #12
 800119c:	4621      	mov	r1, r4
 800119e:	4640      	mov	r0, r8
 80011a0:	f7ff fee2 	bl	8000f68 <_printf_common>
 80011a4:	3001      	adds	r0, #1
 80011a6:	d14c      	bne.n	8001242 <_printf_i+0x1fe>
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011ac:	b004      	add	sp, #16
 80011ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011b2:	4835      	ldr	r0, [pc, #212]	; (8001288 <_printf_i+0x244>)
 80011b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80011b8:	6823      	ldr	r3, [r4, #0]
 80011ba:	680e      	ldr	r6, [r1, #0]
 80011bc:	061f      	lsls	r7, r3, #24
 80011be:	f856 5b04 	ldr.w	r5, [r6], #4
 80011c2:	600e      	str	r6, [r1, #0]
 80011c4:	d514      	bpl.n	80011f0 <_printf_i+0x1ac>
 80011c6:	07d9      	lsls	r1, r3, #31
 80011c8:	bf44      	itt	mi
 80011ca:	f043 0320 	orrmi.w	r3, r3, #32
 80011ce:	6023      	strmi	r3, [r4, #0]
 80011d0:	b91d      	cbnz	r5, 80011da <_printf_i+0x196>
 80011d2:	6823      	ldr	r3, [r4, #0]
 80011d4:	f023 0320 	bic.w	r3, r3, #32
 80011d8:	6023      	str	r3, [r4, #0]
 80011da:	2310      	movs	r3, #16
 80011dc:	e7b0      	b.n	8001140 <_printf_i+0xfc>
 80011de:	6823      	ldr	r3, [r4, #0]
 80011e0:	f043 0320 	orr.w	r3, r3, #32
 80011e4:	6023      	str	r3, [r4, #0]
 80011e6:	2378      	movs	r3, #120	; 0x78
 80011e8:	4828      	ldr	r0, [pc, #160]	; (800128c <_printf_i+0x248>)
 80011ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80011ee:	e7e3      	b.n	80011b8 <_printf_i+0x174>
 80011f0:	065e      	lsls	r6, r3, #25
 80011f2:	bf48      	it	mi
 80011f4:	b2ad      	uxthmi	r5, r5
 80011f6:	e7e6      	b.n	80011c6 <_printf_i+0x182>
 80011f8:	4616      	mov	r6, r2
 80011fa:	e7bb      	b.n	8001174 <_printf_i+0x130>
 80011fc:	680b      	ldr	r3, [r1, #0]
 80011fe:	6826      	ldr	r6, [r4, #0]
 8001200:	6960      	ldr	r0, [r4, #20]
 8001202:	1d1d      	adds	r5, r3, #4
 8001204:	600d      	str	r5, [r1, #0]
 8001206:	0635      	lsls	r5, r6, #24
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	d501      	bpl.n	8001210 <_printf_i+0x1cc>
 800120c:	6018      	str	r0, [r3, #0]
 800120e:	e002      	b.n	8001216 <_printf_i+0x1d2>
 8001210:	0671      	lsls	r1, r6, #25
 8001212:	d5fb      	bpl.n	800120c <_printf_i+0x1c8>
 8001214:	8018      	strh	r0, [r3, #0]
 8001216:	2300      	movs	r3, #0
 8001218:	6123      	str	r3, [r4, #16]
 800121a:	4616      	mov	r6, r2
 800121c:	e7ba      	b.n	8001194 <_printf_i+0x150>
 800121e:	680b      	ldr	r3, [r1, #0]
 8001220:	1d1a      	adds	r2, r3, #4
 8001222:	600a      	str	r2, [r1, #0]
 8001224:	681e      	ldr	r6, [r3, #0]
 8001226:	6862      	ldr	r2, [r4, #4]
 8001228:	2100      	movs	r1, #0
 800122a:	4630      	mov	r0, r6
 800122c:	f7fe ffe0 	bl	80001f0 <memchr>
 8001230:	b108      	cbz	r0, 8001236 <_printf_i+0x1f2>
 8001232:	1b80      	subs	r0, r0, r6
 8001234:	6060      	str	r0, [r4, #4]
 8001236:	6863      	ldr	r3, [r4, #4]
 8001238:	6123      	str	r3, [r4, #16]
 800123a:	2300      	movs	r3, #0
 800123c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001240:	e7a8      	b.n	8001194 <_printf_i+0x150>
 8001242:	6923      	ldr	r3, [r4, #16]
 8001244:	4632      	mov	r2, r6
 8001246:	4649      	mov	r1, r9
 8001248:	4640      	mov	r0, r8
 800124a:	47d0      	blx	sl
 800124c:	3001      	adds	r0, #1
 800124e:	d0ab      	beq.n	80011a8 <_printf_i+0x164>
 8001250:	6823      	ldr	r3, [r4, #0]
 8001252:	079b      	lsls	r3, r3, #30
 8001254:	d413      	bmi.n	800127e <_printf_i+0x23a>
 8001256:	68e0      	ldr	r0, [r4, #12]
 8001258:	9b03      	ldr	r3, [sp, #12]
 800125a:	4298      	cmp	r0, r3
 800125c:	bfb8      	it	lt
 800125e:	4618      	movlt	r0, r3
 8001260:	e7a4      	b.n	80011ac <_printf_i+0x168>
 8001262:	2301      	movs	r3, #1
 8001264:	4632      	mov	r2, r6
 8001266:	4649      	mov	r1, r9
 8001268:	4640      	mov	r0, r8
 800126a:	47d0      	blx	sl
 800126c:	3001      	adds	r0, #1
 800126e:	d09b      	beq.n	80011a8 <_printf_i+0x164>
 8001270:	3501      	adds	r5, #1
 8001272:	68e3      	ldr	r3, [r4, #12]
 8001274:	9903      	ldr	r1, [sp, #12]
 8001276:	1a5b      	subs	r3, r3, r1
 8001278:	42ab      	cmp	r3, r5
 800127a:	dcf2      	bgt.n	8001262 <_printf_i+0x21e>
 800127c:	e7eb      	b.n	8001256 <_printf_i+0x212>
 800127e:	2500      	movs	r5, #0
 8001280:	f104 0619 	add.w	r6, r4, #25
 8001284:	e7f5      	b.n	8001272 <_printf_i+0x22e>
 8001286:	bf00      	nop
 8001288:	08001d75 	.word	0x08001d75
 800128c:	08001d86 	.word	0x08001d86

08001290 <iprintf>:
 8001290:	b40f      	push	{r0, r1, r2, r3}
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <iprintf+0x2c>)
 8001294:	b513      	push	{r0, r1, r4, lr}
 8001296:	681c      	ldr	r4, [r3, #0]
 8001298:	b124      	cbz	r4, 80012a4 <iprintf+0x14>
 800129a:	69a3      	ldr	r3, [r4, #24]
 800129c:	b913      	cbnz	r3, 80012a4 <iprintf+0x14>
 800129e:	4620      	mov	r0, r4
 80012a0:	f000 f9fe 	bl	80016a0 <__sinit>
 80012a4:	ab05      	add	r3, sp, #20
 80012a6:	9a04      	ldr	r2, [sp, #16]
 80012a8:	68a1      	ldr	r1, [r4, #8]
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	4620      	mov	r0, r4
 80012ae:	f7ff fd21 	bl	8000cf4 <_vfiprintf_r>
 80012b2:	b002      	add	sp, #8
 80012b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012b8:	b004      	add	sp, #16
 80012ba:	4770      	bx	lr
 80012bc:	20000004 	.word	0x20000004

080012c0 <putchar>:
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <putchar+0x28>)
 80012c2:	b513      	push	{r0, r1, r4, lr}
 80012c4:	681c      	ldr	r4, [r3, #0]
 80012c6:	4601      	mov	r1, r0
 80012c8:	b134      	cbz	r4, 80012d8 <putchar+0x18>
 80012ca:	69a3      	ldr	r3, [r4, #24]
 80012cc:	b923      	cbnz	r3, 80012d8 <putchar+0x18>
 80012ce:	9001      	str	r0, [sp, #4]
 80012d0:	4620      	mov	r0, r4
 80012d2:	f000 f9e5 	bl	80016a0 <__sinit>
 80012d6:	9901      	ldr	r1, [sp, #4]
 80012d8:	68a2      	ldr	r2, [r4, #8]
 80012da:	4620      	mov	r0, r4
 80012dc:	b002      	add	sp, #8
 80012de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012e2:	f000 bb8b 	b.w	80019fc <_putc_r>
 80012e6:	bf00      	nop
 80012e8:	20000004 	.word	0x20000004

080012ec <__swbuf_r>:
 80012ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ee:	460e      	mov	r6, r1
 80012f0:	4614      	mov	r4, r2
 80012f2:	4605      	mov	r5, r0
 80012f4:	b118      	cbz	r0, 80012fe <__swbuf_r+0x12>
 80012f6:	6983      	ldr	r3, [r0, #24]
 80012f8:	b90b      	cbnz	r3, 80012fe <__swbuf_r+0x12>
 80012fa:	f000 f9d1 	bl	80016a0 <__sinit>
 80012fe:	4b21      	ldr	r3, [pc, #132]	; (8001384 <__swbuf_r+0x98>)
 8001300:	429c      	cmp	r4, r3
 8001302:	d12b      	bne.n	800135c <__swbuf_r+0x70>
 8001304:	686c      	ldr	r4, [r5, #4]
 8001306:	69a3      	ldr	r3, [r4, #24]
 8001308:	60a3      	str	r3, [r4, #8]
 800130a:	89a3      	ldrh	r3, [r4, #12]
 800130c:	071a      	lsls	r2, r3, #28
 800130e:	d52f      	bpl.n	8001370 <__swbuf_r+0x84>
 8001310:	6923      	ldr	r3, [r4, #16]
 8001312:	b36b      	cbz	r3, 8001370 <__swbuf_r+0x84>
 8001314:	6923      	ldr	r3, [r4, #16]
 8001316:	6820      	ldr	r0, [r4, #0]
 8001318:	1ac0      	subs	r0, r0, r3
 800131a:	6963      	ldr	r3, [r4, #20]
 800131c:	b2f6      	uxtb	r6, r6
 800131e:	4283      	cmp	r3, r0
 8001320:	4637      	mov	r7, r6
 8001322:	dc04      	bgt.n	800132e <__swbuf_r+0x42>
 8001324:	4621      	mov	r1, r4
 8001326:	4628      	mov	r0, r5
 8001328:	f000 f926 	bl	8001578 <_fflush_r>
 800132c:	bb30      	cbnz	r0, 800137c <__swbuf_r+0x90>
 800132e:	68a3      	ldr	r3, [r4, #8]
 8001330:	3b01      	subs	r3, #1
 8001332:	60a3      	str	r3, [r4, #8]
 8001334:	6823      	ldr	r3, [r4, #0]
 8001336:	1c5a      	adds	r2, r3, #1
 8001338:	6022      	str	r2, [r4, #0]
 800133a:	701e      	strb	r6, [r3, #0]
 800133c:	6963      	ldr	r3, [r4, #20]
 800133e:	3001      	adds	r0, #1
 8001340:	4283      	cmp	r3, r0
 8001342:	d004      	beq.n	800134e <__swbuf_r+0x62>
 8001344:	89a3      	ldrh	r3, [r4, #12]
 8001346:	07db      	lsls	r3, r3, #31
 8001348:	d506      	bpl.n	8001358 <__swbuf_r+0x6c>
 800134a:	2e0a      	cmp	r6, #10
 800134c:	d104      	bne.n	8001358 <__swbuf_r+0x6c>
 800134e:	4621      	mov	r1, r4
 8001350:	4628      	mov	r0, r5
 8001352:	f000 f911 	bl	8001578 <_fflush_r>
 8001356:	b988      	cbnz	r0, 800137c <__swbuf_r+0x90>
 8001358:	4638      	mov	r0, r7
 800135a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <__swbuf_r+0x9c>)
 800135e:	429c      	cmp	r4, r3
 8001360:	d101      	bne.n	8001366 <__swbuf_r+0x7a>
 8001362:	68ac      	ldr	r4, [r5, #8]
 8001364:	e7cf      	b.n	8001306 <__swbuf_r+0x1a>
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <__swbuf_r+0xa0>)
 8001368:	429c      	cmp	r4, r3
 800136a:	bf08      	it	eq
 800136c:	68ec      	ldreq	r4, [r5, #12]
 800136e:	e7ca      	b.n	8001306 <__swbuf_r+0x1a>
 8001370:	4621      	mov	r1, r4
 8001372:	4628      	mov	r0, r5
 8001374:	f000 f80c 	bl	8001390 <__swsetup_r>
 8001378:	2800      	cmp	r0, #0
 800137a:	d0cb      	beq.n	8001314 <__swbuf_r+0x28>
 800137c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001380:	e7ea      	b.n	8001358 <__swbuf_r+0x6c>
 8001382:	bf00      	nop
 8001384:	08001db8 	.word	0x08001db8
 8001388:	08001dd8 	.word	0x08001dd8
 800138c:	08001d98 	.word	0x08001d98

08001390 <__swsetup_r>:
 8001390:	4b32      	ldr	r3, [pc, #200]	; (800145c <__swsetup_r+0xcc>)
 8001392:	b570      	push	{r4, r5, r6, lr}
 8001394:	681d      	ldr	r5, [r3, #0]
 8001396:	4606      	mov	r6, r0
 8001398:	460c      	mov	r4, r1
 800139a:	b125      	cbz	r5, 80013a6 <__swsetup_r+0x16>
 800139c:	69ab      	ldr	r3, [r5, #24]
 800139e:	b913      	cbnz	r3, 80013a6 <__swsetup_r+0x16>
 80013a0:	4628      	mov	r0, r5
 80013a2:	f000 f97d 	bl	80016a0 <__sinit>
 80013a6:	4b2e      	ldr	r3, [pc, #184]	; (8001460 <__swsetup_r+0xd0>)
 80013a8:	429c      	cmp	r4, r3
 80013aa:	d10f      	bne.n	80013cc <__swsetup_r+0x3c>
 80013ac:	686c      	ldr	r4, [r5, #4]
 80013ae:	89a3      	ldrh	r3, [r4, #12]
 80013b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80013b4:	0719      	lsls	r1, r3, #28
 80013b6:	d42c      	bmi.n	8001412 <__swsetup_r+0x82>
 80013b8:	06dd      	lsls	r5, r3, #27
 80013ba:	d411      	bmi.n	80013e0 <__swsetup_r+0x50>
 80013bc:	2309      	movs	r3, #9
 80013be:	6033      	str	r3, [r6, #0]
 80013c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80013c4:	81a3      	strh	r3, [r4, #12]
 80013c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013ca:	e03e      	b.n	800144a <__swsetup_r+0xba>
 80013cc:	4b25      	ldr	r3, [pc, #148]	; (8001464 <__swsetup_r+0xd4>)
 80013ce:	429c      	cmp	r4, r3
 80013d0:	d101      	bne.n	80013d6 <__swsetup_r+0x46>
 80013d2:	68ac      	ldr	r4, [r5, #8]
 80013d4:	e7eb      	b.n	80013ae <__swsetup_r+0x1e>
 80013d6:	4b24      	ldr	r3, [pc, #144]	; (8001468 <__swsetup_r+0xd8>)
 80013d8:	429c      	cmp	r4, r3
 80013da:	bf08      	it	eq
 80013dc:	68ec      	ldreq	r4, [r5, #12]
 80013de:	e7e6      	b.n	80013ae <__swsetup_r+0x1e>
 80013e0:	0758      	lsls	r0, r3, #29
 80013e2:	d512      	bpl.n	800140a <__swsetup_r+0x7a>
 80013e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80013e6:	b141      	cbz	r1, 80013fa <__swsetup_r+0x6a>
 80013e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80013ec:	4299      	cmp	r1, r3
 80013ee:	d002      	beq.n	80013f6 <__swsetup_r+0x66>
 80013f0:	4630      	mov	r0, r6
 80013f2:	f000 fa59 	bl	80018a8 <_free_r>
 80013f6:	2300      	movs	r3, #0
 80013f8:	6363      	str	r3, [r4, #52]	; 0x34
 80013fa:	89a3      	ldrh	r3, [r4, #12]
 80013fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001400:	81a3      	strh	r3, [r4, #12]
 8001402:	2300      	movs	r3, #0
 8001404:	6063      	str	r3, [r4, #4]
 8001406:	6923      	ldr	r3, [r4, #16]
 8001408:	6023      	str	r3, [r4, #0]
 800140a:	89a3      	ldrh	r3, [r4, #12]
 800140c:	f043 0308 	orr.w	r3, r3, #8
 8001410:	81a3      	strh	r3, [r4, #12]
 8001412:	6923      	ldr	r3, [r4, #16]
 8001414:	b94b      	cbnz	r3, 800142a <__swsetup_r+0x9a>
 8001416:	89a3      	ldrh	r3, [r4, #12]
 8001418:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800141c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001420:	d003      	beq.n	800142a <__swsetup_r+0x9a>
 8001422:	4621      	mov	r1, r4
 8001424:	4630      	mov	r0, r6
 8001426:	f000 f9ff 	bl	8001828 <__smakebuf_r>
 800142a:	89a0      	ldrh	r0, [r4, #12]
 800142c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001430:	f010 0301 	ands.w	r3, r0, #1
 8001434:	d00a      	beq.n	800144c <__swsetup_r+0xbc>
 8001436:	2300      	movs	r3, #0
 8001438:	60a3      	str	r3, [r4, #8]
 800143a:	6963      	ldr	r3, [r4, #20]
 800143c:	425b      	negs	r3, r3
 800143e:	61a3      	str	r3, [r4, #24]
 8001440:	6923      	ldr	r3, [r4, #16]
 8001442:	b943      	cbnz	r3, 8001456 <__swsetup_r+0xc6>
 8001444:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001448:	d1ba      	bne.n	80013c0 <__swsetup_r+0x30>
 800144a:	bd70      	pop	{r4, r5, r6, pc}
 800144c:	0781      	lsls	r1, r0, #30
 800144e:	bf58      	it	pl
 8001450:	6963      	ldrpl	r3, [r4, #20]
 8001452:	60a3      	str	r3, [r4, #8]
 8001454:	e7f4      	b.n	8001440 <__swsetup_r+0xb0>
 8001456:	2000      	movs	r0, #0
 8001458:	e7f7      	b.n	800144a <__swsetup_r+0xba>
 800145a:	bf00      	nop
 800145c:	20000004 	.word	0x20000004
 8001460:	08001db8 	.word	0x08001db8
 8001464:	08001dd8 	.word	0x08001dd8
 8001468:	08001d98 	.word	0x08001d98

0800146c <__sflush_r>:
 800146c:	898a      	ldrh	r2, [r1, #12]
 800146e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001472:	4605      	mov	r5, r0
 8001474:	0710      	lsls	r0, r2, #28
 8001476:	460c      	mov	r4, r1
 8001478:	d458      	bmi.n	800152c <__sflush_r+0xc0>
 800147a:	684b      	ldr	r3, [r1, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	dc05      	bgt.n	800148c <__sflush_r+0x20>
 8001480:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001482:	2b00      	cmp	r3, #0
 8001484:	dc02      	bgt.n	800148c <__sflush_r+0x20>
 8001486:	2000      	movs	r0, #0
 8001488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800148c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800148e:	2e00      	cmp	r6, #0
 8001490:	d0f9      	beq.n	8001486 <__sflush_r+0x1a>
 8001492:	2300      	movs	r3, #0
 8001494:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001498:	682f      	ldr	r7, [r5, #0]
 800149a:	602b      	str	r3, [r5, #0]
 800149c:	d032      	beq.n	8001504 <__sflush_r+0x98>
 800149e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80014a0:	89a3      	ldrh	r3, [r4, #12]
 80014a2:	075a      	lsls	r2, r3, #29
 80014a4:	d505      	bpl.n	80014b2 <__sflush_r+0x46>
 80014a6:	6863      	ldr	r3, [r4, #4]
 80014a8:	1ac0      	subs	r0, r0, r3
 80014aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80014ac:	b10b      	cbz	r3, 80014b2 <__sflush_r+0x46>
 80014ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014b0:	1ac0      	subs	r0, r0, r3
 80014b2:	2300      	movs	r3, #0
 80014b4:	4602      	mov	r2, r0
 80014b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80014b8:	6a21      	ldr	r1, [r4, #32]
 80014ba:	4628      	mov	r0, r5
 80014bc:	47b0      	blx	r6
 80014be:	1c43      	adds	r3, r0, #1
 80014c0:	89a3      	ldrh	r3, [r4, #12]
 80014c2:	d106      	bne.n	80014d2 <__sflush_r+0x66>
 80014c4:	6829      	ldr	r1, [r5, #0]
 80014c6:	291d      	cmp	r1, #29
 80014c8:	d82c      	bhi.n	8001524 <__sflush_r+0xb8>
 80014ca:	4a2a      	ldr	r2, [pc, #168]	; (8001574 <__sflush_r+0x108>)
 80014cc:	40ca      	lsrs	r2, r1
 80014ce:	07d6      	lsls	r6, r2, #31
 80014d0:	d528      	bpl.n	8001524 <__sflush_r+0xb8>
 80014d2:	2200      	movs	r2, #0
 80014d4:	6062      	str	r2, [r4, #4]
 80014d6:	04d9      	lsls	r1, r3, #19
 80014d8:	6922      	ldr	r2, [r4, #16]
 80014da:	6022      	str	r2, [r4, #0]
 80014dc:	d504      	bpl.n	80014e8 <__sflush_r+0x7c>
 80014de:	1c42      	adds	r2, r0, #1
 80014e0:	d101      	bne.n	80014e6 <__sflush_r+0x7a>
 80014e2:	682b      	ldr	r3, [r5, #0]
 80014e4:	b903      	cbnz	r3, 80014e8 <__sflush_r+0x7c>
 80014e6:	6560      	str	r0, [r4, #84]	; 0x54
 80014e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80014ea:	602f      	str	r7, [r5, #0]
 80014ec:	2900      	cmp	r1, #0
 80014ee:	d0ca      	beq.n	8001486 <__sflush_r+0x1a>
 80014f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80014f4:	4299      	cmp	r1, r3
 80014f6:	d002      	beq.n	80014fe <__sflush_r+0x92>
 80014f8:	4628      	mov	r0, r5
 80014fa:	f000 f9d5 	bl	80018a8 <_free_r>
 80014fe:	2000      	movs	r0, #0
 8001500:	6360      	str	r0, [r4, #52]	; 0x34
 8001502:	e7c1      	b.n	8001488 <__sflush_r+0x1c>
 8001504:	6a21      	ldr	r1, [r4, #32]
 8001506:	2301      	movs	r3, #1
 8001508:	4628      	mov	r0, r5
 800150a:	47b0      	blx	r6
 800150c:	1c41      	adds	r1, r0, #1
 800150e:	d1c7      	bne.n	80014a0 <__sflush_r+0x34>
 8001510:	682b      	ldr	r3, [r5, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0c4      	beq.n	80014a0 <__sflush_r+0x34>
 8001516:	2b1d      	cmp	r3, #29
 8001518:	d001      	beq.n	800151e <__sflush_r+0xb2>
 800151a:	2b16      	cmp	r3, #22
 800151c:	d101      	bne.n	8001522 <__sflush_r+0xb6>
 800151e:	602f      	str	r7, [r5, #0]
 8001520:	e7b1      	b.n	8001486 <__sflush_r+0x1a>
 8001522:	89a3      	ldrh	r3, [r4, #12]
 8001524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001528:	81a3      	strh	r3, [r4, #12]
 800152a:	e7ad      	b.n	8001488 <__sflush_r+0x1c>
 800152c:	690f      	ldr	r7, [r1, #16]
 800152e:	2f00      	cmp	r7, #0
 8001530:	d0a9      	beq.n	8001486 <__sflush_r+0x1a>
 8001532:	0793      	lsls	r3, r2, #30
 8001534:	680e      	ldr	r6, [r1, #0]
 8001536:	bf08      	it	eq
 8001538:	694b      	ldreq	r3, [r1, #20]
 800153a:	600f      	str	r7, [r1, #0]
 800153c:	bf18      	it	ne
 800153e:	2300      	movne	r3, #0
 8001540:	eba6 0807 	sub.w	r8, r6, r7
 8001544:	608b      	str	r3, [r1, #8]
 8001546:	f1b8 0f00 	cmp.w	r8, #0
 800154a:	dd9c      	ble.n	8001486 <__sflush_r+0x1a>
 800154c:	6a21      	ldr	r1, [r4, #32]
 800154e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001550:	4643      	mov	r3, r8
 8001552:	463a      	mov	r2, r7
 8001554:	4628      	mov	r0, r5
 8001556:	47b0      	blx	r6
 8001558:	2800      	cmp	r0, #0
 800155a:	dc06      	bgt.n	800156a <__sflush_r+0xfe>
 800155c:	89a3      	ldrh	r3, [r4, #12]
 800155e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001562:	81a3      	strh	r3, [r4, #12]
 8001564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001568:	e78e      	b.n	8001488 <__sflush_r+0x1c>
 800156a:	4407      	add	r7, r0
 800156c:	eba8 0800 	sub.w	r8, r8, r0
 8001570:	e7e9      	b.n	8001546 <__sflush_r+0xda>
 8001572:	bf00      	nop
 8001574:	20400001 	.word	0x20400001

08001578 <_fflush_r>:
 8001578:	b538      	push	{r3, r4, r5, lr}
 800157a:	690b      	ldr	r3, [r1, #16]
 800157c:	4605      	mov	r5, r0
 800157e:	460c      	mov	r4, r1
 8001580:	b913      	cbnz	r3, 8001588 <_fflush_r+0x10>
 8001582:	2500      	movs	r5, #0
 8001584:	4628      	mov	r0, r5
 8001586:	bd38      	pop	{r3, r4, r5, pc}
 8001588:	b118      	cbz	r0, 8001592 <_fflush_r+0x1a>
 800158a:	6983      	ldr	r3, [r0, #24]
 800158c:	b90b      	cbnz	r3, 8001592 <_fflush_r+0x1a>
 800158e:	f000 f887 	bl	80016a0 <__sinit>
 8001592:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <_fflush_r+0x6c>)
 8001594:	429c      	cmp	r4, r3
 8001596:	d11b      	bne.n	80015d0 <_fflush_r+0x58>
 8001598:	686c      	ldr	r4, [r5, #4]
 800159a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0ef      	beq.n	8001582 <_fflush_r+0xa>
 80015a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80015a4:	07d0      	lsls	r0, r2, #31
 80015a6:	d404      	bmi.n	80015b2 <_fflush_r+0x3a>
 80015a8:	0599      	lsls	r1, r3, #22
 80015aa:	d402      	bmi.n	80015b2 <_fflush_r+0x3a>
 80015ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80015ae:	f000 f915 	bl	80017dc <__retarget_lock_acquire_recursive>
 80015b2:	4628      	mov	r0, r5
 80015b4:	4621      	mov	r1, r4
 80015b6:	f7ff ff59 	bl	800146c <__sflush_r>
 80015ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80015bc:	07da      	lsls	r2, r3, #31
 80015be:	4605      	mov	r5, r0
 80015c0:	d4e0      	bmi.n	8001584 <_fflush_r+0xc>
 80015c2:	89a3      	ldrh	r3, [r4, #12]
 80015c4:	059b      	lsls	r3, r3, #22
 80015c6:	d4dd      	bmi.n	8001584 <_fflush_r+0xc>
 80015c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80015ca:	f000 f908 	bl	80017de <__retarget_lock_release_recursive>
 80015ce:	e7d9      	b.n	8001584 <_fflush_r+0xc>
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <_fflush_r+0x70>)
 80015d2:	429c      	cmp	r4, r3
 80015d4:	d101      	bne.n	80015da <_fflush_r+0x62>
 80015d6:	68ac      	ldr	r4, [r5, #8]
 80015d8:	e7df      	b.n	800159a <_fflush_r+0x22>
 80015da:	4b04      	ldr	r3, [pc, #16]	; (80015ec <_fflush_r+0x74>)
 80015dc:	429c      	cmp	r4, r3
 80015de:	bf08      	it	eq
 80015e0:	68ec      	ldreq	r4, [r5, #12]
 80015e2:	e7da      	b.n	800159a <_fflush_r+0x22>
 80015e4:	08001db8 	.word	0x08001db8
 80015e8:	08001dd8 	.word	0x08001dd8
 80015ec:	08001d98 	.word	0x08001d98

080015f0 <std>:
 80015f0:	2300      	movs	r3, #0
 80015f2:	b510      	push	{r4, lr}
 80015f4:	4604      	mov	r4, r0
 80015f6:	e9c0 3300 	strd	r3, r3, [r0]
 80015fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80015fe:	6083      	str	r3, [r0, #8]
 8001600:	8181      	strh	r1, [r0, #12]
 8001602:	6643      	str	r3, [r0, #100]	; 0x64
 8001604:	81c2      	strh	r2, [r0, #14]
 8001606:	6183      	str	r3, [r0, #24]
 8001608:	4619      	mov	r1, r3
 800160a:	2208      	movs	r2, #8
 800160c:	305c      	adds	r0, #92	; 0x5c
 800160e:	f7ff fb3f 	bl	8000c90 <memset>
 8001612:	4b05      	ldr	r3, [pc, #20]	; (8001628 <std+0x38>)
 8001614:	6263      	str	r3, [r4, #36]	; 0x24
 8001616:	4b05      	ldr	r3, [pc, #20]	; (800162c <std+0x3c>)
 8001618:	62a3      	str	r3, [r4, #40]	; 0x28
 800161a:	4b05      	ldr	r3, [pc, #20]	; (8001630 <std+0x40>)
 800161c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800161e:	4b05      	ldr	r3, [pc, #20]	; (8001634 <std+0x44>)
 8001620:	6224      	str	r4, [r4, #32]
 8001622:	6323      	str	r3, [r4, #48]	; 0x30
 8001624:	bd10      	pop	{r4, pc}
 8001626:	bf00      	nop
 8001628:	08001aad 	.word	0x08001aad
 800162c:	08001acf 	.word	0x08001acf
 8001630:	08001b07 	.word	0x08001b07
 8001634:	08001b2b 	.word	0x08001b2b

08001638 <_cleanup_r>:
 8001638:	4901      	ldr	r1, [pc, #4]	; (8001640 <_cleanup_r+0x8>)
 800163a:	f000 b8af 	b.w	800179c <_fwalk_reent>
 800163e:	bf00      	nop
 8001640:	08001579 	.word	0x08001579

08001644 <__sfmoreglue>:
 8001644:	b570      	push	{r4, r5, r6, lr}
 8001646:	1e4a      	subs	r2, r1, #1
 8001648:	2568      	movs	r5, #104	; 0x68
 800164a:	4355      	muls	r5, r2
 800164c:	460e      	mov	r6, r1
 800164e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001652:	f000 f979 	bl	8001948 <_malloc_r>
 8001656:	4604      	mov	r4, r0
 8001658:	b140      	cbz	r0, 800166c <__sfmoreglue+0x28>
 800165a:	2100      	movs	r1, #0
 800165c:	e9c0 1600 	strd	r1, r6, [r0]
 8001660:	300c      	adds	r0, #12
 8001662:	60a0      	str	r0, [r4, #8]
 8001664:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001668:	f7ff fb12 	bl	8000c90 <memset>
 800166c:	4620      	mov	r0, r4
 800166e:	bd70      	pop	{r4, r5, r6, pc}

08001670 <__sfp_lock_acquire>:
 8001670:	4801      	ldr	r0, [pc, #4]	; (8001678 <__sfp_lock_acquire+0x8>)
 8001672:	f000 b8b3 	b.w	80017dc <__retarget_lock_acquire_recursive>
 8001676:	bf00      	nop
 8001678:	20000098 	.word	0x20000098

0800167c <__sfp_lock_release>:
 800167c:	4801      	ldr	r0, [pc, #4]	; (8001684 <__sfp_lock_release+0x8>)
 800167e:	f000 b8ae 	b.w	80017de <__retarget_lock_release_recursive>
 8001682:	bf00      	nop
 8001684:	20000098 	.word	0x20000098

08001688 <__sinit_lock_acquire>:
 8001688:	4801      	ldr	r0, [pc, #4]	; (8001690 <__sinit_lock_acquire+0x8>)
 800168a:	f000 b8a7 	b.w	80017dc <__retarget_lock_acquire_recursive>
 800168e:	bf00      	nop
 8001690:	20000093 	.word	0x20000093

08001694 <__sinit_lock_release>:
 8001694:	4801      	ldr	r0, [pc, #4]	; (800169c <__sinit_lock_release+0x8>)
 8001696:	f000 b8a2 	b.w	80017de <__retarget_lock_release_recursive>
 800169a:	bf00      	nop
 800169c:	20000093 	.word	0x20000093

080016a0 <__sinit>:
 80016a0:	b510      	push	{r4, lr}
 80016a2:	4604      	mov	r4, r0
 80016a4:	f7ff fff0 	bl	8001688 <__sinit_lock_acquire>
 80016a8:	69a3      	ldr	r3, [r4, #24]
 80016aa:	b11b      	cbz	r3, 80016b4 <__sinit+0x14>
 80016ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016b0:	f7ff bff0 	b.w	8001694 <__sinit_lock_release>
 80016b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80016b8:	6523      	str	r3, [r4, #80]	; 0x50
 80016ba:	4b13      	ldr	r3, [pc, #76]	; (8001708 <__sinit+0x68>)
 80016bc:	4a13      	ldr	r2, [pc, #76]	; (800170c <__sinit+0x6c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80016c2:	42a3      	cmp	r3, r4
 80016c4:	bf04      	itt	eq
 80016c6:	2301      	moveq	r3, #1
 80016c8:	61a3      	streq	r3, [r4, #24]
 80016ca:	4620      	mov	r0, r4
 80016cc:	f000 f820 	bl	8001710 <__sfp>
 80016d0:	6060      	str	r0, [r4, #4]
 80016d2:	4620      	mov	r0, r4
 80016d4:	f000 f81c 	bl	8001710 <__sfp>
 80016d8:	60a0      	str	r0, [r4, #8]
 80016da:	4620      	mov	r0, r4
 80016dc:	f000 f818 	bl	8001710 <__sfp>
 80016e0:	2200      	movs	r2, #0
 80016e2:	60e0      	str	r0, [r4, #12]
 80016e4:	2104      	movs	r1, #4
 80016e6:	6860      	ldr	r0, [r4, #4]
 80016e8:	f7ff ff82 	bl	80015f0 <std>
 80016ec:	68a0      	ldr	r0, [r4, #8]
 80016ee:	2201      	movs	r2, #1
 80016f0:	2109      	movs	r1, #9
 80016f2:	f7ff ff7d 	bl	80015f0 <std>
 80016f6:	68e0      	ldr	r0, [r4, #12]
 80016f8:	2202      	movs	r2, #2
 80016fa:	2112      	movs	r1, #18
 80016fc:	f7ff ff78 	bl	80015f0 <std>
 8001700:	2301      	movs	r3, #1
 8001702:	61a3      	str	r3, [r4, #24]
 8001704:	e7d2      	b.n	80016ac <__sinit+0xc>
 8001706:	bf00      	nop
 8001708:	08001d60 	.word	0x08001d60
 800170c:	08001639 	.word	0x08001639

08001710 <__sfp>:
 8001710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001712:	4607      	mov	r7, r0
 8001714:	f7ff ffac 	bl	8001670 <__sfp_lock_acquire>
 8001718:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <__sfp+0x84>)
 800171a:	681e      	ldr	r6, [r3, #0]
 800171c:	69b3      	ldr	r3, [r6, #24]
 800171e:	b913      	cbnz	r3, 8001726 <__sfp+0x16>
 8001720:	4630      	mov	r0, r6
 8001722:	f7ff ffbd 	bl	80016a0 <__sinit>
 8001726:	3648      	adds	r6, #72	; 0x48
 8001728:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800172c:	3b01      	subs	r3, #1
 800172e:	d503      	bpl.n	8001738 <__sfp+0x28>
 8001730:	6833      	ldr	r3, [r6, #0]
 8001732:	b30b      	cbz	r3, 8001778 <__sfp+0x68>
 8001734:	6836      	ldr	r6, [r6, #0]
 8001736:	e7f7      	b.n	8001728 <__sfp+0x18>
 8001738:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800173c:	b9d5      	cbnz	r5, 8001774 <__sfp+0x64>
 800173e:	4b16      	ldr	r3, [pc, #88]	; (8001798 <__sfp+0x88>)
 8001740:	60e3      	str	r3, [r4, #12]
 8001742:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001746:	6665      	str	r5, [r4, #100]	; 0x64
 8001748:	f000 f847 	bl	80017da <__retarget_lock_init_recursive>
 800174c:	f7ff ff96 	bl	800167c <__sfp_lock_release>
 8001750:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001754:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001758:	6025      	str	r5, [r4, #0]
 800175a:	61a5      	str	r5, [r4, #24]
 800175c:	2208      	movs	r2, #8
 800175e:	4629      	mov	r1, r5
 8001760:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001764:	f7ff fa94 	bl	8000c90 <memset>
 8001768:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800176c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001770:	4620      	mov	r0, r4
 8001772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001774:	3468      	adds	r4, #104	; 0x68
 8001776:	e7d9      	b.n	800172c <__sfp+0x1c>
 8001778:	2104      	movs	r1, #4
 800177a:	4638      	mov	r0, r7
 800177c:	f7ff ff62 	bl	8001644 <__sfmoreglue>
 8001780:	4604      	mov	r4, r0
 8001782:	6030      	str	r0, [r6, #0]
 8001784:	2800      	cmp	r0, #0
 8001786:	d1d5      	bne.n	8001734 <__sfp+0x24>
 8001788:	f7ff ff78 	bl	800167c <__sfp_lock_release>
 800178c:	230c      	movs	r3, #12
 800178e:	603b      	str	r3, [r7, #0]
 8001790:	e7ee      	b.n	8001770 <__sfp+0x60>
 8001792:	bf00      	nop
 8001794:	08001d60 	.word	0x08001d60
 8001798:	ffff0001 	.word	0xffff0001

0800179c <_fwalk_reent>:
 800179c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017a0:	4606      	mov	r6, r0
 80017a2:	4688      	mov	r8, r1
 80017a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80017a8:	2700      	movs	r7, #0
 80017aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80017ae:	f1b9 0901 	subs.w	r9, r9, #1
 80017b2:	d505      	bpl.n	80017c0 <_fwalk_reent+0x24>
 80017b4:	6824      	ldr	r4, [r4, #0]
 80017b6:	2c00      	cmp	r4, #0
 80017b8:	d1f7      	bne.n	80017aa <_fwalk_reent+0xe>
 80017ba:	4638      	mov	r0, r7
 80017bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80017c0:	89ab      	ldrh	r3, [r5, #12]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d907      	bls.n	80017d6 <_fwalk_reent+0x3a>
 80017c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80017ca:	3301      	adds	r3, #1
 80017cc:	d003      	beq.n	80017d6 <_fwalk_reent+0x3a>
 80017ce:	4629      	mov	r1, r5
 80017d0:	4630      	mov	r0, r6
 80017d2:	47c0      	blx	r8
 80017d4:	4307      	orrs	r7, r0
 80017d6:	3568      	adds	r5, #104	; 0x68
 80017d8:	e7e9      	b.n	80017ae <_fwalk_reent+0x12>

080017da <__retarget_lock_init_recursive>:
 80017da:	4770      	bx	lr

080017dc <__retarget_lock_acquire_recursive>:
 80017dc:	4770      	bx	lr

080017de <__retarget_lock_release_recursive>:
 80017de:	4770      	bx	lr

080017e0 <__swhatbuf_r>:
 80017e0:	b570      	push	{r4, r5, r6, lr}
 80017e2:	460e      	mov	r6, r1
 80017e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017e8:	2900      	cmp	r1, #0
 80017ea:	b096      	sub	sp, #88	; 0x58
 80017ec:	4614      	mov	r4, r2
 80017ee:	461d      	mov	r5, r3
 80017f0:	da07      	bge.n	8001802 <__swhatbuf_r+0x22>
 80017f2:	2300      	movs	r3, #0
 80017f4:	602b      	str	r3, [r5, #0]
 80017f6:	89b3      	ldrh	r3, [r6, #12]
 80017f8:	061a      	lsls	r2, r3, #24
 80017fa:	d410      	bmi.n	800181e <__swhatbuf_r+0x3e>
 80017fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001800:	e00e      	b.n	8001820 <__swhatbuf_r+0x40>
 8001802:	466a      	mov	r2, sp
 8001804:	f000 f9b8 	bl	8001b78 <_fstat_r>
 8001808:	2800      	cmp	r0, #0
 800180a:	dbf2      	blt.n	80017f2 <__swhatbuf_r+0x12>
 800180c:	9a01      	ldr	r2, [sp, #4]
 800180e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001812:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001816:	425a      	negs	r2, r3
 8001818:	415a      	adcs	r2, r3
 800181a:	602a      	str	r2, [r5, #0]
 800181c:	e7ee      	b.n	80017fc <__swhatbuf_r+0x1c>
 800181e:	2340      	movs	r3, #64	; 0x40
 8001820:	2000      	movs	r0, #0
 8001822:	6023      	str	r3, [r4, #0]
 8001824:	b016      	add	sp, #88	; 0x58
 8001826:	bd70      	pop	{r4, r5, r6, pc}

08001828 <__smakebuf_r>:
 8001828:	898b      	ldrh	r3, [r1, #12]
 800182a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800182c:	079d      	lsls	r5, r3, #30
 800182e:	4606      	mov	r6, r0
 8001830:	460c      	mov	r4, r1
 8001832:	d507      	bpl.n	8001844 <__smakebuf_r+0x1c>
 8001834:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001838:	6023      	str	r3, [r4, #0]
 800183a:	6123      	str	r3, [r4, #16]
 800183c:	2301      	movs	r3, #1
 800183e:	6163      	str	r3, [r4, #20]
 8001840:	b002      	add	sp, #8
 8001842:	bd70      	pop	{r4, r5, r6, pc}
 8001844:	ab01      	add	r3, sp, #4
 8001846:	466a      	mov	r2, sp
 8001848:	f7ff ffca 	bl	80017e0 <__swhatbuf_r>
 800184c:	9900      	ldr	r1, [sp, #0]
 800184e:	4605      	mov	r5, r0
 8001850:	4630      	mov	r0, r6
 8001852:	f000 f879 	bl	8001948 <_malloc_r>
 8001856:	b948      	cbnz	r0, 800186c <__smakebuf_r+0x44>
 8001858:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800185c:	059a      	lsls	r2, r3, #22
 800185e:	d4ef      	bmi.n	8001840 <__smakebuf_r+0x18>
 8001860:	f023 0303 	bic.w	r3, r3, #3
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	81a3      	strh	r3, [r4, #12]
 800186a:	e7e3      	b.n	8001834 <__smakebuf_r+0xc>
 800186c:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <__smakebuf_r+0x7c>)
 800186e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001870:	89a3      	ldrh	r3, [r4, #12]
 8001872:	6020      	str	r0, [r4, #0]
 8001874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001878:	81a3      	strh	r3, [r4, #12]
 800187a:	9b00      	ldr	r3, [sp, #0]
 800187c:	6163      	str	r3, [r4, #20]
 800187e:	9b01      	ldr	r3, [sp, #4]
 8001880:	6120      	str	r0, [r4, #16]
 8001882:	b15b      	cbz	r3, 800189c <__smakebuf_r+0x74>
 8001884:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001888:	4630      	mov	r0, r6
 800188a:	f000 f987 	bl	8001b9c <_isatty_r>
 800188e:	b128      	cbz	r0, 800189c <__smakebuf_r+0x74>
 8001890:	89a3      	ldrh	r3, [r4, #12]
 8001892:	f023 0303 	bic.w	r3, r3, #3
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	81a3      	strh	r3, [r4, #12]
 800189c:	89a0      	ldrh	r0, [r4, #12]
 800189e:	4305      	orrs	r5, r0
 80018a0:	81a5      	strh	r5, [r4, #12]
 80018a2:	e7cd      	b.n	8001840 <__smakebuf_r+0x18>
 80018a4:	08001639 	.word	0x08001639

080018a8 <_free_r>:
 80018a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80018aa:	2900      	cmp	r1, #0
 80018ac:	d048      	beq.n	8001940 <_free_r+0x98>
 80018ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80018b2:	9001      	str	r0, [sp, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f1a1 0404 	sub.w	r4, r1, #4
 80018ba:	bfb8      	it	lt
 80018bc:	18e4      	addlt	r4, r4, r3
 80018be:	f000 f98f 	bl	8001be0 <__malloc_lock>
 80018c2:	4a20      	ldr	r2, [pc, #128]	; (8001944 <_free_r+0x9c>)
 80018c4:	9801      	ldr	r0, [sp, #4]
 80018c6:	6813      	ldr	r3, [r2, #0]
 80018c8:	4615      	mov	r5, r2
 80018ca:	b933      	cbnz	r3, 80018da <_free_r+0x32>
 80018cc:	6063      	str	r3, [r4, #4]
 80018ce:	6014      	str	r4, [r2, #0]
 80018d0:	b003      	add	sp, #12
 80018d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80018d6:	f000 b989 	b.w	8001bec <__malloc_unlock>
 80018da:	42a3      	cmp	r3, r4
 80018dc:	d90b      	bls.n	80018f6 <_free_r+0x4e>
 80018de:	6821      	ldr	r1, [r4, #0]
 80018e0:	1862      	adds	r2, r4, r1
 80018e2:	4293      	cmp	r3, r2
 80018e4:	bf04      	itt	eq
 80018e6:	681a      	ldreq	r2, [r3, #0]
 80018e8:	685b      	ldreq	r3, [r3, #4]
 80018ea:	6063      	str	r3, [r4, #4]
 80018ec:	bf04      	itt	eq
 80018ee:	1852      	addeq	r2, r2, r1
 80018f0:	6022      	streq	r2, [r4, #0]
 80018f2:	602c      	str	r4, [r5, #0]
 80018f4:	e7ec      	b.n	80018d0 <_free_r+0x28>
 80018f6:	461a      	mov	r2, r3
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	b10b      	cbz	r3, 8001900 <_free_r+0x58>
 80018fc:	42a3      	cmp	r3, r4
 80018fe:	d9fa      	bls.n	80018f6 <_free_r+0x4e>
 8001900:	6811      	ldr	r1, [r2, #0]
 8001902:	1855      	adds	r5, r2, r1
 8001904:	42a5      	cmp	r5, r4
 8001906:	d10b      	bne.n	8001920 <_free_r+0x78>
 8001908:	6824      	ldr	r4, [r4, #0]
 800190a:	4421      	add	r1, r4
 800190c:	1854      	adds	r4, r2, r1
 800190e:	42a3      	cmp	r3, r4
 8001910:	6011      	str	r1, [r2, #0]
 8001912:	d1dd      	bne.n	80018d0 <_free_r+0x28>
 8001914:	681c      	ldr	r4, [r3, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	6053      	str	r3, [r2, #4]
 800191a:	4421      	add	r1, r4
 800191c:	6011      	str	r1, [r2, #0]
 800191e:	e7d7      	b.n	80018d0 <_free_r+0x28>
 8001920:	d902      	bls.n	8001928 <_free_r+0x80>
 8001922:	230c      	movs	r3, #12
 8001924:	6003      	str	r3, [r0, #0]
 8001926:	e7d3      	b.n	80018d0 <_free_r+0x28>
 8001928:	6825      	ldr	r5, [r4, #0]
 800192a:	1961      	adds	r1, r4, r5
 800192c:	428b      	cmp	r3, r1
 800192e:	bf04      	itt	eq
 8001930:	6819      	ldreq	r1, [r3, #0]
 8001932:	685b      	ldreq	r3, [r3, #4]
 8001934:	6063      	str	r3, [r4, #4]
 8001936:	bf04      	itt	eq
 8001938:	1949      	addeq	r1, r1, r5
 800193a:	6021      	streq	r1, [r4, #0]
 800193c:	6054      	str	r4, [r2, #4]
 800193e:	e7c7      	b.n	80018d0 <_free_r+0x28>
 8001940:	b003      	add	sp, #12
 8001942:	bd30      	pop	{r4, r5, pc}
 8001944:	20000084 	.word	0x20000084

08001948 <_malloc_r>:
 8001948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800194a:	1ccd      	adds	r5, r1, #3
 800194c:	f025 0503 	bic.w	r5, r5, #3
 8001950:	3508      	adds	r5, #8
 8001952:	2d0c      	cmp	r5, #12
 8001954:	bf38      	it	cc
 8001956:	250c      	movcc	r5, #12
 8001958:	2d00      	cmp	r5, #0
 800195a:	4606      	mov	r6, r0
 800195c:	db01      	blt.n	8001962 <_malloc_r+0x1a>
 800195e:	42a9      	cmp	r1, r5
 8001960:	d903      	bls.n	800196a <_malloc_r+0x22>
 8001962:	230c      	movs	r3, #12
 8001964:	6033      	str	r3, [r6, #0]
 8001966:	2000      	movs	r0, #0
 8001968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800196a:	f000 f939 	bl	8001be0 <__malloc_lock>
 800196e:	4921      	ldr	r1, [pc, #132]	; (80019f4 <_malloc_r+0xac>)
 8001970:	680a      	ldr	r2, [r1, #0]
 8001972:	4614      	mov	r4, r2
 8001974:	b99c      	cbnz	r4, 800199e <_malloc_r+0x56>
 8001976:	4f20      	ldr	r7, [pc, #128]	; (80019f8 <_malloc_r+0xb0>)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	b923      	cbnz	r3, 8001986 <_malloc_r+0x3e>
 800197c:	4621      	mov	r1, r4
 800197e:	4630      	mov	r0, r6
 8001980:	f000 f884 	bl	8001a8c <_sbrk_r>
 8001984:	6038      	str	r0, [r7, #0]
 8001986:	4629      	mov	r1, r5
 8001988:	4630      	mov	r0, r6
 800198a:	f000 f87f 	bl	8001a8c <_sbrk_r>
 800198e:	1c43      	adds	r3, r0, #1
 8001990:	d123      	bne.n	80019da <_malloc_r+0x92>
 8001992:	230c      	movs	r3, #12
 8001994:	6033      	str	r3, [r6, #0]
 8001996:	4630      	mov	r0, r6
 8001998:	f000 f928 	bl	8001bec <__malloc_unlock>
 800199c:	e7e3      	b.n	8001966 <_malloc_r+0x1e>
 800199e:	6823      	ldr	r3, [r4, #0]
 80019a0:	1b5b      	subs	r3, r3, r5
 80019a2:	d417      	bmi.n	80019d4 <_malloc_r+0x8c>
 80019a4:	2b0b      	cmp	r3, #11
 80019a6:	d903      	bls.n	80019b0 <_malloc_r+0x68>
 80019a8:	6023      	str	r3, [r4, #0]
 80019aa:	441c      	add	r4, r3
 80019ac:	6025      	str	r5, [r4, #0]
 80019ae:	e004      	b.n	80019ba <_malloc_r+0x72>
 80019b0:	6863      	ldr	r3, [r4, #4]
 80019b2:	42a2      	cmp	r2, r4
 80019b4:	bf0c      	ite	eq
 80019b6:	600b      	streq	r3, [r1, #0]
 80019b8:	6053      	strne	r3, [r2, #4]
 80019ba:	4630      	mov	r0, r6
 80019bc:	f000 f916 	bl	8001bec <__malloc_unlock>
 80019c0:	f104 000b 	add.w	r0, r4, #11
 80019c4:	1d23      	adds	r3, r4, #4
 80019c6:	f020 0007 	bic.w	r0, r0, #7
 80019ca:	1ac2      	subs	r2, r0, r3
 80019cc:	d0cc      	beq.n	8001968 <_malloc_r+0x20>
 80019ce:	1a1b      	subs	r3, r3, r0
 80019d0:	50a3      	str	r3, [r4, r2]
 80019d2:	e7c9      	b.n	8001968 <_malloc_r+0x20>
 80019d4:	4622      	mov	r2, r4
 80019d6:	6864      	ldr	r4, [r4, #4]
 80019d8:	e7cc      	b.n	8001974 <_malloc_r+0x2c>
 80019da:	1cc4      	adds	r4, r0, #3
 80019dc:	f024 0403 	bic.w	r4, r4, #3
 80019e0:	42a0      	cmp	r0, r4
 80019e2:	d0e3      	beq.n	80019ac <_malloc_r+0x64>
 80019e4:	1a21      	subs	r1, r4, r0
 80019e6:	4630      	mov	r0, r6
 80019e8:	f000 f850 	bl	8001a8c <_sbrk_r>
 80019ec:	3001      	adds	r0, #1
 80019ee:	d1dd      	bne.n	80019ac <_malloc_r+0x64>
 80019f0:	e7cf      	b.n	8001992 <_malloc_r+0x4a>
 80019f2:	bf00      	nop
 80019f4:	20000084 	.word	0x20000084
 80019f8:	20000088 	.word	0x20000088

080019fc <_putc_r>:
 80019fc:	b570      	push	{r4, r5, r6, lr}
 80019fe:	460d      	mov	r5, r1
 8001a00:	4614      	mov	r4, r2
 8001a02:	4606      	mov	r6, r0
 8001a04:	b118      	cbz	r0, 8001a0e <_putc_r+0x12>
 8001a06:	6983      	ldr	r3, [r0, #24]
 8001a08:	b90b      	cbnz	r3, 8001a0e <_putc_r+0x12>
 8001a0a:	f7ff fe49 	bl	80016a0 <__sinit>
 8001a0e:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <_putc_r+0x84>)
 8001a10:	429c      	cmp	r4, r3
 8001a12:	d124      	bne.n	8001a5e <_putc_r+0x62>
 8001a14:	6874      	ldr	r4, [r6, #4]
 8001a16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a18:	07d8      	lsls	r0, r3, #31
 8001a1a:	d405      	bmi.n	8001a28 <_putc_r+0x2c>
 8001a1c:	89a3      	ldrh	r3, [r4, #12]
 8001a1e:	0599      	lsls	r1, r3, #22
 8001a20:	d402      	bmi.n	8001a28 <_putc_r+0x2c>
 8001a22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a24:	f7ff feda 	bl	80017dc <__retarget_lock_acquire_recursive>
 8001a28:	68a3      	ldr	r3, [r4, #8]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	60a3      	str	r3, [r4, #8]
 8001a30:	da05      	bge.n	8001a3e <_putc_r+0x42>
 8001a32:	69a2      	ldr	r2, [r4, #24]
 8001a34:	4293      	cmp	r3, r2
 8001a36:	db1c      	blt.n	8001a72 <_putc_r+0x76>
 8001a38:	b2eb      	uxtb	r3, r5
 8001a3a:	2b0a      	cmp	r3, #10
 8001a3c:	d019      	beq.n	8001a72 <_putc_r+0x76>
 8001a3e:	6823      	ldr	r3, [r4, #0]
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	6022      	str	r2, [r4, #0]
 8001a44:	701d      	strb	r5, [r3, #0]
 8001a46:	b2ed      	uxtb	r5, r5
 8001a48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a4a:	07da      	lsls	r2, r3, #31
 8001a4c:	d405      	bmi.n	8001a5a <_putc_r+0x5e>
 8001a4e:	89a3      	ldrh	r3, [r4, #12]
 8001a50:	059b      	lsls	r3, r3, #22
 8001a52:	d402      	bmi.n	8001a5a <_putc_r+0x5e>
 8001a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a56:	f7ff fec2 	bl	80017de <__retarget_lock_release_recursive>
 8001a5a:	4628      	mov	r0, r5
 8001a5c:	bd70      	pop	{r4, r5, r6, pc}
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <_putc_r+0x88>)
 8001a60:	429c      	cmp	r4, r3
 8001a62:	d101      	bne.n	8001a68 <_putc_r+0x6c>
 8001a64:	68b4      	ldr	r4, [r6, #8]
 8001a66:	e7d6      	b.n	8001a16 <_putc_r+0x1a>
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <_putc_r+0x8c>)
 8001a6a:	429c      	cmp	r4, r3
 8001a6c:	bf08      	it	eq
 8001a6e:	68f4      	ldreq	r4, [r6, #12]
 8001a70:	e7d1      	b.n	8001a16 <_putc_r+0x1a>
 8001a72:	4629      	mov	r1, r5
 8001a74:	4622      	mov	r2, r4
 8001a76:	4630      	mov	r0, r6
 8001a78:	f7ff fc38 	bl	80012ec <__swbuf_r>
 8001a7c:	4605      	mov	r5, r0
 8001a7e:	e7e3      	b.n	8001a48 <_putc_r+0x4c>
 8001a80:	08001db8 	.word	0x08001db8
 8001a84:	08001dd8 	.word	0x08001dd8
 8001a88:	08001d98 	.word	0x08001d98

08001a8c <_sbrk_r>:
 8001a8c:	b538      	push	{r3, r4, r5, lr}
 8001a8e:	4d06      	ldr	r5, [pc, #24]	; (8001aa8 <_sbrk_r+0x1c>)
 8001a90:	2300      	movs	r3, #0
 8001a92:	4604      	mov	r4, r0
 8001a94:	4608      	mov	r0, r1
 8001a96:	602b      	str	r3, [r5, #0]
 8001a98:	f000 f8e8 	bl	8001c6c <_sbrk>
 8001a9c:	1c43      	adds	r3, r0, #1
 8001a9e:	d102      	bne.n	8001aa6 <_sbrk_r+0x1a>
 8001aa0:	682b      	ldr	r3, [r5, #0]
 8001aa2:	b103      	cbz	r3, 8001aa6 <_sbrk_r+0x1a>
 8001aa4:	6023      	str	r3, [r4, #0]
 8001aa6:	bd38      	pop	{r3, r4, r5, pc}
 8001aa8:	2000009c 	.word	0x2000009c

08001aac <__sread>:
 8001aac:	b510      	push	{r4, lr}
 8001aae:	460c      	mov	r4, r1
 8001ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ab4:	f000 f8a0 	bl	8001bf8 <_read_r>
 8001ab8:	2800      	cmp	r0, #0
 8001aba:	bfab      	itete	ge
 8001abc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001abe:	89a3      	ldrhlt	r3, [r4, #12]
 8001ac0:	181b      	addge	r3, r3, r0
 8001ac2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001ac6:	bfac      	ite	ge
 8001ac8:	6563      	strge	r3, [r4, #84]	; 0x54
 8001aca:	81a3      	strhlt	r3, [r4, #12]
 8001acc:	bd10      	pop	{r4, pc}

08001ace <__swrite>:
 8001ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ad2:	461f      	mov	r7, r3
 8001ad4:	898b      	ldrh	r3, [r1, #12]
 8001ad6:	05db      	lsls	r3, r3, #23
 8001ad8:	4605      	mov	r5, r0
 8001ada:	460c      	mov	r4, r1
 8001adc:	4616      	mov	r6, r2
 8001ade:	d505      	bpl.n	8001aec <__swrite+0x1e>
 8001ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f000 f868 	bl	8001bbc <_lseek_r>
 8001aec:	89a3      	ldrh	r3, [r4, #12]
 8001aee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001af2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001af6:	81a3      	strh	r3, [r4, #12]
 8001af8:	4632      	mov	r2, r6
 8001afa:	463b      	mov	r3, r7
 8001afc:	4628      	mov	r0, r5
 8001afe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b02:	f000 b817 	b.w	8001b34 <_write_r>

08001b06 <__sseek>:
 8001b06:	b510      	push	{r4, lr}
 8001b08:	460c      	mov	r4, r1
 8001b0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b0e:	f000 f855 	bl	8001bbc <_lseek_r>
 8001b12:	1c43      	adds	r3, r0, #1
 8001b14:	89a3      	ldrh	r3, [r4, #12]
 8001b16:	bf15      	itete	ne
 8001b18:	6560      	strne	r0, [r4, #84]	; 0x54
 8001b1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001b1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001b22:	81a3      	strheq	r3, [r4, #12]
 8001b24:	bf18      	it	ne
 8001b26:	81a3      	strhne	r3, [r4, #12]
 8001b28:	bd10      	pop	{r4, pc}

08001b2a <__sclose>:
 8001b2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b2e:	f000 b813 	b.w	8001b58 <_close_r>
	...

08001b34 <_write_r>:
 8001b34:	b538      	push	{r3, r4, r5, lr}
 8001b36:	4d07      	ldr	r5, [pc, #28]	; (8001b54 <_write_r+0x20>)
 8001b38:	4604      	mov	r4, r0
 8001b3a:	4608      	mov	r0, r1
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	2200      	movs	r2, #0
 8001b40:	602a      	str	r2, [r5, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	f7fe fbcb 	bl	80002de <_write>
 8001b48:	1c43      	adds	r3, r0, #1
 8001b4a:	d102      	bne.n	8001b52 <_write_r+0x1e>
 8001b4c:	682b      	ldr	r3, [r5, #0]
 8001b4e:	b103      	cbz	r3, 8001b52 <_write_r+0x1e>
 8001b50:	6023      	str	r3, [r4, #0]
 8001b52:	bd38      	pop	{r3, r4, r5, pc}
 8001b54:	2000009c 	.word	0x2000009c

08001b58 <_close_r>:
 8001b58:	b538      	push	{r3, r4, r5, lr}
 8001b5a:	4d06      	ldr	r5, [pc, #24]	; (8001b74 <_close_r+0x1c>)
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	4604      	mov	r4, r0
 8001b60:	4608      	mov	r0, r1
 8001b62:	602b      	str	r3, [r5, #0]
 8001b64:	f000 f85a 	bl	8001c1c <_close>
 8001b68:	1c43      	adds	r3, r0, #1
 8001b6a:	d102      	bne.n	8001b72 <_close_r+0x1a>
 8001b6c:	682b      	ldr	r3, [r5, #0]
 8001b6e:	b103      	cbz	r3, 8001b72 <_close_r+0x1a>
 8001b70:	6023      	str	r3, [r4, #0]
 8001b72:	bd38      	pop	{r3, r4, r5, pc}
 8001b74:	2000009c 	.word	0x2000009c

08001b78 <_fstat_r>:
 8001b78:	b538      	push	{r3, r4, r5, lr}
 8001b7a:	4d07      	ldr	r5, [pc, #28]	; (8001b98 <_fstat_r+0x20>)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	4604      	mov	r4, r0
 8001b80:	4608      	mov	r0, r1
 8001b82:	4611      	mov	r1, r2
 8001b84:	602b      	str	r3, [r5, #0]
 8001b86:	f000 f851 	bl	8001c2c <_fstat>
 8001b8a:	1c43      	adds	r3, r0, #1
 8001b8c:	d102      	bne.n	8001b94 <_fstat_r+0x1c>
 8001b8e:	682b      	ldr	r3, [r5, #0]
 8001b90:	b103      	cbz	r3, 8001b94 <_fstat_r+0x1c>
 8001b92:	6023      	str	r3, [r4, #0]
 8001b94:	bd38      	pop	{r3, r4, r5, pc}
 8001b96:	bf00      	nop
 8001b98:	2000009c 	.word	0x2000009c

08001b9c <_isatty_r>:
 8001b9c:	b538      	push	{r3, r4, r5, lr}
 8001b9e:	4d06      	ldr	r5, [pc, #24]	; (8001bb8 <_isatty_r+0x1c>)
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	4604      	mov	r4, r0
 8001ba4:	4608      	mov	r0, r1
 8001ba6:	602b      	str	r3, [r5, #0]
 8001ba8:	f000 f848 	bl	8001c3c <_isatty>
 8001bac:	1c43      	adds	r3, r0, #1
 8001bae:	d102      	bne.n	8001bb6 <_isatty_r+0x1a>
 8001bb0:	682b      	ldr	r3, [r5, #0]
 8001bb2:	b103      	cbz	r3, 8001bb6 <_isatty_r+0x1a>
 8001bb4:	6023      	str	r3, [r4, #0]
 8001bb6:	bd38      	pop	{r3, r4, r5, pc}
 8001bb8:	2000009c 	.word	0x2000009c

08001bbc <_lseek_r>:
 8001bbc:	b538      	push	{r3, r4, r5, lr}
 8001bbe:	4d07      	ldr	r5, [pc, #28]	; (8001bdc <_lseek_r+0x20>)
 8001bc0:	4604      	mov	r4, r0
 8001bc2:	4608      	mov	r0, r1
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	602a      	str	r2, [r5, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	f000 f83e 	bl	8001c4c <_lseek>
 8001bd0:	1c43      	adds	r3, r0, #1
 8001bd2:	d102      	bne.n	8001bda <_lseek_r+0x1e>
 8001bd4:	682b      	ldr	r3, [r5, #0]
 8001bd6:	b103      	cbz	r3, 8001bda <_lseek_r+0x1e>
 8001bd8:	6023      	str	r3, [r4, #0]
 8001bda:	bd38      	pop	{r3, r4, r5, pc}
 8001bdc:	2000009c 	.word	0x2000009c

08001be0 <__malloc_lock>:
 8001be0:	4801      	ldr	r0, [pc, #4]	; (8001be8 <__malloc_lock+0x8>)
 8001be2:	f7ff bdfb 	b.w	80017dc <__retarget_lock_acquire_recursive>
 8001be6:	bf00      	nop
 8001be8:	20000094 	.word	0x20000094

08001bec <__malloc_unlock>:
 8001bec:	4801      	ldr	r0, [pc, #4]	; (8001bf4 <__malloc_unlock+0x8>)
 8001bee:	f7ff bdf6 	b.w	80017de <__retarget_lock_release_recursive>
 8001bf2:	bf00      	nop
 8001bf4:	20000094 	.word	0x20000094

08001bf8 <_read_r>:
 8001bf8:	b538      	push	{r3, r4, r5, lr}
 8001bfa:	4d07      	ldr	r5, [pc, #28]	; (8001c18 <_read_r+0x20>)
 8001bfc:	4604      	mov	r4, r0
 8001bfe:	4608      	mov	r0, r1
 8001c00:	4611      	mov	r1, r2
 8001c02:	2200      	movs	r2, #0
 8001c04:	602a      	str	r2, [r5, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	f000 f828 	bl	8001c5c <_read>
 8001c0c:	1c43      	adds	r3, r0, #1
 8001c0e:	d102      	bne.n	8001c16 <_read_r+0x1e>
 8001c10:	682b      	ldr	r3, [r5, #0]
 8001c12:	b103      	cbz	r3, 8001c16 <_read_r+0x1e>
 8001c14:	6023      	str	r3, [r4, #0]
 8001c16:	bd38      	pop	{r3, r4, r5, pc}
 8001c18:	2000009c 	.word	0x2000009c

08001c1c <_close>:
 8001c1c:	4b02      	ldr	r3, [pc, #8]	; (8001c28 <_close+0xc>)
 8001c1e:	2258      	movs	r2, #88	; 0x58
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c26:	4770      	bx	lr
 8001c28:	2000009c 	.word	0x2000009c

08001c2c <_fstat>:
 8001c2c:	4b02      	ldr	r3, [pc, #8]	; (8001c38 <_fstat+0xc>)
 8001c2e:	2258      	movs	r2, #88	; 0x58
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c36:	4770      	bx	lr
 8001c38:	2000009c 	.word	0x2000009c

08001c3c <_isatty>:
 8001c3c:	4b02      	ldr	r3, [pc, #8]	; (8001c48 <_isatty+0xc>)
 8001c3e:	2258      	movs	r2, #88	; 0x58
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	2000      	movs	r0, #0
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	2000009c 	.word	0x2000009c

08001c4c <_lseek>:
 8001c4c:	4b02      	ldr	r3, [pc, #8]	; (8001c58 <_lseek+0xc>)
 8001c4e:	2258      	movs	r2, #88	; 0x58
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c56:	4770      	bx	lr
 8001c58:	2000009c 	.word	0x2000009c

08001c5c <_read>:
 8001c5c:	4b02      	ldr	r3, [pc, #8]	; (8001c68 <_read+0xc>)
 8001c5e:	2258      	movs	r2, #88	; 0x58
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c66:	4770      	bx	lr
 8001c68:	2000009c 	.word	0x2000009c

08001c6c <_sbrk>:
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <_sbrk+0x14>)
 8001c6e:	6819      	ldr	r1, [r3, #0]
 8001c70:	4602      	mov	r2, r0
 8001c72:	b909      	cbnz	r1, 8001c78 <_sbrk+0xc>
 8001c74:	4903      	ldr	r1, [pc, #12]	; (8001c84 <_sbrk+0x18>)
 8001c76:	6019      	str	r1, [r3, #0]
 8001c78:	6818      	ldr	r0, [r3, #0]
 8001c7a:	4402      	add	r2, r0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	4770      	bx	lr
 8001c80:	2000008c 	.word	0x2000008c
 8001c84:	200000a0 	.word	0x200000a0

08001c88 <_init>:
 8001c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c8a:	bf00      	nop
 8001c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c8e:	bc08      	pop	{r3}
 8001c90:	469e      	mov	lr, r3
 8001c92:	4770      	bx	lr

08001c94 <_fini>:
 8001c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c96:	bf00      	nop
 8001c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c9a:	bc08      	pop	{r3}
 8001c9c:	469e      	mov	lr, r3
 8001c9e:	4770      	bx	lr
