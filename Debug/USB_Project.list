
USB_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c30  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08001de0  08001de0  00011de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f54  08001f54  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001f54  08001f54  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f54  08001f54  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f54  08001f54  00011f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f58  08001f58  00011f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000068  08001fc4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08001fc4  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002ad6  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009f4  00000000  00000000  00022b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  00023568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000188  00000000  00000000  00023748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194a9  00000000  00000000  000238d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002181  00000000  00000000  0003cd79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cbf2  00000000  00000000  0003eefa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cbaec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f58  00000000  00000000  000cbb40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000084  00000000  00000000  000cca98  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000117  00000000  00000000  000ccb1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001dc8 	.word	0x08001dc8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08001dc8 	.word	0x08001dc8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000298:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800029c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80002a0:	f003 0301 	and.w	r3, r3, #1
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d013      	beq.n	80002d0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80002a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002ac:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80002b0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d00b      	beq.n	80002d0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002b8:	e000      	b.n	80002bc <ITM_SendChar+0x2c>
    {
      __NOP();
 80002ba:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d0f9      	beq.n	80002ba <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002c6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002d0:	687b      	ldr	r3, [r7, #4]
}
 80002d2:	4618      	mov	r0, r3
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr

080002de <_write>:

/** \brief Redirects `printf()` output to the serial wire out (SWO).
 * This function overrides a weak function symbol and is not to be used directly.
 */
int _write(int file, char *ptr, int len)
{
 80002de:	b580      	push	{r7, lr}
 80002e0:	b086      	sub	sp, #24
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	60f8      	str	r0, [r7, #12]
 80002e6:	60b9      	str	r1, [r7, #8]
 80002e8:	607a      	str	r2, [r7, #4]
  int i=0;
 80002ea:	2300      	movs	r3, #0
 80002ec:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80002ee:	2300      	movs	r3, #0
 80002f0:	617b      	str	r3, [r7, #20]
 80002f2:	e009      	b.n	8000308 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	1c5a      	adds	r2, r3, #1
 80002f8:	60ba      	str	r2, [r7, #8]
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	4618      	mov	r0, r3
 80002fe:	f7ff ffc7 	bl	8000290 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000302:	697b      	ldr	r3, [r7, #20]
 8000304:	3301      	adds	r3, #1
 8000306:	617b      	str	r3, [r7, #20]
 8000308:	697a      	ldr	r2, [r7, #20]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	429a      	cmp	r2, r3
 800030e:	dbf1      	blt.n	80002f4 <_write+0x16>

  return len;
 8000310:	687b      	ldr	r3, [r7, #4]
}
 8000312:	4618      	mov	r0, r3
 8000314:	3718      	adds	r7, #24
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <_get_log_level_string>:

char const * const _get_log_level_string(LogLevel const log_level)
{
 800031c:	b480      	push	{r7}
 800031e:	b085      	sub	sp, #20
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	71fb      	strb	r3, [r7, #7]
    char *ptr;
	switch(log_level)
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	2b02      	cmp	r3, #2
 800032a:	d00a      	beq.n	8000342 <_get_log_level_string+0x26>
 800032c:	2b02      	cmp	r3, #2
 800032e:	dc0a      	bgt.n	8000346 <_get_log_level_string+0x2a>
 8000330:	2b00      	cmp	r3, #0
 8000332:	d002      	beq.n	800033a <_get_log_level_string+0x1e>
 8000334:	2b01      	cmp	r3, #1
 8000336:	d002      	beq.n	800033e <_get_log_level_string+0x22>
 8000338:	e005      	b.n	8000346 <_get_log_level_string+0x2a>
    {
        case LOG_LEVEL_ERROR:
        	ptr = "ERROR";
 800033a:	4b06      	ldr	r3, [pc, #24]	; (8000354 <_get_log_level_string+0x38>)
 800033c:	60fb      	str	r3, [r7, #12]
        case LOG_LEVEL_INFORMATION:
        	ptr =  "INFO";
 800033e:	4b06      	ldr	r3, [pc, #24]	; (8000358 <_get_log_level_string+0x3c>)
 8000340:	60fb      	str	r3, [r7, #12]
        case LOG_LEVEL_DEBUG:
        	ptr =  "DEBUG";
 8000342:	4b06      	ldr	r3, [pc, #24]	; (800035c <_get_log_level_string+0x40>)
 8000344:	60fb      	str	r3, [r7, #12]
    }
	return ptr;
 8000346:	68fb      	ldr	r3, [r7, #12]
}
 8000348:	4618      	mov	r0, r3
 800034a:	3714      	adds	r7, #20
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	08001de0 	.word	0x08001de0
 8000358:	08001de8 	.word	0x08001de8
 800035c:	08001df0 	.word	0x08001df0

08000360 <_log>:

static void _log(LogLevel const log_level, char const * const format, va_list args)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	60b9      	str	r1, [r7, #8]
 800036a:	607a      	str	r2, [r7, #4]
 800036c:	73fb      	strb	r3, [r7, #15]
    if (log_level > system_log_level){
 800036e:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <_log+0x4c>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	7bfa      	ldrb	r2, [r7, #15]
 8000374:	429a      	cmp	r2, r3
 8000376:	d814      	bhi.n	80003a2 <_log+0x42>
        return;
    }

	printf("[%s] ", _get_log_level_string(log_level));
 8000378:	7bfb      	ldrb	r3, [r7, #15]
 800037a:	4618      	mov	r0, r3
 800037c:	f7ff ffce 	bl	800031c <_get_log_level_string>
 8000380:	4603      	mov	r3, r0
 8000382:	4619      	mov	r1, r3
 8000384:	480a      	ldr	r0, [pc, #40]	; (80003b0 <_log+0x50>)
 8000386:	f001 f823 	bl	80013d0 <iprintf>
	vfprintf(stdout, format, args);
 800038a:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <_log+0x54>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	68b9      	ldr	r1, [r7, #8]
 8000394:	4618      	mov	r0, r3
 8000396:	f000 fe7d 	bl	8001094 <vfiprintf>
	printf("\n");
 800039a:	200a      	movs	r0, #10
 800039c:	f001 f830 	bl	8001400 <putchar>
 80003a0:	e000      	b.n	80003a4 <_log+0x44>
        return;
 80003a2:	bf00      	nop
}
 80003a4:	3710      	adds	r7, #16
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	20000000 	.word	0x20000000
 80003b0:	08001df8 	.word	0x08001df8
 80003b4:	20000004 	.word	0x20000004

080003b8 <log_info>:
    _log(LOG_LEVEL_ERROR, format, args);
    va_end(args);
}

void log_info(char const * const format, ...)
{
 80003b8:	b40f      	push	{r0, r1, r2, r3}
 80003ba:	b580      	push	{r7, lr}
 80003bc:	b082      	sub	sp, #8
 80003be:	af00      	add	r7, sp, #0
    va_list args;
	va_start(args, format);
 80003c0:	f107 0314 	add.w	r3, r7, #20
 80003c4:	607b      	str	r3, [r7, #4]
    _log(LOG_LEVEL_INFORMATION, format, args);
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	6939      	ldr	r1, [r7, #16]
 80003ca:	2001      	movs	r0, #1
 80003cc:	f7ff ffc8 	bl	8000360 <_log>
    va_end(args);
}
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80003da:	b004      	add	sp, #16
 80003dc:	4770      	bx	lr
	...

080003e0 <main>:

UsbDevice usb_device;
uint32_t buffer[8];

int main(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	log_info("Program Entry-Point");
 80003e4:	4805      	ldr	r0, [pc, #20]	; (80003fc <main+0x1c>)
 80003e6:	f7ff ffe7 	bl	80003b8 <log_info>
	usb_device.ptr_out_buffer = &buffer;
 80003ea:	4b05      	ldr	r3, [pc, #20]	; (8000400 <main+0x20>)
 80003ec:	4a05      	ldr	r2, [pc, #20]	; (8000404 <main+0x24>)
 80003ee:	605a      	str	r2, [r3, #4]

	usbd_initialize(&usb_device);
 80003f0:	4803      	ldr	r0, [pc, #12]	; (8000400 <main+0x20>)
 80003f2:	f000 fc15 	bl	8000c20 <usbd_initialize>
    /* Loop forever */
	for(;;)
	{
		usbd_poll();
 80003f6:	f000 fc59 	bl	8000cac <usbd_poll>
 80003fa:	e7fc      	b.n	80003f6 <main+0x16>
 80003fc:	08001e20 	.word	0x08001e20
 8000400:	20000094 	.word	0x20000094
 8000404:	200000a8 	.word	0x200000a8

08000408 <configure_clock>:

LogLevel system_log_level = LOG_LEVEL_DEBUG;
uint32_t SystemCoreClock = 72000000; // 72 MHz

static void configure_clock()
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
	// Configures flash latency.
	MODIFY_REG(FLASH->ACR,
 800040c:	4b25      	ldr	r3, [pc, #148]	; (80004a4 <configure_clock+0x9c>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	f023 0307 	bic.w	r3, r3, #7
 8000414:	4a23      	ldr	r2, [pc, #140]	; (80004a4 <configure_clock+0x9c>)
 8000416:	f043 0302 	orr.w	r3, r3, #2
 800041a:	6013      	str	r3, [r2, #0]
		FLASH_ACR_LATENCY,
		_VAL2FLD(FLASH_ACR_LATENCY, FLASH_ACR_LATENCY_2WS) //FLASH_ACR_LATENCY_2WS << FLASH_ACR_LATENCY_Pos
	);

	// Enables HSE.
	SET_BIT(RCC->CR, RCC_CR_HSEON);
 800041c:	4b22      	ldr	r3, [pc, #136]	; (80004a8 <configure_clock+0xa0>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a21      	ldr	r2, [pc, #132]	; (80004a8 <configure_clock+0xa0>)
 8000422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000426:	6013      	str	r3, [r2, #0]

	// Waits until HSE is stable.
	while (!READ_BIT(RCC->CR, RCC_CR_HSERDY));
 8000428:	bf00      	nop
 800042a:	4b1f      	ldr	r3, [pc, #124]	; (80004a8 <configure_clock+0xa0>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000432:	2b00      	cmp	r3, #0
 8000434:	d0f9      	beq.n	800042a <configure_clock+0x22>

	// Configures PLL: source = HSE, PLLCLK = 72MHz.
	MODIFY_REG(RCC->PLLCFGR,
 8000436:	4b1c      	ldr	r3, [pc, #112]	; (80004a8 <configure_clock+0xa0>)
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	4a1c      	ldr	r2, [pc, #112]	; (80004ac <configure_clock+0xa4>)
 800043c:	401a      	ands	r2, r3
 800043e:	491a      	ldr	r1, [pc, #104]	; (80004a8 <configure_clock+0xa0>)
 8000440:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <configure_clock+0xa8>)
 8000442:	4313      	orrs	r3, r2
 8000444:	604b      	str	r3, [r1, #4]
		RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ | RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLP,
		_VAL2FLD(RCC_PLLCFGR_PLLM, 4) | _VAL2FLD(RCC_PLLCFGR_PLLN, 72) | _VAL2FLD(RCC_PLLCFGR_PLLQ, 3) | RCC_PLLCFGR_PLLSRC_HSE
	);

	// Enables PLL module.
	SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000446:	4b18      	ldr	r3, [pc, #96]	; (80004a8 <configure_clock+0xa0>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4a17      	ldr	r2, [pc, #92]	; (80004a8 <configure_clock+0xa0>)
 800044c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000450:	6013      	str	r3, [r2, #0]

	// Waits until PLL is stable.
	while (!READ_BIT(RCC->CR, RCC_CR_PLLRDY));
 8000452:	bf00      	nop
 8000454:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <configure_clock+0xa0>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800045c:	2b00      	cmp	r3, #0
 800045e:	d0f9      	beq.n	8000454 <configure_clock+0x4c>

	// Switches system clock to PLL.
	MODIFY_REG(RCC->CFGR,
 8000460:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <configure_clock+0xa0>)
 8000462:	689b      	ldr	r3, [r3, #8]
 8000464:	f023 0303 	bic.w	r3, r3, #3
 8000468:	4a0f      	ldr	r2, [pc, #60]	; (80004a8 <configure_clock+0xa0>)
 800046a:	f043 0302 	orr.w	r3, r3, #2
 800046e:	6093      	str	r3, [r2, #8]
		RCC_CFGR_SW,
		_VAL2FLD(RCC_CFGR_SW, RCC_CFGR_SW_PLL)
	);

	// Configures PPRE1 = 2, (PPRE2 = 1, HPRE = 1 by default).
	MODIFY_REG(RCC->CFGR,
 8000470:	4b0d      	ldr	r3, [pc, #52]	; (80004a8 <configure_clock+0xa0>)
 8000472:	689b      	ldr	r3, [r3, #8]
 8000474:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000478:	4a0b      	ldr	r2, [pc, #44]	; (80004a8 <configure_clock+0xa0>)
 800047a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800047e:	6093      	str	r3, [r2, #8]
		RCC_CFGR_PPRE1,
		_VAL2FLD(RCC_CFGR_PPRE1, 4)
	);

	// Waits until PLL is used.
	while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000480:	bf00      	nop
 8000482:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <configure_clock+0xa0>)
 8000484:	689b      	ldr	r3, [r3, #8]
 8000486:	f003 030c 	and.w	r3, r3, #12
 800048a:	2b08      	cmp	r3, #8
 800048c:	d1f9      	bne.n	8000482 <configure_clock+0x7a>

	// Disables HSI.
	CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800048e:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <configure_clock+0xa0>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a05      	ldr	r2, [pc, #20]	; (80004a8 <configure_clock+0xa0>)
 8000494:	f023 0301 	bic.w	r3, r3, #1
 8000498:	6013      	str	r3, [r2, #0]
}
 800049a:	bf00      	nop
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	40023c00 	.word	0x40023c00
 80004a8:	40023800 	.word	0x40023800
 80004ac:	f0bc8000 	.word	0xf0bc8000
 80004b0:	03401204 	.word	0x03401204

080004b4 <SystemInit>:
		_VAL2FLD(GPIO_MODER_MODER8, 2)
	);
}

void SystemInit(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
//	configure_mco1();
	configure_clock();
 80004b8:	f7ff ffa6 	bl	8000408 <configure_clock>
}
 80004bc:	bf00      	nop
 80004be:	bd80      	pop	{r7, pc}

080004c0 <IN_ENDPOINT>:

/** \brief Returns the structure contains the registers of a specific IN endpoint.
 * \param endpoint_number The number of the IN endpoint we want to access its registers.
 */
inline static USB_OTG_INEndpointTypeDef * IN_ENDPOINT(uint8_t endpoint_number)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
    return (USB_OTG_INEndpointTypeDef *)(USB_OTG_FS_PERIPH_BASE + USB_OTG_IN_ENDPOINT_BASE + (endpoint_number * 0x20));
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	015b      	lsls	r3, r3, #5
 80004ce:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
 80004d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr

080004e2 <OUT_ENDPOINT>:

/** \brief Returns the structure contains the registers of a specific OUT endpoint.
 * \param endpoint_number The number of the OUT endpoint we want to access its registers.
 */
inline static USB_OTG_OUTEndpointTypeDef * OUT_ENDPOINT(uint8_t endpoint_number)
{
 80004e2:	b480      	push	{r7}
 80004e4:	b083      	sub	sp, #12
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	4603      	mov	r3, r0
 80004ea:	71fb      	strb	r3, [r7, #7]
    return (USB_OTG_OUTEndpointTypeDef *)(USB_OTG_FS_PERIPH_BASE + USB_OTG_OUT_ENDPOINT_BASE + (endpoint_number * 0x20));
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	015b      	lsls	r3, r3, #5
 80004f0:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
 80004f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <FIFO>:

inline static __IO uint32_t *FIFO(uint8_t endpoint_number)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
    return (__IO uint32_t *)(USB_OTG_FS_PERIPH_BASE + USB_OTG_FIFO_BASE + (endpoint_number * 0x1000));
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	031b      	lsls	r3, r3, #12
 8000512:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
 8000516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
}
 800051a:	4618      	mov	r0, r3
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
	...

08000528 <initialize_gpio_pins>:
#include "logger.h"
#include "usb_driver.h"
#include "usb_standards.h"

static void initialize_gpio_pins()
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
	// Enables the clock for GPIOA.
	SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOAEN);
 800052c:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <initialize_gpio_pins+0x3c>)
 800052e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000530:	4a0c      	ldr	r2, [pc, #48]	; (8000564 <initialize_gpio_pins+0x3c>)
 8000532:	f043 0301 	orr.w	r3, r3, #1
 8000536:	6313      	str	r3, [r2, #48]	; 0x30

	// Sets alternate function 10 for: PA11 (-), and PA12 (+).
	MODIFY_REG(GPIOA->AFR[1],
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <initialize_gpio_pins+0x40>)
 800053a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800053c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8000540:	4a09      	ldr	r2, [pc, #36]	; (8000568 <initialize_gpio_pins+0x40>)
 8000542:	f443 232a 	orr.w	r3, r3, #696320	; 0xaa000
 8000546:	6253      	str	r3, [r2, #36]	; 0x24
		GPIO_AFRH_AFSEL11 | GPIO_AFRH_AFSEL12,
		_VAL2FLD(GPIO_AFRH_AFSEL11, 0xA) | _VAL2FLD(GPIO_AFRH_AFSEL12, 0xA)
	);

	// Configures USB pins (in GPIOA) to work in alternate function mode.
	MODIFY_REG(GPIOA->MODER,
 8000548:	4b07      	ldr	r3, [pc, #28]	; (8000568 <initialize_gpio_pins+0x40>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f023 7370 	bic.w	r3, r3, #62914560	; 0x3c00000
 8000550:	4a05      	ldr	r2, [pc, #20]	; (8000568 <initialize_gpio_pins+0x40>)
 8000552:	f043 7320 	orr.w	r3, r3, #41943040	; 0x2800000
 8000556:	6013      	str	r3, [r2, #0]
		GPIO_MODER_MODER11 | GPIO_MODER_MODER12,
		_VAL2FLD(GPIO_MODER_MODER11, 2) | _VAL2FLD(GPIO_MODER_MODER12, 2)
	);
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40023800 	.word	0x40023800
 8000568:	40020000 	.word	0x40020000

0800056c <initialize_core>:

static void initialize_core()
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
	// Enables the clock for USB core FullSpeed
	SET_BIT(RCC->AHB2ENR, RCC_AHB2ENR_OTGFSEN);
 8000570:	4b1d      	ldr	r3, [pc, #116]	; (80005e8 <initialize_core+0x7c>)
 8000572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000574:	4a1c      	ldr	r2, [pc, #112]	; (80005e8 <initialize_core+0x7c>)
 8000576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800057a:	6353      	str	r3, [r2, #52]	; 0x34

	// Configures the USB core to run in device mode, and to use the embedded full-speed PHY.
	MODIFY_REG(USB_OTG_FS->GUSBCFG,
 800057c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000580:	68db      	ldr	r3, [r3, #12]
 8000582:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000586:	f423 5371 	bic.w	r3, r3, #15424	; 0x3c40
 800058a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800058e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000592:	f443 5311 	orr.w	r3, r3, #9280	; 0x2440
 8000596:	60d3      	str	r3, [r2, #12]
		USB_OTG_GUSBCFG_FDMOD | USB_OTG_GUSBCFG_PHYSEL | USB_OTG_GUSBCFG_TRDT,
		USB_OTG_GUSBCFG_FDMOD | USB_OTG_GUSBCFG_PHYSEL | _VAL2FLD(USB_OTG_GUSBCFG_TRDT, 0x09)
	);

	// Configures the device to run in full speed mode.
	MODIFY_REG(USB_OTG_FS_DEVICE->DCFG,
 8000598:	4b14      	ldr	r3, [pc, #80]	; (80005ec <initialize_core+0x80>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a13      	ldr	r2, [pc, #76]	; (80005ec <initialize_core+0x80>)
 800059e:	f043 0303 	orr.w	r3, r3, #3
 80005a2:	6013      	str	r3, [r2, #0]
		USB_OTG_DCFG_DSPD,
		_VAL2FLD(USB_OTG_DCFG_DSPD, 0x03)
	);

	// Enables VBUS sensing device.
	SET_BIT(USB_OTG_FS->GCCFG, USB_OTG_GCCFG_VBUSBSEN);
 80005a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80005a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80005ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005b2:	6393      	str	r3, [r2, #56]	; 0x38

	// Unmasks the main USB core interrupts.
	SET_BIT(USB_OTG_FS->GINTMSK,
 80005b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80005b8:	699a      	ldr	r2, [r3, #24]
 80005ba:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80005be:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <initialize_core+0x84>)
 80005c0:	4313      	orrs	r3, r2
 80005c2:	618b      	str	r3, [r1, #24]
		USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_WUIM | USB_OTG_GINTMSK_IEPINT |
		USB_OTG_GINTSTS_OEPINT | USB_OTG_GINTMSK_RXFLVLM
	);

	// Clears all pending core interrupts.
	WRITE_REG(USB_OTG_FS->GINTSTS, 0xFFFFFFFF);
 80005c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80005c8:	f04f 32ff 	mov.w	r2, #4294967295
 80005cc:	615a      	str	r2, [r3, #20]

	// Unmasks USB global interrupt.
	SET_BIT(USB_OTG_FS->GAHBCFG, USB_OTG_GAHBCFG_GINT);
 80005ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6093      	str	r3, [r2, #8]

}
 80005de:	bf00      	nop
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	40023800 	.word	0x40023800
 80005ec:	50000800 	.word	0x50000800
 80005f0:	800c3818 	.word	0x800c3818

080005f4 <connect>:

/** \brief Connects the USB device to the bus.
 */
static void connect()
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
	// Powers the transceivers on.
    SET_BIT(USB_OTG_FS->GCCFG, USB_OTG_GCCFG_PWRDWN);
 80005f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80005fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000606:	6393      	str	r3, [r2, #56]	; 0x38

	// Connects the device to the bus.
    CLEAR_BIT(USB_OTG_FS_DEVICE->DCTL, USB_OTG_DCTL_SDIS);
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <connect+0x2c>)
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	4a04      	ldr	r2, [pc, #16]	; (8000620 <connect+0x2c>)
 800060e:	f023 0302 	bic.w	r3, r3, #2
 8000612:	6053      	str	r3, [r2, #4]
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	50000800 	.word	0x50000800

08000624 <disconnect>:

/** \brief Disconnects the USB device from the bus.
 */
static void disconnect()
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
	// Disconnects the device from the bus.
	SET_BIT(USB_OTG_FS_DEVICE->DCTL, USB_OTG_DCTL_SDIS);
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <disconnect+0x44>)
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	4a0e      	ldr	r2, [pc, #56]	; (8000668 <disconnect+0x44>)
 800062e:	f043 0302 	orr.w	r3, r3, #2
 8000632:	6053      	str	r3, [r2, #4]

	// Powers the transceivers off.
	CLEAR_BIT(USB_OTG_FS->GCCFG, USB_OTG_GCCFG_PWRDWN);
 8000634:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800063a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800063e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000642:	6393      	str	r3, [r2, #56]	; 0x38

	// Unmasks transfer completed interrupts for all endpoints.
	SET_BIT(USB_OTG_FS_DEVICE->DOEPMSK, USB_OTG_DOEPMSK_XFRCM);
 8000644:	4b08      	ldr	r3, [pc, #32]	; (8000668 <disconnect+0x44>)
 8000646:	695b      	ldr	r3, [r3, #20]
 8000648:	4a07      	ldr	r2, [pc, #28]	; (8000668 <disconnect+0x44>)
 800064a:	f043 0301 	orr.w	r3, r3, #1
 800064e:	6153      	str	r3, [r2, #20]
	SET_BIT(USB_OTG_FS_DEVICE->DIEPMSK, USB_OTG_DIEPMSK_XFRCM);
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <disconnect+0x44>)
 8000652:	691b      	ldr	r3, [r3, #16]
 8000654:	4a04      	ldr	r2, [pc, #16]	; (8000668 <disconnect+0x44>)
 8000656:	f043 0301 	orr.w	r3, r3, #1
 800065a:	6113      	str	r3, [r2, #16]
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	50000800 	.word	0x50000800

0800066c <set_device_address>:

static void set_device_address(uint8_t address)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
    MODIFY_REG(
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <set_device_address+0x2c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	011b      	lsls	r3, r3, #4
 8000682:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8000686:	4904      	ldr	r1, [pc, #16]	; (8000698 <set_device_address+0x2c>)
 8000688:	4313      	orrs	r3, r2
 800068a:	600b      	str	r3, [r1, #0]
		USB_OTG_FS_DEVICE->DCFG,
		USB_OTG_DCFG_DAD,
		_VAL2FLD(USB_OTG_DCFG_DAD, address)
	);
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	50000800 	.word	0x50000800

0800069c <read_packet>:
/** \brief Pops data from the RxFIFO and stores it in the buffer.
 * \param buffer Pointer to the buffer, in which the popped data will be stored.
 * \param size Count of bytes to be popped from the dedicated RxFIFO memory.
 */
static void read_packet(void *buffer, uint16_t size)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	460b      	mov	r3, r1
 80006a6:	807b      	strh	r3, [r7, #2]
	// Note: There is only one RxFIFO.
	uint32_t *fifo = FIFO(0);
 80006a8:	2000      	movs	r0, #0
 80006aa:	f7ff ff2b 	bl	8000504 <FIFO>
 80006ae:	6138      	str	r0, [r7, #16]

	for (; size >= 4; size -=4, buffer += 4)
 80006b0:	e00b      	b.n	80006ca <read_packet+0x2e>
	{
		// Pops one 32-bit word of data (until there is less than one word remaining).
		uint32_t data = *fifo;
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	60fb      	str	r3, [r7, #12]
		// Stores the data in the buffer.
		*((uint32_t*)buffer) = data;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	68fa      	ldr	r2, [r7, #12]
 80006bc:	601a      	str	r2, [r3, #0]
	for (; size >= 4; size -=4, buffer += 4)
 80006be:	887b      	ldrh	r3, [r7, #2]
 80006c0:	3b04      	subs	r3, #4
 80006c2:	807b      	strh	r3, [r7, #2]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	3304      	adds	r3, #4
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	887b      	ldrh	r3, [r7, #2]
 80006cc:	2b03      	cmp	r3, #3
 80006ce:	d8f0      	bhi.n	80006b2 <read_packet+0x16>
	}

	if (size > 0)
 80006d0:	887b      	ldrh	r3, [r7, #2]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d013      	beq.n	80006fe <read_packet+0x62>
	{
		// Pops the last remaining bytes (which are less than one word).
		uint32_t data = *fifo;
 80006d6:	693b      	ldr	r3, [r7, #16]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	617b      	str	r3, [r7, #20]

		for(; size > 0; size--, buffer++, data >>= 8)
 80006dc:	e00c      	b.n	80006f8 <read_packet+0x5c>
		{
			// Stores the data in the buffer with the correct alignment.
			*((uint8_t*)buffer) = 0xFF & data;
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	701a      	strb	r2, [r3, #0]
		for(; size > 0; size--, buffer++, data >>= 8)
 80006e6:	887b      	ldrh	r3, [r7, #2]
 80006e8:	3b01      	subs	r3, #1
 80006ea:	807b      	strh	r3, [r7, #2]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	3301      	adds	r3, #1
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	0a1b      	lsrs	r3, r3, #8
 80006f6:	617b      	str	r3, [r7, #20]
 80006f8:	887b      	ldrh	r3, [r7, #2]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d1ef      	bne.n	80006de <read_packet+0x42>
		}
	}
}
 80006fe:	bf00      	nop
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <write_packet>:
 * \param endpoint_number The number of the endpoint, to which the data will be written.
 * \param buffer Pointer to the buffer contains the data to be written to the endpoint.
 * \param size The size of data to be written in bytes.
 */
static void write_packet(uint8_t endpoint_number, void const *buffer, uint16_t size)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	b084      	sub	sp, #16
 800070a:	af00      	add	r7, sp, #0
 800070c:	4603      	mov	r3, r0
 800070e:	6039      	str	r1, [r7, #0]
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	4613      	mov	r3, r2
 8000714:	80bb      	strh	r3, [r7, #4]
	uint32_t *fifo = FIFO(endpoint_number);
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff fef3 	bl	8000504 <FIFO>
 800071e:	60f8      	str	r0, [r7, #12]
	USB_OTG_INEndpointTypeDef *in_endpoint = IN_ENDPOINT(endpoint_number);
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff fecc 	bl	80004c0 <IN_ENDPOINT>
 8000728:	60b8      	str	r0, [r7, #8]

	// Configures the transmission (1 packet that has `size` bytes).
	MODIFY_REG(in_endpoint->DIEPTSIZ,
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	691b      	ldr	r3, [r3, #16]
 800072e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8000732:	88bb      	ldrh	r3, [r7, #4]
 8000734:	4313      	orrs	r3, r2
 8000736:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	611a      	str	r2, [r3, #16]
		USB_OTG_DIEPTSIZ_PKTCNT | USB_OTG_DIEPTSIZ_XFRSIZ,
		_VAL2FLD(USB_OTG_DIEPTSIZ_PKTCNT, 1) | _VAL2FLD(USB_OTG_DIEPTSIZ_XFRSIZ, size)
	);

	// Enables the transmission after clearing both STALL and NAK of the endpoint.
	MODIFY_REG(in_endpoint->DIEPCTL,
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f023 4304 	bic.w	r3, r3, #2214592512	; 0x84000000
 8000746:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800074a:	f043 4204 	orr.w	r2, r3, #2214592512	; 0x84000000
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	601a      	str	r2, [r3, #0]
		USB_OTG_DIEPCTL_STALL,
		USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA
	);

	// Gets the size in term of 32-bit words (to avoid integer overflow in the loop).
	size = (size + 3) / 4;
 8000752:	88bb      	ldrh	r3, [r7, #4]
 8000754:	3303      	adds	r3, #3
 8000756:	2b00      	cmp	r3, #0
 8000758:	da00      	bge.n	800075c <write_packet+0x56>
 800075a:	3303      	adds	r3, #3
 800075c:	109b      	asrs	r3, r3, #2
 800075e:	80bb      	strh	r3, [r7, #4]

	for (; size > 0; size--, buffer += 4)
 8000760:	e009      	b.n	8000776 <write_packet+0x70>
	{
		// Pushes the data to the TxFIFO.
		*fifo = *((uint32_t *)buffer);
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	601a      	str	r2, [r3, #0]
	for (; size > 0; size--, buffer += 4)
 800076a:	88bb      	ldrh	r3, [r7, #4]
 800076c:	3b01      	subs	r3, #1
 800076e:	80bb      	strh	r3, [r7, #4]
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	3304      	adds	r3, #4
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	88bb      	ldrh	r3, [r7, #4]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1f2      	bne.n	8000762 <write_packet+0x5c>
	}
}
 800077c:	bf00      	nop
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <refresh_fifo_start_addresses>:


/** \brief Updates the start addresses of all FIFOs according to the size of each FIFO.
 */
static void refresh_fifo_start_addresses()
{
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
	// The first changeable start address begins after the region of RxFIFO.
	uint16_t start_address = _FLD2VAL(USB_OTG_GRXFSIZ_RXFD, USB_OTG_FS->GRXFSIZ) * 4;
 800078c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000792:	b29b      	uxth	r3, r3
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	80fb      	strh	r3, [r7, #6]

	// Updates the start address of the TxFIFO0.
	MODIFY_REG(USB_OTG_FS->DIEPTXF0_HNPTXFSIZ,
 8000798:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800079c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800079e:	0c1b      	lsrs	r3, r3, #16
 80007a0:	041b      	lsls	r3, r3, #16
 80007a2:	88fa      	ldrh	r2, [r7, #6]
 80007a4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80007a8:	4313      	orrs	r3, r2
 80007aa:	628b      	str	r3, [r1, #40]	; 0x28
		USB_OTG_TX0FSA,
		_VAL2FLD(USB_OTG_TX0FSA, start_address)
	);

	// The next start address is after where the last TxFIFO ends.
	start_address += _FLD2VAL(USB_OTG_TX0FD, USB_OTG_FS->DIEPTXF0_HNPTXFSIZ) * 4;
 80007ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80007b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007b2:	0c1b      	lsrs	r3, r3, #16
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	88fb      	ldrh	r3, [r7, #6]
 80007bc:	4413      	add	r3, r2
 80007be:	80fb      	strh	r3, [r7, #6]

	// Updates the start addresses of the rest TxFIFOs.
	for (uint8_t txfifo_number = 0; txfifo_number < ENDPOINT_COUNT - 1; txfifo_number++)
 80007c0:	2300      	movs	r3, #0
 80007c2:	717b      	strb	r3, [r7, #5]
 80007c4:	e023      	b.n	800080e <refresh_fifo_start_addresses+0x88>
	{
		MODIFY_REG(USB_OTG_FS->DIEPTXF[txfifo_number],
 80007c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007ca:	797b      	ldrb	r3, [r7, #5]
 80007cc:	3340      	adds	r3, #64	; 0x40
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	4413      	add	r3, r2
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	0c1b      	lsrs	r3, r3, #16
 80007d6:	041b      	lsls	r3, r3, #16
 80007d8:	88fa      	ldrh	r2, [r7, #6]
 80007da:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80007de:	7979      	ldrb	r1, [r7, #5]
 80007e0:	431a      	orrs	r2, r3
 80007e2:	f101 0340 	add.w	r3, r1, #64	; 0x40
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	4403      	add	r3, r0
 80007ea:	605a      	str	r2, [r3, #4]
			USB_OTG_NPTXFSA,
			_VAL2FLD(USB_OTG_NPTXFSA, start_address)
		);

		start_address += _FLD2VAL(USB_OTG_NPTXFD, USB_OTG_FS->DIEPTXF[txfifo_number]) * 4;
 80007ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007f0:	797b      	ldrb	r3, [r7, #5]
 80007f2:	3340      	adds	r3, #64	; 0x40
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	4413      	add	r3, r2
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	0c1b      	lsrs	r3, r3, #16
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	b29a      	uxth	r2, r3
 8000802:	88fb      	ldrh	r3, [r7, #6]
 8000804:	4413      	add	r3, r2
 8000806:	80fb      	strh	r3, [r7, #6]
	for (uint8_t txfifo_number = 0; txfifo_number < ENDPOINT_COUNT - 1; txfifo_number++)
 8000808:	797b      	ldrb	r3, [r7, #5]
 800080a:	3301      	adds	r3, #1
 800080c:	717b      	strb	r3, [r7, #5]
 800080e:	797b      	ldrb	r3, [r7, #5]
 8000810:	2b04      	cmp	r3, #4
 8000812:	d9d8      	bls.n	80007c6 <refresh_fifo_start_addresses+0x40>
	}
}
 8000814:	bf00      	nop
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <configure_rxfifo_size>:
/** \brief Configures the RxFIFO of all OUT endpoints.
 * \param size The size of the largest OUT endpoint in bytes.
 * \note The RxFIFO is shared between all OUT endpoints.
 */
static void configure_rxfifo_size(uint16_t size)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
 8000828:	4603      	mov	r3, r0
 800082a:	80fb      	strh	r3, [r7, #6]
	// Considers the space required to save status packets in RxFIFO and gets the size in term of 32-bit words.
	size = 10 + (2 * ((size / 4) + 1));
 800082c:	88fb      	ldrh	r3, [r7, #6]
 800082e:	089b      	lsrs	r3, r3, #2
 8000830:	b29b      	uxth	r3, r3
 8000832:	3306      	adds	r3, #6
 8000834:	b29b      	uxth	r3, r3
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	80fb      	strh	r3, [r7, #6]

	// Configures the depth of the FIFO.
	MODIFY_REG(USB_OTG_FS->GRXFSIZ,
 800083a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800083e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000840:	0c1b      	lsrs	r3, r3, #16
 8000842:	041b      	lsls	r3, r3, #16
 8000844:	88fa      	ldrh	r2, [r7, #6]
 8000846:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800084a:	4313      	orrs	r3, r2
 800084c:	624b      	str	r3, [r1, #36]	; 0x24
		USB_OTG_GRXFSIZ_RXFD,
		_VAL2FLD(USB_OTG_GRXFSIZ_RXFD, size)
	);

	refresh_fifo_start_addresses();
 800084e:	f7ff ff9a 	bl	8000786 <refresh_fifo_start_addresses>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <configure_txfifo_size>:
 * \param endpoint_number The number of the IN endpoint we want to configure its TxFIFO
 * \param size The size of the IN endpoint in bytes.
 * \note Any change on any FIFO will update the the registers of all TxFIFOs to adapt the start offsets in the FIFO dedicated memory.
 */
static void configure_txfifo_size(uint8_t endpoint_number, uint16_t size)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	4603      	mov	r3, r0
 8000862:	460a      	mov	r2, r1
 8000864:	71fb      	strb	r3, [r7, #7]
 8000866:	4613      	mov	r3, r2
 8000868:	80bb      	strh	r3, [r7, #4]
	// Gets the FIFO size in term of 32-bit words.
	size = (size + 3) / 4;
 800086a:	88bb      	ldrh	r3, [r7, #4]
 800086c:	3303      	adds	r3, #3
 800086e:	2b00      	cmp	r3, #0
 8000870:	da00      	bge.n	8000874 <configure_txfifo_size+0x1a>
 8000872:	3303      	adds	r3, #3
 8000874:	109b      	asrs	r3, r3, #2
 8000876:	80bb      	strh	r3, [r7, #4]

	// Configures the depth of the TxFIFO.
	if (endpoint_number == 0)
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d10a      	bne.n	8000894 <configure_txfifo_size+0x3a>
	{
		MODIFY_REG(USB_OTG_FS->DIEPTXF0_HNPTXFSIZ,
 800087e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000884:	b29a      	uxth	r2, r3
 8000886:	88bb      	ldrh	r3, [r7, #4]
 8000888:	041b      	lsls	r3, r3, #16
 800088a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800088e:	4313      	orrs	r3, r2
 8000890:	628b      	str	r3, [r1, #40]	; 0x28
 8000892:	e013      	b.n	80008bc <configure_txfifo_size+0x62>
			_VAL2FLD(USB_OTG_TX0FD, size)
		);
	}
	else
	{
		MODIFY_REG(USB_OTG_FS->DIEPTXF[endpoint_number - 1],
 8000894:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	3b01      	subs	r3, #1
 800089c:	3340      	adds	r3, #64	; 0x40
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	4413      	add	r3, r2
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	b299      	uxth	r1, r3
 80008a6:	88bb      	ldrh	r3, [r7, #4]
 80008a8:	041a      	lsls	r2, r3, #16
 80008aa:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	3b01      	subs	r3, #1
 80008b2:	430a      	orrs	r2, r1
 80008b4:	3340      	adds	r3, #64	; 0x40
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	4403      	add	r3, r0
 80008ba:	605a      	str	r2, [r3, #4]
			USB_OTG_NPTXFD,
			_VAL2FLD(USB_OTG_NPTXFD, size)
		);
	}

	refresh_fifo_start_addresses();
 80008bc:	f7ff ff63 	bl	8000786 <refresh_fifo_start_addresses>
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <flush_rxfifo>:

/** \brief Flushes the RxFIFO of all OUT endpoints.
 */
static void flush_rxfifo()
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
	SET_BIT(USB_OTG_FS->GRSTCTL, USB_OTG_GRSTCTL_RXFFLSH);
 80008cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80008d0:	691b      	ldr	r3, [r3, #16]
 80008d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008d6:	f043 0310 	orr.w	r3, r3, #16
 80008da:	6113      	str	r3, [r2, #16]
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <flush_txfifo>:

/** \brief Flushes the TxFIFO of an IN endpoint.
 * \param endpoint_number The number of an IN endpoint to flush its TxFIFO.
 */
static void flush_txfifo(uint8_t endpoint_number)
{
 80008e6:	b480      	push	{r7}
 80008e8:	b083      	sub	sp, #12
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	4603      	mov	r3, r0
 80008ee:	71fb      	strb	r3, [r7, #7]
	// Sets the number of the TxFIFO to be flushed and then triggers the flush.
	MODIFY_REG(USB_OTG_FS->GRSTCTL,
 80008f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80008f4:	691b      	ldr	r3, [r3, #16]
 80008f6:	f423 62f8 	bic.w	r2, r3, #1984	; 0x7c0
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	019b      	lsls	r3, r3, #6
 80008fe:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000902:	4313      	orrs	r3, r2
 8000904:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000908:	f043 0320 	orr.w	r3, r3, #32
 800090c:	6113      	str	r3, [r2, #16]
		USB_OTG_GRSTCTL_TXFNUM,
		_VAL2FLD(USB_OTG_GRSTCTL_TXFNUM, endpoint_number) | USB_OTG_GRSTCTL_TXFFLSH
	);
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
	...

0800091c <configure_endpoint0>:

static void configure_endpoint0(uint8_t endpoint_size)
{
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
	// Unmasks all interrupts of IN and OUT endpoint0.
	SET_BIT(USB_OTG_FS_DEVICE->DAINTMSK, 1 << 0 | 1 << 16);
 8000926:	4b18      	ldr	r3, [pc, #96]	; (8000988 <configure_endpoint0+0x6c>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	4a17      	ldr	r2, [pc, #92]	; (8000988 <configure_endpoint0+0x6c>)
 800092c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8000930:	61d3      	str	r3, [r2, #28]

	// Configures the maximum packet size, activates the endpoint, and NAK the endpoint (cannot send data yet).
	MODIFY_REG(IN_ENDPOINT(0)->DIEPCTL,
 8000932:	2000      	movs	r0, #0
 8000934:	f7ff fdc4 	bl	80004c0 <IN_ENDPOINT>
 8000938:	4603      	mov	r3, r0
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000940:	f023 0307 	bic.w	r3, r3, #7
 8000944:	79fa      	ldrb	r2, [r7, #7]
 8000946:	ea43 0402 	orr.w	r4, r3, r2
 800094a:	2000      	movs	r0, #0
 800094c:	f7ff fdb8 	bl	80004c0 <IN_ENDPOINT>
 8000950:	4602      	mov	r2, r0
 8000952:	f044 6300 	orr.w	r3, r4, #134217728	; 0x8000000
 8000956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800095a:	6013      	str	r3, [r2, #0]
		USB_OTG_DIEPCTL_MPSIZ,
		USB_OTG_DIEPCTL_USBAEP | _VAL2FLD(USB_OTG_DIEPCTL_MPSIZ, endpoint_size) | USB_OTG_DIEPCTL_SNAK
	);

	// Clears NAK, and enables endpoint data transmission.
	SET_BIT(OUT_ENDPOINT(0)->DOEPCTL,
 800095c:	2000      	movs	r0, #0
 800095e:	f7ff fdc0 	bl	80004e2 <OUT_ENDPOINT>
 8000962:	4603      	mov	r3, r0
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800096a:	601a      	str	r2, [r3, #0]
		USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK
	);

	// Note: 64 bytes is the maximum packet size for full speed USB devices.
	configure_rxfifo_size(64);
 800096c:	2040      	movs	r0, #64	; 0x40
 800096e:	f7ff ff58 	bl	8000822 <configure_rxfifo_size>
	configure_txfifo_size(0, endpoint_size);
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	b29b      	uxth	r3, r3
 8000976:	4619      	mov	r1, r3
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ff6e 	bl	800085a <configure_txfifo_size>
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	bd90      	pop	{r4, r7, pc}
 8000986:	bf00      	nop
 8000988:	50000800 	.word	0x50000800

0800098c <configure_in_endpoint>:

static void configure_in_endpoint(uint8_t endpoint_number, UsbEndpointType endpoint_type, uint16_t endpoint_size)
{
 800098c:	b590      	push	{r4, r7, lr}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
 8000996:	460b      	mov	r3, r1
 8000998:	71bb      	strb	r3, [r7, #6]
 800099a:	4613      	mov	r3, r2
 800099c:	80bb      	strh	r3, [r7, #4]
	// Unmasks all interrupts of the targeted IN endpoint.
	SET_BIT(USB_OTG_FS_DEVICE->DAINTMSK, 1 << endpoint_number);
 800099e:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <configure_in_endpoint+0x7c>)
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	79fa      	ldrb	r2, [r7, #7]
 80009a4:	2101      	movs	r1, #1
 80009a6:	fa01 f202 	lsl.w	r2, r1, r2
 80009aa:	4611      	mov	r1, r2
 80009ac:	4a16      	ldr	r2, [pc, #88]	; (8000a08 <configure_in_endpoint+0x7c>)
 80009ae:	430b      	orrs	r3, r1
 80009b0:	61d3      	str	r3, [r2, #28]

	// Activates the endpoint, sets endpoint handshake to NAK (not ready to send data), sets DATA0 packet identifier,
	// configures its type, its maximum packet size, and assigns it a TxFIFO.
	MODIFY_REG(IN_ENDPOINT(endpoint_number)->DIEPCTL,
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fd83 	bl	80004c0 <IN_ENDPOINT>
 80009ba:	4603      	mov	r3, r0
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <configure_in_endpoint+0x80>)
 80009c0:	4013      	ands	r3, r2
 80009c2:	88ba      	ldrh	r2, [r7, #4]
 80009c4:	f3c2 010a 	ubfx	r1, r2, #0, #11
 80009c8:	79ba      	ldrb	r2, [r7, #6]
 80009ca:	0492      	lsls	r2, r2, #18
 80009cc:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80009d0:	4311      	orrs	r1, r2
 80009d2:	79fa      	ldrb	r2, [r7, #7]
 80009d4:	0592      	lsls	r2, r2, #22
 80009d6:	f002 7270 	and.w	r2, r2, #62914560	; 0x3c00000
 80009da:	430a      	orrs	r2, r1
 80009dc:	ea43 0402 	orr.w	r4, r3, r2
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff fd6c 	bl	80004c0 <IN_ENDPOINT>
 80009e8:	4602      	mov	r2, r0
 80009ea:	f044 53c0 	orr.w	r3, r4, #402653184	; 0x18000000
 80009ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009f2:	6013      	str	r3, [r2, #0]
		USB_OTG_DIEPCTL_MPSIZ | USB_OTG_DIEPCTL_EPTYP | USB_OTG_DIEPCTL_TXFNUM,
		USB_OTG_DIEPCTL_USBAEP | _VAL2FLD(USB_OTG_DIEPCTL_MPSIZ, endpoint_size) | USB_OTG_DIEPCTL_SNAK |
		_VAL2FLD(USB_OTG_DIEPCTL_EPTYP, endpoint_type) | _VAL2FLD(USB_OTG_DIEPCTL_TXFNUM, endpoint_number) | USB_OTG_DIEPCTL_SD0PID_SEVNFRM
	);

	configure_txfifo_size(endpoint_number, endpoint_size);
 80009f4:	88ba      	ldrh	r2, [r7, #4]
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	4611      	mov	r1, r2
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff ff2d 	bl	800085a <configure_txfifo_size>
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd90      	pop	{r4, r7, pc}
 8000a08:	50000800 	.word	0x50000800
 8000a0c:	fc33f800 	.word	0xfc33f800

08000a10 <deconfigure_endpoint>:

/** \brief Deconfigures IN and OUT endpoints of a specific endpoint number.
 * \param endpoint_number The number of the IN and OUT endpoints to deconfigure.
 */
static void deconfigure_endpoint(uint8_t endpoint_number)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
	USB_OTG_INEndpointTypeDef *in_endpoint = IN_ENDPOINT(endpoint_number);
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fd4f 	bl	80004c0 <IN_ENDPOINT>
 8000a22:	60f8      	str	r0, [r7, #12]
	USB_OTG_OUTEndpointTypeDef *out_endpoint = OUT_ENDPOINT(endpoint_number);
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff fd5b 	bl	80004e2 <OUT_ENDPOINT>
 8000a2c:	60b8      	str	r0, [r7, #8]

	// Masks all interrupts of the targeted IN and OUT endpoints.
	CLEAR_BIT(USB_OTG_FS_DEVICE->DAINTMSK,
 8000a2e:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <deconfigure_endpoint+0xb8>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	79fa      	ldrb	r2, [r7, #7]
 8000a34:	2101      	movs	r1, #1
 8000a36:	4091      	lsls	r1, r2
 8000a38:	79fa      	ldrb	r2, [r7, #7]
 8000a3a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a42:	430a      	orrs	r2, r1
 8000a44:	43d2      	mvns	r2, r2
 8000a46:	4611      	mov	r1, r2
 8000a48:	4a1f      	ldr	r2, [pc, #124]	; (8000ac8 <deconfigure_endpoint+0xb8>)
 8000a4a:	400b      	ands	r3, r1
 8000a4c:	61d3      	str	r3, [r2, #28]
		(1 << endpoint_number) | (1 << 16 << endpoint_number)
	);

	// Clears all interrupts of the endpoint.
	SET_BIT(in_endpoint->DIEPINT, 0x29FF);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	f443 5327 	orr.w	r3, r3, #10688	; 0x29c0
 8000a56:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	6093      	str	r3, [r2, #8]
	SET_BIT(out_endpoint->DOEPINT, 0x71FF);
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	f443 43e3 	orr.w	r3, r3, #29056	; 0x7180
 8000a66:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	6093      	str	r3, [r2, #8]

	// Disables the endpoints if possible.
	if (in_endpoint->DIEPCTL & USB_OTG_DIEPCTL_EPENA)
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	da05      	bge.n	8000a82 <deconfigure_endpoint+0x72>
	{
		// Disables endpoint transmission.
		SET_BIT(in_endpoint->DIEPCTL, USB_OTG_DIEPCTL_EPDIS);
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	601a      	str	r2, [r3, #0]
	}

	// Deactivates the endpoint.
	CLEAR_BIT(in_endpoint->DIEPCTL, USB_OTG_DIEPCTL_USBAEP);
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	601a      	str	r2, [r3, #0]

	if (endpoint_number != 0)
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d00f      	beq.n	8000ab4 <deconfigure_endpoint+0xa4>
	{
		if (out_endpoint->DOEPCTL & USB_OTG_DOEPCTL_EPENA)
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	da05      	bge.n	8000aa8 <deconfigure_endpoint+0x98>
		{
			// Disables endpoint transmission.
			SET_BIT(out_endpoint->DOEPCTL, USB_OTG_DOEPCTL_EPDIS);
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	601a      	str	r2, [r3, #0]
		}

		// Deactivates the endpoint.
		CLEAR_BIT(out_endpoint->DOEPCTL, USB_OTG_DOEPCTL_USBAEP);
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	601a      	str	r2, [r3, #0]
	}

	// Flushes the FIFOs.
	flush_txfifo(endpoint_number);
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ff15 	bl	80008e6 <flush_txfifo>
	flush_rxfifo();
 8000abc:	f7ff ff04 	bl	80008c8 <flush_rxfifo>
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	50000800 	.word	0x50000800

08000acc <enumdne_handler>:

static void enumdne_handler()
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	log_info("USB device speed enumeration done.");
 8000ad0:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <enumdne_handler+0x14>)
 8000ad2:	f7ff fc71 	bl	80003b8 <log_info>
	configure_endpoint0(8);
 8000ad6:	2008      	movs	r0, #8
 8000ad8:	f7ff ff20 	bl	800091c <configure_endpoint0>
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	08001e34 	.word	0x08001e34

08000ae4 <rxflvl_handler>:

static void rxflvl_handler()
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
	 // Pops the status information word from the RxFIFO.
	uint32_t receive_status = USB_OTG_FS_GLOBAL->GRXSTSP;
 8000aea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000aee:	6a1b      	ldr	r3, [r3, #32]
 8000af0:	60fb      	str	r3, [r7, #12]

	// The endpoint that received the data.
	uint8_t endpoint_number = _FLD2VAL(USB_OTG_GRXSTSP_EPNUM, receive_status);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	f003 030f 	and.w	r3, r3, #15
 8000afa:	72fb      	strb	r3, [r7, #11]
	// The count of bytes in the received packet.
	uint16_t bcnt = _FLD2VAL(USB_OTG_GRXSTSP_BCNT, receive_status);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	091b      	lsrs	r3, r3, #4
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b06:	813b      	strh	r3, [r7, #8]
	// The status of the received packet.
	uint16_t pktsts = _FLD2VAL(USB_OTG_GRXSTSP_PKTSTS, receive_status);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	0c5b      	lsrs	r3, r3, #17
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	f003 030f 	and.w	r3, r3, #15
 8000b12:	80fb      	strh	r3, [r7, #6]

	switch (pktsts)
 8000b14:	88fb      	ldrh	r3, [r7, #6]
 8000b16:	3b02      	subs	r3, #2
 8000b18:	2b04      	cmp	r3, #4
 8000b1a:	d81f      	bhi.n	8000b5c <rxflvl_handler+0x78>
 8000b1c:	a201      	add	r2, pc, #4	; (adr r2, 8000b24 <rxflvl_handler+0x40>)
 8000b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b22:	bf00      	nop
 8000b24:	08000b5b 	.word	0x08000b5b
 8000b28:	08000b5b 	.word	0x08000b5b
 8000b2c:	08000b47 	.word	0x08000b47
 8000b30:	08000b5d 	.word	0x08000b5d
 8000b34:	08000b39 	.word	0x08000b39
	{
	case 0x06: // SETUP packet (includes data).
		usb_events.on_setup_data_received(endpoint_number, bcnt);
 8000b38:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <rxflvl_handler+0x80>)
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	8939      	ldrh	r1, [r7, #8]
 8000b3e:	7afa      	ldrb	r2, [r7, #11]
 8000b40:	4610      	mov	r0, r2
 8000b42:	4798      	blx	r3
		break;
 8000b44:	e00a      	b.n	8000b5c <rxflvl_handler+0x78>
    	// ToDo
		break;

    case 0x04: // SETUP stage has completed.
    	// Re-enables the transmission on the endpoint.
		SET_BIT(OUT_ENDPOINT(endpoint_number)->DOEPCTL,
 8000b46:	7afb      	ldrb	r3, [r7, #11]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fcca 	bl	80004e2 <OUT_ENDPOINT>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8000b56:	601a      	str	r2, [r3, #0]
		USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
    	break;
 8000b58:	e000      	b.n	8000b5c <rxflvl_handler+0x78>
		break;
 8000b5a:	bf00      	nop

    case 0x03: // OUT transfer has completed.
    	break;
	}
}
 8000b5c:	bf00      	nop
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	08001ea4 	.word	0x08001ea4

08000b68 <usbrst_handler>:

static void usbrst_handler()
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
	log_info("USB reset signal was detected");
 8000b6e:	480a      	ldr	r0, [pc, #40]	; (8000b98 <usbrst_handler+0x30>)
 8000b70:	f7ff fc22 	bl	80003b8 <log_info>
	for (uint8_t i = 0; i <= ENDPOINT_COUNT; i++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	71fb      	strb	r3, [r7, #7]
 8000b78:	e006      	b.n	8000b88 <usbrst_handler+0x20>
	{
		deconfigure_endpoint(i);
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ff47 	bl	8000a10 <deconfigure_endpoint>
	for (uint8_t i = 0; i <= ENDPOINT_COUNT; i++)
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	3301      	adds	r3, #1
 8000b86:	71fb      	strb	r3, [r7, #7]
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	2b06      	cmp	r3, #6
 8000b8c:	d9f5      	bls.n	8000b7a <usbrst_handler+0x12>
	}

}
 8000b8e:	bf00      	nop
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	08001e58 	.word	0x08001e58

08000b9c <gintsts_handler>:

static void gintsts_handler()
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
	volatile uint32_t gintsts = USB_OTG_FS_GLOBAL->GINTSTS;
 8000ba2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ba6:	695b      	ldr	r3, [r3, #20]
 8000ba8:	607b      	str	r3, [r7, #4]

	if (gintsts & USB_OTG_GINTSTS_USBRST)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d00a      	beq.n	8000bca <gintsts_handler+0x2e>
	{
		usbrst_handler();
 8000bb4:	f7ff ffd8 	bl	8000b68 <usbrst_handler>
		// Clears the interrupt.
		SET_BIT(USB_OTG_FS_GLOBAL->GINTSTS, USB_OTG_GINTSTS_USBRST);
 8000bb8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bc6:	6153      	str	r3, [r2, #20]
	{

	}


}
 8000bc8:	e025      	b.n	8000c16 <gintsts_handler+0x7a>
	else if (gintsts & USB_OTG_GINTSTS_ENUMDNE)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d00a      	beq.n	8000bea <gintsts_handler+0x4e>
		enumdne_handler();
 8000bd4:	f7ff ff7a 	bl	8000acc <enumdne_handler>
		SET_BIT(USB_OTG_FS_GLOBAL->GINTSTS, USB_OTG_GINTSTS_ENUMDNE);
 8000bd8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000be2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000be6:	6153      	str	r3, [r2, #20]
}
 8000be8:	e015      	b.n	8000c16 <gintsts_handler+0x7a>
	else if (gintsts & USB_OTG_GINTSTS_RXFLVL)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	f003 0310 	and.w	r3, r3, #16
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d00a      	beq.n	8000c0a <gintsts_handler+0x6e>
		rxflvl_handler();
 8000bf4:	f7ff ff76 	bl	8000ae4 <rxflvl_handler>
		SET_BIT(USB_OTG_FS_GLOBAL->GINTSTS, USB_OTG_GINTSTS_RXFLVL);
 8000bf8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c02:	f043 0310 	orr.w	r3, r3, #16
 8000c06:	6153      	str	r3, [r2, #20]
}
 8000c08:	e005      	b.n	8000c16 <gintsts_handler+0x7a>
	else if (gintsts & USB_OTG_GINTSTS_IEPINT)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d100      	bne.n	8000c16 <gintsts_handler+0x7a>
	else if (gintsts & USB_OTG_GINTSTS_OEPINT)
 8000c14:	687b      	ldr	r3, [r7, #4]
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <usbd_initialize>:
#include "usb_device.h"


static UsbDevice *usbd_handle;

void usbd_initialize(UsbDevice *usb_device){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]

	usbd_handle = usb_device;
 8000c28:	4a07      	ldr	r2, [pc, #28]	; (8000c48 <usbd_initialize+0x28>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6013      	str	r3, [r2, #0]
	usb_driver.initialize_gpio_pins();
 8000c2e:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <usbd_initialize+0x2c>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	4798      	blx	r3
	usb_driver.initialize_core();
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <usbd_initialize+0x2c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4798      	blx	r3
	usb_driver.connect();
 8000c3a:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <usbd_initialize+0x2c>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	4798      	blx	r3


}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000084 	.word	0x20000084
 8000c4c:	08001e78 	.word	0x08001e78

08000c50 <process_standard_device_request>:

static void process_standard_device_request()
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
	UsbRequest const *request = usbd_handle->ptr_out_buffer;
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <process_standard_device_request+0x1c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	607b      	str	r3, [r7, #4]

	switch(request->bRequest)
	{

	}
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000084 	.word	0x20000084

08000c70 <process_request>:

static void process_request(){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0

	UsbRequest const *request = usbd_handle->ptr_out_buffer;
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <process_request+0x38>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	607b      	str	r3, [r7, #4]

	switch(request->bmRequestType & (USB_BM_REQUEST_TYPE_TYPE_MASK | USB_BM_REQUEST_TYPE_RECIPIENT_MASK))
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	f003 0363 	and.w	r3, r3, #99	; 0x63
 8000c86:	2b21      	cmp	r3, #33	; 0x21
 8000c88:	d008      	beq.n	8000c9c <process_request+0x2c>
 8000c8a:	2b21      	cmp	r3, #33	; 0x21
 8000c8c:	dc07      	bgt.n	8000c9e <process_request+0x2e>
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <process_request+0x26>
 8000c92:	2b01      	cmp	r3, #1
			//process_class_interface_request();
		break;

		case USB_BM_REQUEST_TYPE_TYPE_STANDARD | USB_BM_REQUEST_TYPE_RECIPIENT_INTERFACE:
			//process_standard_interface_request();
		break;
 8000c94:	e003      	b.n	8000c9e <process_request+0x2e>
			process_standard_device_request();
 8000c96:	f7ff ffdb 	bl	8000c50 <process_standard_device_request>
		break;
 8000c9a:	e000      	b.n	8000c9e <process_request+0x2e>
		break;
 8000c9c:	bf00      	nop
	}

}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000084 	.word	0x20000084

08000cac <usbd_poll>:

void usbd_poll()
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	usb_driver.poll();
 8000cb0:	4b02      	ldr	r3, [pc, #8]	; (8000cbc <usbd_poll+0x10>)
 8000cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb4:	4798      	blx	r3
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	08001e78 	.word	0x08001e78

08000cc0 <usb_reset_received_handler>:

static void usb_reset_received_handler()
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	usbd_handle->in_data_size = 0;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <usb_reset_received_handler+0x38>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
	usbd_handle->out_data_size = 0;
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <usb_reset_received_handler+0x38>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
	usbd_handle->configuration_value = 0;
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <usb_reset_received_handler+0x38>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	709a      	strb	r2, [r3, #2]
	usbd_handle->device_state = USB_DEVICE_STATE_DEFAULT;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <usb_reset_received_handler+0x38>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
	usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_SETUP;
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <usb_reset_received_handler+0x38>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	705a      	strb	r2, [r3, #1]
	usb_driver.set_device_address(0);
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <usb_reset_received_handler+0x3c>)
 8000cee:	691b      	ldr	r3, [r3, #16]
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	4798      	blx	r3
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000084 	.word	0x20000084
 8000cfc:	08001e78 	.word	0x08001e78

08000d00 <setup_data_received_handler>:

static void setup_data_received_handler(uint8_t endpointnumber, uint16_t byte_count){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	460a      	mov	r2, r1
 8000d0a:	71fb      	strb	r3, [r7, #7]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	80bb      	strh	r3, [r7, #4]

	usb_driver.read_packet(usbd_handle->ptr_out_buffer, byte_count);
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <setup_data_received_handler+0x2c>)
 8000d12:	6a1b      	ldr	r3, [r3, #32]
 8000d14:	4a06      	ldr	r2, [pc, #24]	; (8000d30 <setup_data_received_handler+0x30>)
 8000d16:	6812      	ldr	r2, [r2, #0]
 8000d18:	6852      	ldr	r2, [r2, #4]
 8000d1a:	88b9      	ldrh	r1, [r7, #4]
 8000d1c:	4610      	mov	r0, r2
 8000d1e:	4798      	blx	r3
	process_request();
 8000d20:	f7ff ffa6 	bl	8000c70 <process_request>

}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	08001e78 	.word	0x08001e78
 8000d30:	20000084 	.word	0x20000084

08000d34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d34:	480d      	ldr	r0, [pc, #52]	; (8000d6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d36:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d38:	f7ff fbbc 	bl	80004b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d3c:	480c      	ldr	r0, [pc, #48]	; (8000d70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d3e:	490d      	ldr	r1, [pc, #52]	; (8000d74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d40:	4a0d      	ldr	r2, [pc, #52]	; (8000d78 <LoopForever+0xe>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d44:	e002      	b.n	8000d4c <LoopCopyDataInit>

08000d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4a:	3304      	adds	r3, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d50:	d3f9      	bcc.n	8000d46 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d52:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d54:	4c0a      	ldr	r4, [pc, #40]	; (8000d80 <LoopForever+0x16>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d58:	e001      	b.n	8000d5e <LoopFillZerobss>

08000d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d5c:	3204      	adds	r2, #4

08000d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d60:	d3fb      	bcc.n	8000d5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d62:	f000 f811 	bl	8000d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d66:	f7ff fb3b 	bl	80003e0 <main>

08000d6a <LoopForever>:

LoopForever:
    b LoopForever
 8000d6a:	e7fe      	b.n	8000d6a <LoopForever>
  ldr   r0, =_estack
 8000d6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d74:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d78:	08001f5c 	.word	0x08001f5c
  ldr r2, =_sbss
 8000d7c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d80:	200000d8 	.word	0x200000d8

08000d84 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d84:	e7fe      	b.n	8000d84 <ADC_IRQHandler>
	...

08000d88 <__libc_init_array>:
 8000d88:	b570      	push	{r4, r5, r6, lr}
 8000d8a:	4d0d      	ldr	r5, [pc, #52]	; (8000dc0 <__libc_init_array+0x38>)
 8000d8c:	4c0d      	ldr	r4, [pc, #52]	; (8000dc4 <__libc_init_array+0x3c>)
 8000d8e:	1b64      	subs	r4, r4, r5
 8000d90:	10a4      	asrs	r4, r4, #2
 8000d92:	2600      	movs	r6, #0
 8000d94:	42a6      	cmp	r6, r4
 8000d96:	d109      	bne.n	8000dac <__libc_init_array+0x24>
 8000d98:	4d0b      	ldr	r5, [pc, #44]	; (8000dc8 <__libc_init_array+0x40>)
 8000d9a:	4c0c      	ldr	r4, [pc, #48]	; (8000dcc <__libc_init_array+0x44>)
 8000d9c:	f001 f814 	bl	8001dc8 <_init>
 8000da0:	1b64      	subs	r4, r4, r5
 8000da2:	10a4      	asrs	r4, r4, #2
 8000da4:	2600      	movs	r6, #0
 8000da6:	42a6      	cmp	r6, r4
 8000da8:	d105      	bne.n	8000db6 <__libc_init_array+0x2e>
 8000daa:	bd70      	pop	{r4, r5, r6, pc}
 8000dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8000db0:	4798      	blx	r3
 8000db2:	3601      	adds	r6, #1
 8000db4:	e7ee      	b.n	8000d94 <__libc_init_array+0xc>
 8000db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dba:	4798      	blx	r3
 8000dbc:	3601      	adds	r6, #1
 8000dbe:	e7f2      	b.n	8000da6 <__libc_init_array+0x1e>
 8000dc0:	08001f54 	.word	0x08001f54
 8000dc4:	08001f54 	.word	0x08001f54
 8000dc8:	08001f54 	.word	0x08001f54
 8000dcc:	08001f58 	.word	0x08001f58

08000dd0 <memset>:
 8000dd0:	4402      	add	r2, r0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d100      	bne.n	8000dda <memset+0xa>
 8000dd8:	4770      	bx	lr
 8000dda:	f803 1b01 	strb.w	r1, [r3], #1
 8000dde:	e7f9      	b.n	8000dd4 <memset+0x4>

08000de0 <__sfputc_r>:
 8000de0:	6893      	ldr	r3, [r2, #8]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	b410      	push	{r4}
 8000de8:	6093      	str	r3, [r2, #8]
 8000dea:	da08      	bge.n	8000dfe <__sfputc_r+0x1e>
 8000dec:	6994      	ldr	r4, [r2, #24]
 8000dee:	42a3      	cmp	r3, r4
 8000df0:	db01      	blt.n	8000df6 <__sfputc_r+0x16>
 8000df2:	290a      	cmp	r1, #10
 8000df4:	d103      	bne.n	8000dfe <__sfputc_r+0x1e>
 8000df6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000dfa:	f000 bb17 	b.w	800142c <__swbuf_r>
 8000dfe:	6813      	ldr	r3, [r2, #0]
 8000e00:	1c58      	adds	r0, r3, #1
 8000e02:	6010      	str	r0, [r2, #0]
 8000e04:	7019      	strb	r1, [r3, #0]
 8000e06:	4608      	mov	r0, r1
 8000e08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <__sfputs_r>:
 8000e0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e10:	4606      	mov	r6, r0
 8000e12:	460f      	mov	r7, r1
 8000e14:	4614      	mov	r4, r2
 8000e16:	18d5      	adds	r5, r2, r3
 8000e18:	42ac      	cmp	r4, r5
 8000e1a:	d101      	bne.n	8000e20 <__sfputs_r+0x12>
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	e007      	b.n	8000e30 <__sfputs_r+0x22>
 8000e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e24:	463a      	mov	r2, r7
 8000e26:	4630      	mov	r0, r6
 8000e28:	f7ff ffda 	bl	8000de0 <__sfputc_r>
 8000e2c:	1c43      	adds	r3, r0, #1
 8000e2e:	d1f3      	bne.n	8000e18 <__sfputs_r+0xa>
 8000e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000e34 <_vfiprintf_r>:
 8000e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e38:	460d      	mov	r5, r1
 8000e3a:	b09d      	sub	sp, #116	; 0x74
 8000e3c:	4614      	mov	r4, r2
 8000e3e:	4698      	mov	r8, r3
 8000e40:	4606      	mov	r6, r0
 8000e42:	b118      	cbz	r0, 8000e4c <_vfiprintf_r+0x18>
 8000e44:	6983      	ldr	r3, [r0, #24]
 8000e46:	b90b      	cbnz	r3, 8000e4c <_vfiprintf_r+0x18>
 8000e48:	f000 fcca 	bl	80017e0 <__sinit>
 8000e4c:	4b89      	ldr	r3, [pc, #548]	; (8001074 <_vfiprintf_r+0x240>)
 8000e4e:	429d      	cmp	r5, r3
 8000e50:	d11b      	bne.n	8000e8a <_vfiprintf_r+0x56>
 8000e52:	6875      	ldr	r5, [r6, #4]
 8000e54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e56:	07d9      	lsls	r1, r3, #31
 8000e58:	d405      	bmi.n	8000e66 <_vfiprintf_r+0x32>
 8000e5a:	89ab      	ldrh	r3, [r5, #12]
 8000e5c:	059a      	lsls	r2, r3, #22
 8000e5e:	d402      	bmi.n	8000e66 <_vfiprintf_r+0x32>
 8000e60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e62:	f000 fd5b 	bl	800191c <__retarget_lock_acquire_recursive>
 8000e66:	89ab      	ldrh	r3, [r5, #12]
 8000e68:	071b      	lsls	r3, r3, #28
 8000e6a:	d501      	bpl.n	8000e70 <_vfiprintf_r+0x3c>
 8000e6c:	692b      	ldr	r3, [r5, #16]
 8000e6e:	b9eb      	cbnz	r3, 8000eac <_vfiprintf_r+0x78>
 8000e70:	4629      	mov	r1, r5
 8000e72:	4630      	mov	r0, r6
 8000e74:	f000 fb2c 	bl	80014d0 <__swsetup_r>
 8000e78:	b1c0      	cbz	r0, 8000eac <_vfiprintf_r+0x78>
 8000e7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e7c:	07dc      	lsls	r4, r3, #31
 8000e7e:	d50e      	bpl.n	8000e9e <_vfiprintf_r+0x6a>
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295
 8000e84:	b01d      	add	sp, #116	; 0x74
 8000e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e8a:	4b7b      	ldr	r3, [pc, #492]	; (8001078 <_vfiprintf_r+0x244>)
 8000e8c:	429d      	cmp	r5, r3
 8000e8e:	d101      	bne.n	8000e94 <_vfiprintf_r+0x60>
 8000e90:	68b5      	ldr	r5, [r6, #8]
 8000e92:	e7df      	b.n	8000e54 <_vfiprintf_r+0x20>
 8000e94:	4b79      	ldr	r3, [pc, #484]	; (800107c <_vfiprintf_r+0x248>)
 8000e96:	429d      	cmp	r5, r3
 8000e98:	bf08      	it	eq
 8000e9a:	68f5      	ldreq	r5, [r6, #12]
 8000e9c:	e7da      	b.n	8000e54 <_vfiprintf_r+0x20>
 8000e9e:	89ab      	ldrh	r3, [r5, #12]
 8000ea0:	0598      	lsls	r0, r3, #22
 8000ea2:	d4ed      	bmi.n	8000e80 <_vfiprintf_r+0x4c>
 8000ea4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000ea6:	f000 fd3a 	bl	800191e <__retarget_lock_release_recursive>
 8000eaa:	e7e9      	b.n	8000e80 <_vfiprintf_r+0x4c>
 8000eac:	2300      	movs	r3, #0
 8000eae:	9309      	str	r3, [sp, #36]	; 0x24
 8000eb0:	2320      	movs	r3, #32
 8000eb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000eb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8000eba:	2330      	movs	r3, #48	; 0x30
 8000ebc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001080 <_vfiprintf_r+0x24c>
 8000ec0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000ec4:	f04f 0901 	mov.w	r9, #1
 8000ec8:	4623      	mov	r3, r4
 8000eca:	469a      	mov	sl, r3
 8000ecc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ed0:	b10a      	cbz	r2, 8000ed6 <_vfiprintf_r+0xa2>
 8000ed2:	2a25      	cmp	r2, #37	; 0x25
 8000ed4:	d1f9      	bne.n	8000eca <_vfiprintf_r+0x96>
 8000ed6:	ebba 0b04 	subs.w	fp, sl, r4
 8000eda:	d00b      	beq.n	8000ef4 <_vfiprintf_r+0xc0>
 8000edc:	465b      	mov	r3, fp
 8000ede:	4622      	mov	r2, r4
 8000ee0:	4629      	mov	r1, r5
 8000ee2:	4630      	mov	r0, r6
 8000ee4:	f7ff ff93 	bl	8000e0e <__sfputs_r>
 8000ee8:	3001      	adds	r0, #1
 8000eea:	f000 80aa 	beq.w	8001042 <_vfiprintf_r+0x20e>
 8000eee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ef0:	445a      	add	r2, fp
 8000ef2:	9209      	str	r2, [sp, #36]	; 0x24
 8000ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f000 80a2 	beq.w	8001042 <_vfiprintf_r+0x20e>
 8000efe:	2300      	movs	r3, #0
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295
 8000f04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000f08:	f10a 0a01 	add.w	sl, sl, #1
 8000f0c:	9304      	str	r3, [sp, #16]
 8000f0e:	9307      	str	r3, [sp, #28]
 8000f10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000f14:	931a      	str	r3, [sp, #104]	; 0x68
 8000f16:	4654      	mov	r4, sl
 8000f18:	2205      	movs	r2, #5
 8000f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f1e:	4858      	ldr	r0, [pc, #352]	; (8001080 <_vfiprintf_r+0x24c>)
 8000f20:	f7ff f966 	bl	80001f0 <memchr>
 8000f24:	9a04      	ldr	r2, [sp, #16]
 8000f26:	b9d8      	cbnz	r0, 8000f60 <_vfiprintf_r+0x12c>
 8000f28:	06d1      	lsls	r1, r2, #27
 8000f2a:	bf44      	itt	mi
 8000f2c:	2320      	movmi	r3, #32
 8000f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000f32:	0713      	lsls	r3, r2, #28
 8000f34:	bf44      	itt	mi
 8000f36:	232b      	movmi	r3, #43	; 0x2b
 8000f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000f3c:	f89a 3000 	ldrb.w	r3, [sl]
 8000f40:	2b2a      	cmp	r3, #42	; 0x2a
 8000f42:	d015      	beq.n	8000f70 <_vfiprintf_r+0x13c>
 8000f44:	9a07      	ldr	r2, [sp, #28]
 8000f46:	4654      	mov	r4, sl
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f04f 0c0a 	mov.w	ip, #10
 8000f4e:	4621      	mov	r1, r4
 8000f50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000f54:	3b30      	subs	r3, #48	; 0x30
 8000f56:	2b09      	cmp	r3, #9
 8000f58:	d94e      	bls.n	8000ff8 <_vfiprintf_r+0x1c4>
 8000f5a:	b1b0      	cbz	r0, 8000f8a <_vfiprintf_r+0x156>
 8000f5c:	9207      	str	r2, [sp, #28]
 8000f5e:	e014      	b.n	8000f8a <_vfiprintf_r+0x156>
 8000f60:	eba0 0308 	sub.w	r3, r0, r8
 8000f64:	fa09 f303 	lsl.w	r3, r9, r3
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	9304      	str	r3, [sp, #16]
 8000f6c:	46a2      	mov	sl, r4
 8000f6e:	e7d2      	b.n	8000f16 <_vfiprintf_r+0xe2>
 8000f70:	9b03      	ldr	r3, [sp, #12]
 8000f72:	1d19      	adds	r1, r3, #4
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	9103      	str	r1, [sp, #12]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	bfbb      	ittet	lt
 8000f7c:	425b      	neglt	r3, r3
 8000f7e:	f042 0202 	orrlt.w	r2, r2, #2
 8000f82:	9307      	strge	r3, [sp, #28]
 8000f84:	9307      	strlt	r3, [sp, #28]
 8000f86:	bfb8      	it	lt
 8000f88:	9204      	strlt	r2, [sp, #16]
 8000f8a:	7823      	ldrb	r3, [r4, #0]
 8000f8c:	2b2e      	cmp	r3, #46	; 0x2e
 8000f8e:	d10c      	bne.n	8000faa <_vfiprintf_r+0x176>
 8000f90:	7863      	ldrb	r3, [r4, #1]
 8000f92:	2b2a      	cmp	r3, #42	; 0x2a
 8000f94:	d135      	bne.n	8001002 <_vfiprintf_r+0x1ce>
 8000f96:	9b03      	ldr	r3, [sp, #12]
 8000f98:	1d1a      	adds	r2, r3, #4
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	9203      	str	r2, [sp, #12]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	bfb8      	it	lt
 8000fa2:	f04f 33ff 	movlt.w	r3, #4294967295
 8000fa6:	3402      	adds	r4, #2
 8000fa8:	9305      	str	r3, [sp, #20]
 8000faa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001090 <_vfiprintf_r+0x25c>
 8000fae:	7821      	ldrb	r1, [r4, #0]
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	4650      	mov	r0, sl
 8000fb4:	f7ff f91c 	bl	80001f0 <memchr>
 8000fb8:	b140      	cbz	r0, 8000fcc <_vfiprintf_r+0x198>
 8000fba:	2340      	movs	r3, #64	; 0x40
 8000fbc:	eba0 000a 	sub.w	r0, r0, sl
 8000fc0:	fa03 f000 	lsl.w	r0, r3, r0
 8000fc4:	9b04      	ldr	r3, [sp, #16]
 8000fc6:	4303      	orrs	r3, r0
 8000fc8:	3401      	adds	r4, #1
 8000fca:	9304      	str	r3, [sp, #16]
 8000fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000fd0:	482c      	ldr	r0, [pc, #176]	; (8001084 <_vfiprintf_r+0x250>)
 8000fd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000fd6:	2206      	movs	r2, #6
 8000fd8:	f7ff f90a 	bl	80001f0 <memchr>
 8000fdc:	2800      	cmp	r0, #0
 8000fde:	d03f      	beq.n	8001060 <_vfiprintf_r+0x22c>
 8000fe0:	4b29      	ldr	r3, [pc, #164]	; (8001088 <_vfiprintf_r+0x254>)
 8000fe2:	bb1b      	cbnz	r3, 800102c <_vfiprintf_r+0x1f8>
 8000fe4:	9b03      	ldr	r3, [sp, #12]
 8000fe6:	3307      	adds	r3, #7
 8000fe8:	f023 0307 	bic.w	r3, r3, #7
 8000fec:	3308      	adds	r3, #8
 8000fee:	9303      	str	r3, [sp, #12]
 8000ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ff2:	443b      	add	r3, r7
 8000ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8000ff6:	e767      	b.n	8000ec8 <_vfiprintf_r+0x94>
 8000ff8:	fb0c 3202 	mla	r2, ip, r2, r3
 8000ffc:	460c      	mov	r4, r1
 8000ffe:	2001      	movs	r0, #1
 8001000:	e7a5      	b.n	8000f4e <_vfiprintf_r+0x11a>
 8001002:	2300      	movs	r3, #0
 8001004:	3401      	adds	r4, #1
 8001006:	9305      	str	r3, [sp, #20]
 8001008:	4619      	mov	r1, r3
 800100a:	f04f 0c0a 	mov.w	ip, #10
 800100e:	4620      	mov	r0, r4
 8001010:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001014:	3a30      	subs	r2, #48	; 0x30
 8001016:	2a09      	cmp	r2, #9
 8001018:	d903      	bls.n	8001022 <_vfiprintf_r+0x1ee>
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0c5      	beq.n	8000faa <_vfiprintf_r+0x176>
 800101e:	9105      	str	r1, [sp, #20]
 8001020:	e7c3      	b.n	8000faa <_vfiprintf_r+0x176>
 8001022:	fb0c 2101 	mla	r1, ip, r1, r2
 8001026:	4604      	mov	r4, r0
 8001028:	2301      	movs	r3, #1
 800102a:	e7f0      	b.n	800100e <_vfiprintf_r+0x1da>
 800102c:	ab03      	add	r3, sp, #12
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	462a      	mov	r2, r5
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <_vfiprintf_r+0x258>)
 8001034:	a904      	add	r1, sp, #16
 8001036:	4630      	mov	r0, r6
 8001038:	f3af 8000 	nop.w
 800103c:	4607      	mov	r7, r0
 800103e:	1c78      	adds	r0, r7, #1
 8001040:	d1d6      	bne.n	8000ff0 <_vfiprintf_r+0x1bc>
 8001042:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001044:	07d9      	lsls	r1, r3, #31
 8001046:	d405      	bmi.n	8001054 <_vfiprintf_r+0x220>
 8001048:	89ab      	ldrh	r3, [r5, #12]
 800104a:	059a      	lsls	r2, r3, #22
 800104c:	d402      	bmi.n	8001054 <_vfiprintf_r+0x220>
 800104e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001050:	f000 fc65 	bl	800191e <__retarget_lock_release_recursive>
 8001054:	89ab      	ldrh	r3, [r5, #12]
 8001056:	065b      	lsls	r3, r3, #25
 8001058:	f53f af12 	bmi.w	8000e80 <_vfiprintf_r+0x4c>
 800105c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800105e:	e711      	b.n	8000e84 <_vfiprintf_r+0x50>
 8001060:	ab03      	add	r3, sp, #12
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	462a      	mov	r2, r5
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <_vfiprintf_r+0x258>)
 8001068:	a904      	add	r1, sp, #16
 800106a:	4630      	mov	r0, r6
 800106c:	f000 f88a 	bl	8001184 <_printf_i>
 8001070:	e7e4      	b.n	800103c <_vfiprintf_r+0x208>
 8001072:	bf00      	nop
 8001074:	08001f14 	.word	0x08001f14
 8001078:	08001f34 	.word	0x08001f34
 800107c:	08001ef4 	.word	0x08001ef4
 8001080:	08001ec0 	.word	0x08001ec0
 8001084:	08001eca 	.word	0x08001eca
 8001088:	00000000 	.word	0x00000000
 800108c:	08000e0f 	.word	0x08000e0f
 8001090:	08001ec6 	.word	0x08001ec6

08001094 <vfiprintf>:
 8001094:	4613      	mov	r3, r2
 8001096:	460a      	mov	r2, r1
 8001098:	4601      	mov	r1, r0
 800109a:	4802      	ldr	r0, [pc, #8]	; (80010a4 <vfiprintf+0x10>)
 800109c:	6800      	ldr	r0, [r0, #0]
 800109e:	f7ff bec9 	b.w	8000e34 <_vfiprintf_r>
 80010a2:	bf00      	nop
 80010a4:	20000004 	.word	0x20000004

080010a8 <_printf_common>:
 80010a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010ac:	4616      	mov	r6, r2
 80010ae:	4699      	mov	r9, r3
 80010b0:	688a      	ldr	r2, [r1, #8]
 80010b2:	690b      	ldr	r3, [r1, #16]
 80010b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80010b8:	4293      	cmp	r3, r2
 80010ba:	bfb8      	it	lt
 80010bc:	4613      	movlt	r3, r2
 80010be:	6033      	str	r3, [r6, #0]
 80010c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80010c4:	4607      	mov	r7, r0
 80010c6:	460c      	mov	r4, r1
 80010c8:	b10a      	cbz	r2, 80010ce <_printf_common+0x26>
 80010ca:	3301      	adds	r3, #1
 80010cc:	6033      	str	r3, [r6, #0]
 80010ce:	6823      	ldr	r3, [r4, #0]
 80010d0:	0699      	lsls	r1, r3, #26
 80010d2:	bf42      	ittt	mi
 80010d4:	6833      	ldrmi	r3, [r6, #0]
 80010d6:	3302      	addmi	r3, #2
 80010d8:	6033      	strmi	r3, [r6, #0]
 80010da:	6825      	ldr	r5, [r4, #0]
 80010dc:	f015 0506 	ands.w	r5, r5, #6
 80010e0:	d106      	bne.n	80010f0 <_printf_common+0x48>
 80010e2:	f104 0a19 	add.w	sl, r4, #25
 80010e6:	68e3      	ldr	r3, [r4, #12]
 80010e8:	6832      	ldr	r2, [r6, #0]
 80010ea:	1a9b      	subs	r3, r3, r2
 80010ec:	42ab      	cmp	r3, r5
 80010ee:	dc26      	bgt.n	800113e <_printf_common+0x96>
 80010f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80010f4:	1e13      	subs	r3, r2, #0
 80010f6:	6822      	ldr	r2, [r4, #0]
 80010f8:	bf18      	it	ne
 80010fa:	2301      	movne	r3, #1
 80010fc:	0692      	lsls	r2, r2, #26
 80010fe:	d42b      	bmi.n	8001158 <_printf_common+0xb0>
 8001100:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001104:	4649      	mov	r1, r9
 8001106:	4638      	mov	r0, r7
 8001108:	47c0      	blx	r8
 800110a:	3001      	adds	r0, #1
 800110c:	d01e      	beq.n	800114c <_printf_common+0xa4>
 800110e:	6823      	ldr	r3, [r4, #0]
 8001110:	68e5      	ldr	r5, [r4, #12]
 8001112:	6832      	ldr	r2, [r6, #0]
 8001114:	f003 0306 	and.w	r3, r3, #6
 8001118:	2b04      	cmp	r3, #4
 800111a:	bf08      	it	eq
 800111c:	1aad      	subeq	r5, r5, r2
 800111e:	68a3      	ldr	r3, [r4, #8]
 8001120:	6922      	ldr	r2, [r4, #16]
 8001122:	bf0c      	ite	eq
 8001124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001128:	2500      	movne	r5, #0
 800112a:	4293      	cmp	r3, r2
 800112c:	bfc4      	itt	gt
 800112e:	1a9b      	subgt	r3, r3, r2
 8001130:	18ed      	addgt	r5, r5, r3
 8001132:	2600      	movs	r6, #0
 8001134:	341a      	adds	r4, #26
 8001136:	42b5      	cmp	r5, r6
 8001138:	d11a      	bne.n	8001170 <_printf_common+0xc8>
 800113a:	2000      	movs	r0, #0
 800113c:	e008      	b.n	8001150 <_printf_common+0xa8>
 800113e:	2301      	movs	r3, #1
 8001140:	4652      	mov	r2, sl
 8001142:	4649      	mov	r1, r9
 8001144:	4638      	mov	r0, r7
 8001146:	47c0      	blx	r8
 8001148:	3001      	adds	r0, #1
 800114a:	d103      	bne.n	8001154 <_printf_common+0xac>
 800114c:	f04f 30ff 	mov.w	r0, #4294967295
 8001150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001154:	3501      	adds	r5, #1
 8001156:	e7c6      	b.n	80010e6 <_printf_common+0x3e>
 8001158:	18e1      	adds	r1, r4, r3
 800115a:	1c5a      	adds	r2, r3, #1
 800115c:	2030      	movs	r0, #48	; 0x30
 800115e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001162:	4422      	add	r2, r4
 8001164:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001168:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800116c:	3302      	adds	r3, #2
 800116e:	e7c7      	b.n	8001100 <_printf_common+0x58>
 8001170:	2301      	movs	r3, #1
 8001172:	4622      	mov	r2, r4
 8001174:	4649      	mov	r1, r9
 8001176:	4638      	mov	r0, r7
 8001178:	47c0      	blx	r8
 800117a:	3001      	adds	r0, #1
 800117c:	d0e6      	beq.n	800114c <_printf_common+0xa4>
 800117e:	3601      	adds	r6, #1
 8001180:	e7d9      	b.n	8001136 <_printf_common+0x8e>
	...

08001184 <_printf_i>:
 8001184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001188:	460c      	mov	r4, r1
 800118a:	4691      	mov	r9, r2
 800118c:	7e27      	ldrb	r7, [r4, #24]
 800118e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001190:	2f78      	cmp	r7, #120	; 0x78
 8001192:	4680      	mov	r8, r0
 8001194:	469a      	mov	sl, r3
 8001196:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800119a:	d807      	bhi.n	80011ac <_printf_i+0x28>
 800119c:	2f62      	cmp	r7, #98	; 0x62
 800119e:	d80a      	bhi.n	80011b6 <_printf_i+0x32>
 80011a0:	2f00      	cmp	r7, #0
 80011a2:	f000 80d8 	beq.w	8001356 <_printf_i+0x1d2>
 80011a6:	2f58      	cmp	r7, #88	; 0x58
 80011a8:	f000 80a3 	beq.w	80012f2 <_printf_i+0x16e>
 80011ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80011b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80011b4:	e03a      	b.n	800122c <_printf_i+0xa8>
 80011b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80011ba:	2b15      	cmp	r3, #21
 80011bc:	d8f6      	bhi.n	80011ac <_printf_i+0x28>
 80011be:	a001      	add	r0, pc, #4	; (adr r0, 80011c4 <_printf_i+0x40>)
 80011c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80011c4:	0800121d 	.word	0x0800121d
 80011c8:	08001231 	.word	0x08001231
 80011cc:	080011ad 	.word	0x080011ad
 80011d0:	080011ad 	.word	0x080011ad
 80011d4:	080011ad 	.word	0x080011ad
 80011d8:	080011ad 	.word	0x080011ad
 80011dc:	08001231 	.word	0x08001231
 80011e0:	080011ad 	.word	0x080011ad
 80011e4:	080011ad 	.word	0x080011ad
 80011e8:	080011ad 	.word	0x080011ad
 80011ec:	080011ad 	.word	0x080011ad
 80011f0:	0800133d 	.word	0x0800133d
 80011f4:	08001261 	.word	0x08001261
 80011f8:	0800131f 	.word	0x0800131f
 80011fc:	080011ad 	.word	0x080011ad
 8001200:	080011ad 	.word	0x080011ad
 8001204:	0800135f 	.word	0x0800135f
 8001208:	080011ad 	.word	0x080011ad
 800120c:	08001261 	.word	0x08001261
 8001210:	080011ad 	.word	0x080011ad
 8001214:	080011ad 	.word	0x080011ad
 8001218:	08001327 	.word	0x08001327
 800121c:	680b      	ldr	r3, [r1, #0]
 800121e:	1d1a      	adds	r2, r3, #4
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	600a      	str	r2, [r1, #0]
 8001224:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001228:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800122c:	2301      	movs	r3, #1
 800122e:	e0a3      	b.n	8001378 <_printf_i+0x1f4>
 8001230:	6825      	ldr	r5, [r4, #0]
 8001232:	6808      	ldr	r0, [r1, #0]
 8001234:	062e      	lsls	r6, r5, #24
 8001236:	f100 0304 	add.w	r3, r0, #4
 800123a:	d50a      	bpl.n	8001252 <_printf_i+0xce>
 800123c:	6805      	ldr	r5, [r0, #0]
 800123e:	600b      	str	r3, [r1, #0]
 8001240:	2d00      	cmp	r5, #0
 8001242:	da03      	bge.n	800124c <_printf_i+0xc8>
 8001244:	232d      	movs	r3, #45	; 0x2d
 8001246:	426d      	negs	r5, r5
 8001248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800124c:	485e      	ldr	r0, [pc, #376]	; (80013c8 <_printf_i+0x244>)
 800124e:	230a      	movs	r3, #10
 8001250:	e019      	b.n	8001286 <_printf_i+0x102>
 8001252:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001256:	6805      	ldr	r5, [r0, #0]
 8001258:	600b      	str	r3, [r1, #0]
 800125a:	bf18      	it	ne
 800125c:	b22d      	sxthne	r5, r5
 800125e:	e7ef      	b.n	8001240 <_printf_i+0xbc>
 8001260:	680b      	ldr	r3, [r1, #0]
 8001262:	6825      	ldr	r5, [r4, #0]
 8001264:	1d18      	adds	r0, r3, #4
 8001266:	6008      	str	r0, [r1, #0]
 8001268:	0628      	lsls	r0, r5, #24
 800126a:	d501      	bpl.n	8001270 <_printf_i+0xec>
 800126c:	681d      	ldr	r5, [r3, #0]
 800126e:	e002      	b.n	8001276 <_printf_i+0xf2>
 8001270:	0669      	lsls	r1, r5, #25
 8001272:	d5fb      	bpl.n	800126c <_printf_i+0xe8>
 8001274:	881d      	ldrh	r5, [r3, #0]
 8001276:	4854      	ldr	r0, [pc, #336]	; (80013c8 <_printf_i+0x244>)
 8001278:	2f6f      	cmp	r7, #111	; 0x6f
 800127a:	bf0c      	ite	eq
 800127c:	2308      	moveq	r3, #8
 800127e:	230a      	movne	r3, #10
 8001280:	2100      	movs	r1, #0
 8001282:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001286:	6866      	ldr	r6, [r4, #4]
 8001288:	60a6      	str	r6, [r4, #8]
 800128a:	2e00      	cmp	r6, #0
 800128c:	bfa2      	ittt	ge
 800128e:	6821      	ldrge	r1, [r4, #0]
 8001290:	f021 0104 	bicge.w	r1, r1, #4
 8001294:	6021      	strge	r1, [r4, #0]
 8001296:	b90d      	cbnz	r5, 800129c <_printf_i+0x118>
 8001298:	2e00      	cmp	r6, #0
 800129a:	d04d      	beq.n	8001338 <_printf_i+0x1b4>
 800129c:	4616      	mov	r6, r2
 800129e:	fbb5 f1f3 	udiv	r1, r5, r3
 80012a2:	fb03 5711 	mls	r7, r3, r1, r5
 80012a6:	5dc7      	ldrb	r7, [r0, r7]
 80012a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80012ac:	462f      	mov	r7, r5
 80012ae:	42bb      	cmp	r3, r7
 80012b0:	460d      	mov	r5, r1
 80012b2:	d9f4      	bls.n	800129e <_printf_i+0x11a>
 80012b4:	2b08      	cmp	r3, #8
 80012b6:	d10b      	bne.n	80012d0 <_printf_i+0x14c>
 80012b8:	6823      	ldr	r3, [r4, #0]
 80012ba:	07df      	lsls	r7, r3, #31
 80012bc:	d508      	bpl.n	80012d0 <_printf_i+0x14c>
 80012be:	6923      	ldr	r3, [r4, #16]
 80012c0:	6861      	ldr	r1, [r4, #4]
 80012c2:	4299      	cmp	r1, r3
 80012c4:	bfde      	ittt	le
 80012c6:	2330      	movle	r3, #48	; 0x30
 80012c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80012cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80012d0:	1b92      	subs	r2, r2, r6
 80012d2:	6122      	str	r2, [r4, #16]
 80012d4:	f8cd a000 	str.w	sl, [sp]
 80012d8:	464b      	mov	r3, r9
 80012da:	aa03      	add	r2, sp, #12
 80012dc:	4621      	mov	r1, r4
 80012de:	4640      	mov	r0, r8
 80012e0:	f7ff fee2 	bl	80010a8 <_printf_common>
 80012e4:	3001      	adds	r0, #1
 80012e6:	d14c      	bne.n	8001382 <_printf_i+0x1fe>
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ec:	b004      	add	sp, #16
 80012ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012f2:	4835      	ldr	r0, [pc, #212]	; (80013c8 <_printf_i+0x244>)
 80012f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80012f8:	6823      	ldr	r3, [r4, #0]
 80012fa:	680e      	ldr	r6, [r1, #0]
 80012fc:	061f      	lsls	r7, r3, #24
 80012fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8001302:	600e      	str	r6, [r1, #0]
 8001304:	d514      	bpl.n	8001330 <_printf_i+0x1ac>
 8001306:	07d9      	lsls	r1, r3, #31
 8001308:	bf44      	itt	mi
 800130a:	f043 0320 	orrmi.w	r3, r3, #32
 800130e:	6023      	strmi	r3, [r4, #0]
 8001310:	b91d      	cbnz	r5, 800131a <_printf_i+0x196>
 8001312:	6823      	ldr	r3, [r4, #0]
 8001314:	f023 0320 	bic.w	r3, r3, #32
 8001318:	6023      	str	r3, [r4, #0]
 800131a:	2310      	movs	r3, #16
 800131c:	e7b0      	b.n	8001280 <_printf_i+0xfc>
 800131e:	6823      	ldr	r3, [r4, #0]
 8001320:	f043 0320 	orr.w	r3, r3, #32
 8001324:	6023      	str	r3, [r4, #0]
 8001326:	2378      	movs	r3, #120	; 0x78
 8001328:	4828      	ldr	r0, [pc, #160]	; (80013cc <_printf_i+0x248>)
 800132a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800132e:	e7e3      	b.n	80012f8 <_printf_i+0x174>
 8001330:	065e      	lsls	r6, r3, #25
 8001332:	bf48      	it	mi
 8001334:	b2ad      	uxthmi	r5, r5
 8001336:	e7e6      	b.n	8001306 <_printf_i+0x182>
 8001338:	4616      	mov	r6, r2
 800133a:	e7bb      	b.n	80012b4 <_printf_i+0x130>
 800133c:	680b      	ldr	r3, [r1, #0]
 800133e:	6826      	ldr	r6, [r4, #0]
 8001340:	6960      	ldr	r0, [r4, #20]
 8001342:	1d1d      	adds	r5, r3, #4
 8001344:	600d      	str	r5, [r1, #0]
 8001346:	0635      	lsls	r5, r6, #24
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	d501      	bpl.n	8001350 <_printf_i+0x1cc>
 800134c:	6018      	str	r0, [r3, #0]
 800134e:	e002      	b.n	8001356 <_printf_i+0x1d2>
 8001350:	0671      	lsls	r1, r6, #25
 8001352:	d5fb      	bpl.n	800134c <_printf_i+0x1c8>
 8001354:	8018      	strh	r0, [r3, #0]
 8001356:	2300      	movs	r3, #0
 8001358:	6123      	str	r3, [r4, #16]
 800135a:	4616      	mov	r6, r2
 800135c:	e7ba      	b.n	80012d4 <_printf_i+0x150>
 800135e:	680b      	ldr	r3, [r1, #0]
 8001360:	1d1a      	adds	r2, r3, #4
 8001362:	600a      	str	r2, [r1, #0]
 8001364:	681e      	ldr	r6, [r3, #0]
 8001366:	6862      	ldr	r2, [r4, #4]
 8001368:	2100      	movs	r1, #0
 800136a:	4630      	mov	r0, r6
 800136c:	f7fe ff40 	bl	80001f0 <memchr>
 8001370:	b108      	cbz	r0, 8001376 <_printf_i+0x1f2>
 8001372:	1b80      	subs	r0, r0, r6
 8001374:	6060      	str	r0, [r4, #4]
 8001376:	6863      	ldr	r3, [r4, #4]
 8001378:	6123      	str	r3, [r4, #16]
 800137a:	2300      	movs	r3, #0
 800137c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001380:	e7a8      	b.n	80012d4 <_printf_i+0x150>
 8001382:	6923      	ldr	r3, [r4, #16]
 8001384:	4632      	mov	r2, r6
 8001386:	4649      	mov	r1, r9
 8001388:	4640      	mov	r0, r8
 800138a:	47d0      	blx	sl
 800138c:	3001      	adds	r0, #1
 800138e:	d0ab      	beq.n	80012e8 <_printf_i+0x164>
 8001390:	6823      	ldr	r3, [r4, #0]
 8001392:	079b      	lsls	r3, r3, #30
 8001394:	d413      	bmi.n	80013be <_printf_i+0x23a>
 8001396:	68e0      	ldr	r0, [r4, #12]
 8001398:	9b03      	ldr	r3, [sp, #12]
 800139a:	4298      	cmp	r0, r3
 800139c:	bfb8      	it	lt
 800139e:	4618      	movlt	r0, r3
 80013a0:	e7a4      	b.n	80012ec <_printf_i+0x168>
 80013a2:	2301      	movs	r3, #1
 80013a4:	4632      	mov	r2, r6
 80013a6:	4649      	mov	r1, r9
 80013a8:	4640      	mov	r0, r8
 80013aa:	47d0      	blx	sl
 80013ac:	3001      	adds	r0, #1
 80013ae:	d09b      	beq.n	80012e8 <_printf_i+0x164>
 80013b0:	3501      	adds	r5, #1
 80013b2:	68e3      	ldr	r3, [r4, #12]
 80013b4:	9903      	ldr	r1, [sp, #12]
 80013b6:	1a5b      	subs	r3, r3, r1
 80013b8:	42ab      	cmp	r3, r5
 80013ba:	dcf2      	bgt.n	80013a2 <_printf_i+0x21e>
 80013bc:	e7eb      	b.n	8001396 <_printf_i+0x212>
 80013be:	2500      	movs	r5, #0
 80013c0:	f104 0619 	add.w	r6, r4, #25
 80013c4:	e7f5      	b.n	80013b2 <_printf_i+0x22e>
 80013c6:	bf00      	nop
 80013c8:	08001ed1 	.word	0x08001ed1
 80013cc:	08001ee2 	.word	0x08001ee2

080013d0 <iprintf>:
 80013d0:	b40f      	push	{r0, r1, r2, r3}
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <iprintf+0x2c>)
 80013d4:	b513      	push	{r0, r1, r4, lr}
 80013d6:	681c      	ldr	r4, [r3, #0]
 80013d8:	b124      	cbz	r4, 80013e4 <iprintf+0x14>
 80013da:	69a3      	ldr	r3, [r4, #24]
 80013dc:	b913      	cbnz	r3, 80013e4 <iprintf+0x14>
 80013de:	4620      	mov	r0, r4
 80013e0:	f000 f9fe 	bl	80017e0 <__sinit>
 80013e4:	ab05      	add	r3, sp, #20
 80013e6:	9a04      	ldr	r2, [sp, #16]
 80013e8:	68a1      	ldr	r1, [r4, #8]
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	4620      	mov	r0, r4
 80013ee:	f7ff fd21 	bl	8000e34 <_vfiprintf_r>
 80013f2:	b002      	add	sp, #8
 80013f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013f8:	b004      	add	sp, #16
 80013fa:	4770      	bx	lr
 80013fc:	20000004 	.word	0x20000004

08001400 <putchar>:
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <putchar+0x28>)
 8001402:	b513      	push	{r0, r1, r4, lr}
 8001404:	681c      	ldr	r4, [r3, #0]
 8001406:	4601      	mov	r1, r0
 8001408:	b134      	cbz	r4, 8001418 <putchar+0x18>
 800140a:	69a3      	ldr	r3, [r4, #24]
 800140c:	b923      	cbnz	r3, 8001418 <putchar+0x18>
 800140e:	9001      	str	r0, [sp, #4]
 8001410:	4620      	mov	r0, r4
 8001412:	f000 f9e5 	bl	80017e0 <__sinit>
 8001416:	9901      	ldr	r1, [sp, #4]
 8001418:	68a2      	ldr	r2, [r4, #8]
 800141a:	4620      	mov	r0, r4
 800141c:	b002      	add	sp, #8
 800141e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001422:	f000 bb8b 	b.w	8001b3c <_putc_r>
 8001426:	bf00      	nop
 8001428:	20000004 	.word	0x20000004

0800142c <__swbuf_r>:
 800142c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800142e:	460e      	mov	r6, r1
 8001430:	4614      	mov	r4, r2
 8001432:	4605      	mov	r5, r0
 8001434:	b118      	cbz	r0, 800143e <__swbuf_r+0x12>
 8001436:	6983      	ldr	r3, [r0, #24]
 8001438:	b90b      	cbnz	r3, 800143e <__swbuf_r+0x12>
 800143a:	f000 f9d1 	bl	80017e0 <__sinit>
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <__swbuf_r+0x98>)
 8001440:	429c      	cmp	r4, r3
 8001442:	d12b      	bne.n	800149c <__swbuf_r+0x70>
 8001444:	686c      	ldr	r4, [r5, #4]
 8001446:	69a3      	ldr	r3, [r4, #24]
 8001448:	60a3      	str	r3, [r4, #8]
 800144a:	89a3      	ldrh	r3, [r4, #12]
 800144c:	071a      	lsls	r2, r3, #28
 800144e:	d52f      	bpl.n	80014b0 <__swbuf_r+0x84>
 8001450:	6923      	ldr	r3, [r4, #16]
 8001452:	b36b      	cbz	r3, 80014b0 <__swbuf_r+0x84>
 8001454:	6923      	ldr	r3, [r4, #16]
 8001456:	6820      	ldr	r0, [r4, #0]
 8001458:	1ac0      	subs	r0, r0, r3
 800145a:	6963      	ldr	r3, [r4, #20]
 800145c:	b2f6      	uxtb	r6, r6
 800145e:	4283      	cmp	r3, r0
 8001460:	4637      	mov	r7, r6
 8001462:	dc04      	bgt.n	800146e <__swbuf_r+0x42>
 8001464:	4621      	mov	r1, r4
 8001466:	4628      	mov	r0, r5
 8001468:	f000 f926 	bl	80016b8 <_fflush_r>
 800146c:	bb30      	cbnz	r0, 80014bc <__swbuf_r+0x90>
 800146e:	68a3      	ldr	r3, [r4, #8]
 8001470:	3b01      	subs	r3, #1
 8001472:	60a3      	str	r3, [r4, #8]
 8001474:	6823      	ldr	r3, [r4, #0]
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	6022      	str	r2, [r4, #0]
 800147a:	701e      	strb	r6, [r3, #0]
 800147c:	6963      	ldr	r3, [r4, #20]
 800147e:	3001      	adds	r0, #1
 8001480:	4283      	cmp	r3, r0
 8001482:	d004      	beq.n	800148e <__swbuf_r+0x62>
 8001484:	89a3      	ldrh	r3, [r4, #12]
 8001486:	07db      	lsls	r3, r3, #31
 8001488:	d506      	bpl.n	8001498 <__swbuf_r+0x6c>
 800148a:	2e0a      	cmp	r6, #10
 800148c:	d104      	bne.n	8001498 <__swbuf_r+0x6c>
 800148e:	4621      	mov	r1, r4
 8001490:	4628      	mov	r0, r5
 8001492:	f000 f911 	bl	80016b8 <_fflush_r>
 8001496:	b988      	cbnz	r0, 80014bc <__swbuf_r+0x90>
 8001498:	4638      	mov	r0, r7
 800149a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <__swbuf_r+0x9c>)
 800149e:	429c      	cmp	r4, r3
 80014a0:	d101      	bne.n	80014a6 <__swbuf_r+0x7a>
 80014a2:	68ac      	ldr	r4, [r5, #8]
 80014a4:	e7cf      	b.n	8001446 <__swbuf_r+0x1a>
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <__swbuf_r+0xa0>)
 80014a8:	429c      	cmp	r4, r3
 80014aa:	bf08      	it	eq
 80014ac:	68ec      	ldreq	r4, [r5, #12]
 80014ae:	e7ca      	b.n	8001446 <__swbuf_r+0x1a>
 80014b0:	4621      	mov	r1, r4
 80014b2:	4628      	mov	r0, r5
 80014b4:	f000 f80c 	bl	80014d0 <__swsetup_r>
 80014b8:	2800      	cmp	r0, #0
 80014ba:	d0cb      	beq.n	8001454 <__swbuf_r+0x28>
 80014bc:	f04f 37ff 	mov.w	r7, #4294967295
 80014c0:	e7ea      	b.n	8001498 <__swbuf_r+0x6c>
 80014c2:	bf00      	nop
 80014c4:	08001f14 	.word	0x08001f14
 80014c8:	08001f34 	.word	0x08001f34
 80014cc:	08001ef4 	.word	0x08001ef4

080014d0 <__swsetup_r>:
 80014d0:	4b32      	ldr	r3, [pc, #200]	; (800159c <__swsetup_r+0xcc>)
 80014d2:	b570      	push	{r4, r5, r6, lr}
 80014d4:	681d      	ldr	r5, [r3, #0]
 80014d6:	4606      	mov	r6, r0
 80014d8:	460c      	mov	r4, r1
 80014da:	b125      	cbz	r5, 80014e6 <__swsetup_r+0x16>
 80014dc:	69ab      	ldr	r3, [r5, #24]
 80014de:	b913      	cbnz	r3, 80014e6 <__swsetup_r+0x16>
 80014e0:	4628      	mov	r0, r5
 80014e2:	f000 f97d 	bl	80017e0 <__sinit>
 80014e6:	4b2e      	ldr	r3, [pc, #184]	; (80015a0 <__swsetup_r+0xd0>)
 80014e8:	429c      	cmp	r4, r3
 80014ea:	d10f      	bne.n	800150c <__swsetup_r+0x3c>
 80014ec:	686c      	ldr	r4, [r5, #4]
 80014ee:	89a3      	ldrh	r3, [r4, #12]
 80014f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80014f4:	0719      	lsls	r1, r3, #28
 80014f6:	d42c      	bmi.n	8001552 <__swsetup_r+0x82>
 80014f8:	06dd      	lsls	r5, r3, #27
 80014fa:	d411      	bmi.n	8001520 <__swsetup_r+0x50>
 80014fc:	2309      	movs	r3, #9
 80014fe:	6033      	str	r3, [r6, #0]
 8001500:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001504:	81a3      	strh	r3, [r4, #12]
 8001506:	f04f 30ff 	mov.w	r0, #4294967295
 800150a:	e03e      	b.n	800158a <__swsetup_r+0xba>
 800150c:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <__swsetup_r+0xd4>)
 800150e:	429c      	cmp	r4, r3
 8001510:	d101      	bne.n	8001516 <__swsetup_r+0x46>
 8001512:	68ac      	ldr	r4, [r5, #8]
 8001514:	e7eb      	b.n	80014ee <__swsetup_r+0x1e>
 8001516:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <__swsetup_r+0xd8>)
 8001518:	429c      	cmp	r4, r3
 800151a:	bf08      	it	eq
 800151c:	68ec      	ldreq	r4, [r5, #12]
 800151e:	e7e6      	b.n	80014ee <__swsetup_r+0x1e>
 8001520:	0758      	lsls	r0, r3, #29
 8001522:	d512      	bpl.n	800154a <__swsetup_r+0x7a>
 8001524:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001526:	b141      	cbz	r1, 800153a <__swsetup_r+0x6a>
 8001528:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800152c:	4299      	cmp	r1, r3
 800152e:	d002      	beq.n	8001536 <__swsetup_r+0x66>
 8001530:	4630      	mov	r0, r6
 8001532:	f000 fa59 	bl	80019e8 <_free_r>
 8001536:	2300      	movs	r3, #0
 8001538:	6363      	str	r3, [r4, #52]	; 0x34
 800153a:	89a3      	ldrh	r3, [r4, #12]
 800153c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001540:	81a3      	strh	r3, [r4, #12]
 8001542:	2300      	movs	r3, #0
 8001544:	6063      	str	r3, [r4, #4]
 8001546:	6923      	ldr	r3, [r4, #16]
 8001548:	6023      	str	r3, [r4, #0]
 800154a:	89a3      	ldrh	r3, [r4, #12]
 800154c:	f043 0308 	orr.w	r3, r3, #8
 8001550:	81a3      	strh	r3, [r4, #12]
 8001552:	6923      	ldr	r3, [r4, #16]
 8001554:	b94b      	cbnz	r3, 800156a <__swsetup_r+0x9a>
 8001556:	89a3      	ldrh	r3, [r4, #12]
 8001558:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800155c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001560:	d003      	beq.n	800156a <__swsetup_r+0x9a>
 8001562:	4621      	mov	r1, r4
 8001564:	4630      	mov	r0, r6
 8001566:	f000 f9ff 	bl	8001968 <__smakebuf_r>
 800156a:	89a0      	ldrh	r0, [r4, #12]
 800156c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001570:	f010 0301 	ands.w	r3, r0, #1
 8001574:	d00a      	beq.n	800158c <__swsetup_r+0xbc>
 8001576:	2300      	movs	r3, #0
 8001578:	60a3      	str	r3, [r4, #8]
 800157a:	6963      	ldr	r3, [r4, #20]
 800157c:	425b      	negs	r3, r3
 800157e:	61a3      	str	r3, [r4, #24]
 8001580:	6923      	ldr	r3, [r4, #16]
 8001582:	b943      	cbnz	r3, 8001596 <__swsetup_r+0xc6>
 8001584:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001588:	d1ba      	bne.n	8001500 <__swsetup_r+0x30>
 800158a:	bd70      	pop	{r4, r5, r6, pc}
 800158c:	0781      	lsls	r1, r0, #30
 800158e:	bf58      	it	pl
 8001590:	6963      	ldrpl	r3, [r4, #20]
 8001592:	60a3      	str	r3, [r4, #8]
 8001594:	e7f4      	b.n	8001580 <__swsetup_r+0xb0>
 8001596:	2000      	movs	r0, #0
 8001598:	e7f7      	b.n	800158a <__swsetup_r+0xba>
 800159a:	bf00      	nop
 800159c:	20000004 	.word	0x20000004
 80015a0:	08001f14 	.word	0x08001f14
 80015a4:	08001f34 	.word	0x08001f34
 80015a8:	08001ef4 	.word	0x08001ef4

080015ac <__sflush_r>:
 80015ac:	898a      	ldrh	r2, [r1, #12]
 80015ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015b2:	4605      	mov	r5, r0
 80015b4:	0710      	lsls	r0, r2, #28
 80015b6:	460c      	mov	r4, r1
 80015b8:	d458      	bmi.n	800166c <__sflush_r+0xc0>
 80015ba:	684b      	ldr	r3, [r1, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	dc05      	bgt.n	80015cc <__sflush_r+0x20>
 80015c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	dc02      	bgt.n	80015cc <__sflush_r+0x20>
 80015c6:	2000      	movs	r0, #0
 80015c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80015ce:	2e00      	cmp	r6, #0
 80015d0:	d0f9      	beq.n	80015c6 <__sflush_r+0x1a>
 80015d2:	2300      	movs	r3, #0
 80015d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80015d8:	682f      	ldr	r7, [r5, #0]
 80015da:	602b      	str	r3, [r5, #0]
 80015dc:	d032      	beq.n	8001644 <__sflush_r+0x98>
 80015de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80015e0:	89a3      	ldrh	r3, [r4, #12]
 80015e2:	075a      	lsls	r2, r3, #29
 80015e4:	d505      	bpl.n	80015f2 <__sflush_r+0x46>
 80015e6:	6863      	ldr	r3, [r4, #4]
 80015e8:	1ac0      	subs	r0, r0, r3
 80015ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80015ec:	b10b      	cbz	r3, 80015f2 <__sflush_r+0x46>
 80015ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015f0:	1ac0      	subs	r0, r0, r3
 80015f2:	2300      	movs	r3, #0
 80015f4:	4602      	mov	r2, r0
 80015f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80015f8:	6a21      	ldr	r1, [r4, #32]
 80015fa:	4628      	mov	r0, r5
 80015fc:	47b0      	blx	r6
 80015fe:	1c43      	adds	r3, r0, #1
 8001600:	89a3      	ldrh	r3, [r4, #12]
 8001602:	d106      	bne.n	8001612 <__sflush_r+0x66>
 8001604:	6829      	ldr	r1, [r5, #0]
 8001606:	291d      	cmp	r1, #29
 8001608:	d82c      	bhi.n	8001664 <__sflush_r+0xb8>
 800160a:	4a2a      	ldr	r2, [pc, #168]	; (80016b4 <__sflush_r+0x108>)
 800160c:	40ca      	lsrs	r2, r1
 800160e:	07d6      	lsls	r6, r2, #31
 8001610:	d528      	bpl.n	8001664 <__sflush_r+0xb8>
 8001612:	2200      	movs	r2, #0
 8001614:	6062      	str	r2, [r4, #4]
 8001616:	04d9      	lsls	r1, r3, #19
 8001618:	6922      	ldr	r2, [r4, #16]
 800161a:	6022      	str	r2, [r4, #0]
 800161c:	d504      	bpl.n	8001628 <__sflush_r+0x7c>
 800161e:	1c42      	adds	r2, r0, #1
 8001620:	d101      	bne.n	8001626 <__sflush_r+0x7a>
 8001622:	682b      	ldr	r3, [r5, #0]
 8001624:	b903      	cbnz	r3, 8001628 <__sflush_r+0x7c>
 8001626:	6560      	str	r0, [r4, #84]	; 0x54
 8001628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800162a:	602f      	str	r7, [r5, #0]
 800162c:	2900      	cmp	r1, #0
 800162e:	d0ca      	beq.n	80015c6 <__sflush_r+0x1a>
 8001630:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001634:	4299      	cmp	r1, r3
 8001636:	d002      	beq.n	800163e <__sflush_r+0x92>
 8001638:	4628      	mov	r0, r5
 800163a:	f000 f9d5 	bl	80019e8 <_free_r>
 800163e:	2000      	movs	r0, #0
 8001640:	6360      	str	r0, [r4, #52]	; 0x34
 8001642:	e7c1      	b.n	80015c8 <__sflush_r+0x1c>
 8001644:	6a21      	ldr	r1, [r4, #32]
 8001646:	2301      	movs	r3, #1
 8001648:	4628      	mov	r0, r5
 800164a:	47b0      	blx	r6
 800164c:	1c41      	adds	r1, r0, #1
 800164e:	d1c7      	bne.n	80015e0 <__sflush_r+0x34>
 8001650:	682b      	ldr	r3, [r5, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0c4      	beq.n	80015e0 <__sflush_r+0x34>
 8001656:	2b1d      	cmp	r3, #29
 8001658:	d001      	beq.n	800165e <__sflush_r+0xb2>
 800165a:	2b16      	cmp	r3, #22
 800165c:	d101      	bne.n	8001662 <__sflush_r+0xb6>
 800165e:	602f      	str	r7, [r5, #0]
 8001660:	e7b1      	b.n	80015c6 <__sflush_r+0x1a>
 8001662:	89a3      	ldrh	r3, [r4, #12]
 8001664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001668:	81a3      	strh	r3, [r4, #12]
 800166a:	e7ad      	b.n	80015c8 <__sflush_r+0x1c>
 800166c:	690f      	ldr	r7, [r1, #16]
 800166e:	2f00      	cmp	r7, #0
 8001670:	d0a9      	beq.n	80015c6 <__sflush_r+0x1a>
 8001672:	0793      	lsls	r3, r2, #30
 8001674:	680e      	ldr	r6, [r1, #0]
 8001676:	bf08      	it	eq
 8001678:	694b      	ldreq	r3, [r1, #20]
 800167a:	600f      	str	r7, [r1, #0]
 800167c:	bf18      	it	ne
 800167e:	2300      	movne	r3, #0
 8001680:	eba6 0807 	sub.w	r8, r6, r7
 8001684:	608b      	str	r3, [r1, #8]
 8001686:	f1b8 0f00 	cmp.w	r8, #0
 800168a:	dd9c      	ble.n	80015c6 <__sflush_r+0x1a>
 800168c:	6a21      	ldr	r1, [r4, #32]
 800168e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001690:	4643      	mov	r3, r8
 8001692:	463a      	mov	r2, r7
 8001694:	4628      	mov	r0, r5
 8001696:	47b0      	blx	r6
 8001698:	2800      	cmp	r0, #0
 800169a:	dc06      	bgt.n	80016aa <__sflush_r+0xfe>
 800169c:	89a3      	ldrh	r3, [r4, #12]
 800169e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016a2:	81a3      	strh	r3, [r4, #12]
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295
 80016a8:	e78e      	b.n	80015c8 <__sflush_r+0x1c>
 80016aa:	4407      	add	r7, r0
 80016ac:	eba8 0800 	sub.w	r8, r8, r0
 80016b0:	e7e9      	b.n	8001686 <__sflush_r+0xda>
 80016b2:	bf00      	nop
 80016b4:	20400001 	.word	0x20400001

080016b8 <_fflush_r>:
 80016b8:	b538      	push	{r3, r4, r5, lr}
 80016ba:	690b      	ldr	r3, [r1, #16]
 80016bc:	4605      	mov	r5, r0
 80016be:	460c      	mov	r4, r1
 80016c0:	b913      	cbnz	r3, 80016c8 <_fflush_r+0x10>
 80016c2:	2500      	movs	r5, #0
 80016c4:	4628      	mov	r0, r5
 80016c6:	bd38      	pop	{r3, r4, r5, pc}
 80016c8:	b118      	cbz	r0, 80016d2 <_fflush_r+0x1a>
 80016ca:	6983      	ldr	r3, [r0, #24]
 80016cc:	b90b      	cbnz	r3, 80016d2 <_fflush_r+0x1a>
 80016ce:	f000 f887 	bl	80017e0 <__sinit>
 80016d2:	4b14      	ldr	r3, [pc, #80]	; (8001724 <_fflush_r+0x6c>)
 80016d4:	429c      	cmp	r4, r3
 80016d6:	d11b      	bne.n	8001710 <_fflush_r+0x58>
 80016d8:	686c      	ldr	r4, [r5, #4]
 80016da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0ef      	beq.n	80016c2 <_fflush_r+0xa>
 80016e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80016e4:	07d0      	lsls	r0, r2, #31
 80016e6:	d404      	bmi.n	80016f2 <_fflush_r+0x3a>
 80016e8:	0599      	lsls	r1, r3, #22
 80016ea:	d402      	bmi.n	80016f2 <_fflush_r+0x3a>
 80016ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80016ee:	f000 f915 	bl	800191c <__retarget_lock_acquire_recursive>
 80016f2:	4628      	mov	r0, r5
 80016f4:	4621      	mov	r1, r4
 80016f6:	f7ff ff59 	bl	80015ac <__sflush_r>
 80016fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80016fc:	07da      	lsls	r2, r3, #31
 80016fe:	4605      	mov	r5, r0
 8001700:	d4e0      	bmi.n	80016c4 <_fflush_r+0xc>
 8001702:	89a3      	ldrh	r3, [r4, #12]
 8001704:	059b      	lsls	r3, r3, #22
 8001706:	d4dd      	bmi.n	80016c4 <_fflush_r+0xc>
 8001708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800170a:	f000 f908 	bl	800191e <__retarget_lock_release_recursive>
 800170e:	e7d9      	b.n	80016c4 <_fflush_r+0xc>
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <_fflush_r+0x70>)
 8001712:	429c      	cmp	r4, r3
 8001714:	d101      	bne.n	800171a <_fflush_r+0x62>
 8001716:	68ac      	ldr	r4, [r5, #8]
 8001718:	e7df      	b.n	80016da <_fflush_r+0x22>
 800171a:	4b04      	ldr	r3, [pc, #16]	; (800172c <_fflush_r+0x74>)
 800171c:	429c      	cmp	r4, r3
 800171e:	bf08      	it	eq
 8001720:	68ec      	ldreq	r4, [r5, #12]
 8001722:	e7da      	b.n	80016da <_fflush_r+0x22>
 8001724:	08001f14 	.word	0x08001f14
 8001728:	08001f34 	.word	0x08001f34
 800172c:	08001ef4 	.word	0x08001ef4

08001730 <std>:
 8001730:	2300      	movs	r3, #0
 8001732:	b510      	push	{r4, lr}
 8001734:	4604      	mov	r4, r0
 8001736:	e9c0 3300 	strd	r3, r3, [r0]
 800173a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800173e:	6083      	str	r3, [r0, #8]
 8001740:	8181      	strh	r1, [r0, #12]
 8001742:	6643      	str	r3, [r0, #100]	; 0x64
 8001744:	81c2      	strh	r2, [r0, #14]
 8001746:	6183      	str	r3, [r0, #24]
 8001748:	4619      	mov	r1, r3
 800174a:	2208      	movs	r2, #8
 800174c:	305c      	adds	r0, #92	; 0x5c
 800174e:	f7ff fb3f 	bl	8000dd0 <memset>
 8001752:	4b05      	ldr	r3, [pc, #20]	; (8001768 <std+0x38>)
 8001754:	6263      	str	r3, [r4, #36]	; 0x24
 8001756:	4b05      	ldr	r3, [pc, #20]	; (800176c <std+0x3c>)
 8001758:	62a3      	str	r3, [r4, #40]	; 0x28
 800175a:	4b05      	ldr	r3, [pc, #20]	; (8001770 <std+0x40>)
 800175c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800175e:	4b05      	ldr	r3, [pc, #20]	; (8001774 <std+0x44>)
 8001760:	6224      	str	r4, [r4, #32]
 8001762:	6323      	str	r3, [r4, #48]	; 0x30
 8001764:	bd10      	pop	{r4, pc}
 8001766:	bf00      	nop
 8001768:	08001bed 	.word	0x08001bed
 800176c:	08001c0f 	.word	0x08001c0f
 8001770:	08001c47 	.word	0x08001c47
 8001774:	08001c6b 	.word	0x08001c6b

08001778 <_cleanup_r>:
 8001778:	4901      	ldr	r1, [pc, #4]	; (8001780 <_cleanup_r+0x8>)
 800177a:	f000 b8af 	b.w	80018dc <_fwalk_reent>
 800177e:	bf00      	nop
 8001780:	080016b9 	.word	0x080016b9

08001784 <__sfmoreglue>:
 8001784:	b570      	push	{r4, r5, r6, lr}
 8001786:	1e4a      	subs	r2, r1, #1
 8001788:	2568      	movs	r5, #104	; 0x68
 800178a:	4355      	muls	r5, r2
 800178c:	460e      	mov	r6, r1
 800178e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001792:	f000 f979 	bl	8001a88 <_malloc_r>
 8001796:	4604      	mov	r4, r0
 8001798:	b140      	cbz	r0, 80017ac <__sfmoreglue+0x28>
 800179a:	2100      	movs	r1, #0
 800179c:	e9c0 1600 	strd	r1, r6, [r0]
 80017a0:	300c      	adds	r0, #12
 80017a2:	60a0      	str	r0, [r4, #8]
 80017a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80017a8:	f7ff fb12 	bl	8000dd0 <memset>
 80017ac:	4620      	mov	r0, r4
 80017ae:	bd70      	pop	{r4, r5, r6, pc}

080017b0 <__sfp_lock_acquire>:
 80017b0:	4801      	ldr	r0, [pc, #4]	; (80017b8 <__sfp_lock_acquire+0x8>)
 80017b2:	f000 b8b3 	b.w	800191c <__retarget_lock_acquire_recursive>
 80017b6:	bf00      	nop
 80017b8:	200000d0 	.word	0x200000d0

080017bc <__sfp_lock_release>:
 80017bc:	4801      	ldr	r0, [pc, #4]	; (80017c4 <__sfp_lock_release+0x8>)
 80017be:	f000 b8ae 	b.w	800191e <__retarget_lock_release_recursive>
 80017c2:	bf00      	nop
 80017c4:	200000d0 	.word	0x200000d0

080017c8 <__sinit_lock_acquire>:
 80017c8:	4801      	ldr	r0, [pc, #4]	; (80017d0 <__sinit_lock_acquire+0x8>)
 80017ca:	f000 b8a7 	b.w	800191c <__retarget_lock_acquire_recursive>
 80017ce:	bf00      	nop
 80017d0:	200000cb 	.word	0x200000cb

080017d4 <__sinit_lock_release>:
 80017d4:	4801      	ldr	r0, [pc, #4]	; (80017dc <__sinit_lock_release+0x8>)
 80017d6:	f000 b8a2 	b.w	800191e <__retarget_lock_release_recursive>
 80017da:	bf00      	nop
 80017dc:	200000cb 	.word	0x200000cb

080017e0 <__sinit>:
 80017e0:	b510      	push	{r4, lr}
 80017e2:	4604      	mov	r4, r0
 80017e4:	f7ff fff0 	bl	80017c8 <__sinit_lock_acquire>
 80017e8:	69a3      	ldr	r3, [r4, #24]
 80017ea:	b11b      	cbz	r3, 80017f4 <__sinit+0x14>
 80017ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017f0:	f7ff bff0 	b.w	80017d4 <__sinit_lock_release>
 80017f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80017f8:	6523      	str	r3, [r4, #80]	; 0x50
 80017fa:	4b13      	ldr	r3, [pc, #76]	; (8001848 <__sinit+0x68>)
 80017fc:	4a13      	ldr	r2, [pc, #76]	; (800184c <__sinit+0x6c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	62a2      	str	r2, [r4, #40]	; 0x28
 8001802:	42a3      	cmp	r3, r4
 8001804:	bf04      	itt	eq
 8001806:	2301      	moveq	r3, #1
 8001808:	61a3      	streq	r3, [r4, #24]
 800180a:	4620      	mov	r0, r4
 800180c:	f000 f820 	bl	8001850 <__sfp>
 8001810:	6060      	str	r0, [r4, #4]
 8001812:	4620      	mov	r0, r4
 8001814:	f000 f81c 	bl	8001850 <__sfp>
 8001818:	60a0      	str	r0, [r4, #8]
 800181a:	4620      	mov	r0, r4
 800181c:	f000 f818 	bl	8001850 <__sfp>
 8001820:	2200      	movs	r2, #0
 8001822:	60e0      	str	r0, [r4, #12]
 8001824:	2104      	movs	r1, #4
 8001826:	6860      	ldr	r0, [r4, #4]
 8001828:	f7ff ff82 	bl	8001730 <std>
 800182c:	68a0      	ldr	r0, [r4, #8]
 800182e:	2201      	movs	r2, #1
 8001830:	2109      	movs	r1, #9
 8001832:	f7ff ff7d 	bl	8001730 <std>
 8001836:	68e0      	ldr	r0, [r4, #12]
 8001838:	2202      	movs	r2, #2
 800183a:	2112      	movs	r1, #18
 800183c:	f7ff ff78 	bl	8001730 <std>
 8001840:	2301      	movs	r3, #1
 8001842:	61a3      	str	r3, [r4, #24]
 8001844:	e7d2      	b.n	80017ec <__sinit+0xc>
 8001846:	bf00      	nop
 8001848:	08001ebc 	.word	0x08001ebc
 800184c:	08001779 	.word	0x08001779

08001850 <__sfp>:
 8001850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001852:	4607      	mov	r7, r0
 8001854:	f7ff ffac 	bl	80017b0 <__sfp_lock_acquire>
 8001858:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <__sfp+0x84>)
 800185a:	681e      	ldr	r6, [r3, #0]
 800185c:	69b3      	ldr	r3, [r6, #24]
 800185e:	b913      	cbnz	r3, 8001866 <__sfp+0x16>
 8001860:	4630      	mov	r0, r6
 8001862:	f7ff ffbd 	bl	80017e0 <__sinit>
 8001866:	3648      	adds	r6, #72	; 0x48
 8001868:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800186c:	3b01      	subs	r3, #1
 800186e:	d503      	bpl.n	8001878 <__sfp+0x28>
 8001870:	6833      	ldr	r3, [r6, #0]
 8001872:	b30b      	cbz	r3, 80018b8 <__sfp+0x68>
 8001874:	6836      	ldr	r6, [r6, #0]
 8001876:	e7f7      	b.n	8001868 <__sfp+0x18>
 8001878:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800187c:	b9d5      	cbnz	r5, 80018b4 <__sfp+0x64>
 800187e:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <__sfp+0x88>)
 8001880:	60e3      	str	r3, [r4, #12]
 8001882:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001886:	6665      	str	r5, [r4, #100]	; 0x64
 8001888:	f000 f847 	bl	800191a <__retarget_lock_init_recursive>
 800188c:	f7ff ff96 	bl	80017bc <__sfp_lock_release>
 8001890:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001894:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001898:	6025      	str	r5, [r4, #0]
 800189a:	61a5      	str	r5, [r4, #24]
 800189c:	2208      	movs	r2, #8
 800189e:	4629      	mov	r1, r5
 80018a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80018a4:	f7ff fa94 	bl	8000dd0 <memset>
 80018a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80018ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80018b0:	4620      	mov	r0, r4
 80018b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018b4:	3468      	adds	r4, #104	; 0x68
 80018b6:	e7d9      	b.n	800186c <__sfp+0x1c>
 80018b8:	2104      	movs	r1, #4
 80018ba:	4638      	mov	r0, r7
 80018bc:	f7ff ff62 	bl	8001784 <__sfmoreglue>
 80018c0:	4604      	mov	r4, r0
 80018c2:	6030      	str	r0, [r6, #0]
 80018c4:	2800      	cmp	r0, #0
 80018c6:	d1d5      	bne.n	8001874 <__sfp+0x24>
 80018c8:	f7ff ff78 	bl	80017bc <__sfp_lock_release>
 80018cc:	230c      	movs	r3, #12
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	e7ee      	b.n	80018b0 <__sfp+0x60>
 80018d2:	bf00      	nop
 80018d4:	08001ebc 	.word	0x08001ebc
 80018d8:	ffff0001 	.word	0xffff0001

080018dc <_fwalk_reent>:
 80018dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018e0:	4606      	mov	r6, r0
 80018e2:	4688      	mov	r8, r1
 80018e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80018e8:	2700      	movs	r7, #0
 80018ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80018ee:	f1b9 0901 	subs.w	r9, r9, #1
 80018f2:	d505      	bpl.n	8001900 <_fwalk_reent+0x24>
 80018f4:	6824      	ldr	r4, [r4, #0]
 80018f6:	2c00      	cmp	r4, #0
 80018f8:	d1f7      	bne.n	80018ea <_fwalk_reent+0xe>
 80018fa:	4638      	mov	r0, r7
 80018fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001900:	89ab      	ldrh	r3, [r5, #12]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d907      	bls.n	8001916 <_fwalk_reent+0x3a>
 8001906:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800190a:	3301      	adds	r3, #1
 800190c:	d003      	beq.n	8001916 <_fwalk_reent+0x3a>
 800190e:	4629      	mov	r1, r5
 8001910:	4630      	mov	r0, r6
 8001912:	47c0      	blx	r8
 8001914:	4307      	orrs	r7, r0
 8001916:	3568      	adds	r5, #104	; 0x68
 8001918:	e7e9      	b.n	80018ee <_fwalk_reent+0x12>

0800191a <__retarget_lock_init_recursive>:
 800191a:	4770      	bx	lr

0800191c <__retarget_lock_acquire_recursive>:
 800191c:	4770      	bx	lr

0800191e <__retarget_lock_release_recursive>:
 800191e:	4770      	bx	lr

08001920 <__swhatbuf_r>:
 8001920:	b570      	push	{r4, r5, r6, lr}
 8001922:	460e      	mov	r6, r1
 8001924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001928:	2900      	cmp	r1, #0
 800192a:	b096      	sub	sp, #88	; 0x58
 800192c:	4614      	mov	r4, r2
 800192e:	461d      	mov	r5, r3
 8001930:	da07      	bge.n	8001942 <__swhatbuf_r+0x22>
 8001932:	2300      	movs	r3, #0
 8001934:	602b      	str	r3, [r5, #0]
 8001936:	89b3      	ldrh	r3, [r6, #12]
 8001938:	061a      	lsls	r2, r3, #24
 800193a:	d410      	bmi.n	800195e <__swhatbuf_r+0x3e>
 800193c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001940:	e00e      	b.n	8001960 <__swhatbuf_r+0x40>
 8001942:	466a      	mov	r2, sp
 8001944:	f000 f9b8 	bl	8001cb8 <_fstat_r>
 8001948:	2800      	cmp	r0, #0
 800194a:	dbf2      	blt.n	8001932 <__swhatbuf_r+0x12>
 800194c:	9a01      	ldr	r2, [sp, #4]
 800194e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001952:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001956:	425a      	negs	r2, r3
 8001958:	415a      	adcs	r2, r3
 800195a:	602a      	str	r2, [r5, #0]
 800195c:	e7ee      	b.n	800193c <__swhatbuf_r+0x1c>
 800195e:	2340      	movs	r3, #64	; 0x40
 8001960:	2000      	movs	r0, #0
 8001962:	6023      	str	r3, [r4, #0]
 8001964:	b016      	add	sp, #88	; 0x58
 8001966:	bd70      	pop	{r4, r5, r6, pc}

08001968 <__smakebuf_r>:
 8001968:	898b      	ldrh	r3, [r1, #12]
 800196a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800196c:	079d      	lsls	r5, r3, #30
 800196e:	4606      	mov	r6, r0
 8001970:	460c      	mov	r4, r1
 8001972:	d507      	bpl.n	8001984 <__smakebuf_r+0x1c>
 8001974:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001978:	6023      	str	r3, [r4, #0]
 800197a:	6123      	str	r3, [r4, #16]
 800197c:	2301      	movs	r3, #1
 800197e:	6163      	str	r3, [r4, #20]
 8001980:	b002      	add	sp, #8
 8001982:	bd70      	pop	{r4, r5, r6, pc}
 8001984:	ab01      	add	r3, sp, #4
 8001986:	466a      	mov	r2, sp
 8001988:	f7ff ffca 	bl	8001920 <__swhatbuf_r>
 800198c:	9900      	ldr	r1, [sp, #0]
 800198e:	4605      	mov	r5, r0
 8001990:	4630      	mov	r0, r6
 8001992:	f000 f879 	bl	8001a88 <_malloc_r>
 8001996:	b948      	cbnz	r0, 80019ac <__smakebuf_r+0x44>
 8001998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800199c:	059a      	lsls	r2, r3, #22
 800199e:	d4ef      	bmi.n	8001980 <__smakebuf_r+0x18>
 80019a0:	f023 0303 	bic.w	r3, r3, #3
 80019a4:	f043 0302 	orr.w	r3, r3, #2
 80019a8:	81a3      	strh	r3, [r4, #12]
 80019aa:	e7e3      	b.n	8001974 <__smakebuf_r+0xc>
 80019ac:	4b0d      	ldr	r3, [pc, #52]	; (80019e4 <__smakebuf_r+0x7c>)
 80019ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80019b0:	89a3      	ldrh	r3, [r4, #12]
 80019b2:	6020      	str	r0, [r4, #0]
 80019b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b8:	81a3      	strh	r3, [r4, #12]
 80019ba:	9b00      	ldr	r3, [sp, #0]
 80019bc:	6163      	str	r3, [r4, #20]
 80019be:	9b01      	ldr	r3, [sp, #4]
 80019c0:	6120      	str	r0, [r4, #16]
 80019c2:	b15b      	cbz	r3, 80019dc <__smakebuf_r+0x74>
 80019c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80019c8:	4630      	mov	r0, r6
 80019ca:	f000 f987 	bl	8001cdc <_isatty_r>
 80019ce:	b128      	cbz	r0, 80019dc <__smakebuf_r+0x74>
 80019d0:	89a3      	ldrh	r3, [r4, #12]
 80019d2:	f023 0303 	bic.w	r3, r3, #3
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	81a3      	strh	r3, [r4, #12]
 80019dc:	89a0      	ldrh	r0, [r4, #12]
 80019de:	4305      	orrs	r5, r0
 80019e0:	81a5      	strh	r5, [r4, #12]
 80019e2:	e7cd      	b.n	8001980 <__smakebuf_r+0x18>
 80019e4:	08001779 	.word	0x08001779

080019e8 <_free_r>:
 80019e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80019ea:	2900      	cmp	r1, #0
 80019ec:	d048      	beq.n	8001a80 <_free_r+0x98>
 80019ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019f2:	9001      	str	r0, [sp, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f1a1 0404 	sub.w	r4, r1, #4
 80019fa:	bfb8      	it	lt
 80019fc:	18e4      	addlt	r4, r4, r3
 80019fe:	f000 f98f 	bl	8001d20 <__malloc_lock>
 8001a02:	4a20      	ldr	r2, [pc, #128]	; (8001a84 <_free_r+0x9c>)
 8001a04:	9801      	ldr	r0, [sp, #4]
 8001a06:	6813      	ldr	r3, [r2, #0]
 8001a08:	4615      	mov	r5, r2
 8001a0a:	b933      	cbnz	r3, 8001a1a <_free_r+0x32>
 8001a0c:	6063      	str	r3, [r4, #4]
 8001a0e:	6014      	str	r4, [r2, #0]
 8001a10:	b003      	add	sp, #12
 8001a12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001a16:	f000 b989 	b.w	8001d2c <__malloc_unlock>
 8001a1a:	42a3      	cmp	r3, r4
 8001a1c:	d90b      	bls.n	8001a36 <_free_r+0x4e>
 8001a1e:	6821      	ldr	r1, [r4, #0]
 8001a20:	1862      	adds	r2, r4, r1
 8001a22:	4293      	cmp	r3, r2
 8001a24:	bf04      	itt	eq
 8001a26:	681a      	ldreq	r2, [r3, #0]
 8001a28:	685b      	ldreq	r3, [r3, #4]
 8001a2a:	6063      	str	r3, [r4, #4]
 8001a2c:	bf04      	itt	eq
 8001a2e:	1852      	addeq	r2, r2, r1
 8001a30:	6022      	streq	r2, [r4, #0]
 8001a32:	602c      	str	r4, [r5, #0]
 8001a34:	e7ec      	b.n	8001a10 <_free_r+0x28>
 8001a36:	461a      	mov	r2, r3
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	b10b      	cbz	r3, 8001a40 <_free_r+0x58>
 8001a3c:	42a3      	cmp	r3, r4
 8001a3e:	d9fa      	bls.n	8001a36 <_free_r+0x4e>
 8001a40:	6811      	ldr	r1, [r2, #0]
 8001a42:	1855      	adds	r5, r2, r1
 8001a44:	42a5      	cmp	r5, r4
 8001a46:	d10b      	bne.n	8001a60 <_free_r+0x78>
 8001a48:	6824      	ldr	r4, [r4, #0]
 8001a4a:	4421      	add	r1, r4
 8001a4c:	1854      	adds	r4, r2, r1
 8001a4e:	42a3      	cmp	r3, r4
 8001a50:	6011      	str	r1, [r2, #0]
 8001a52:	d1dd      	bne.n	8001a10 <_free_r+0x28>
 8001a54:	681c      	ldr	r4, [r3, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	6053      	str	r3, [r2, #4]
 8001a5a:	4421      	add	r1, r4
 8001a5c:	6011      	str	r1, [r2, #0]
 8001a5e:	e7d7      	b.n	8001a10 <_free_r+0x28>
 8001a60:	d902      	bls.n	8001a68 <_free_r+0x80>
 8001a62:	230c      	movs	r3, #12
 8001a64:	6003      	str	r3, [r0, #0]
 8001a66:	e7d3      	b.n	8001a10 <_free_r+0x28>
 8001a68:	6825      	ldr	r5, [r4, #0]
 8001a6a:	1961      	adds	r1, r4, r5
 8001a6c:	428b      	cmp	r3, r1
 8001a6e:	bf04      	itt	eq
 8001a70:	6819      	ldreq	r1, [r3, #0]
 8001a72:	685b      	ldreq	r3, [r3, #4]
 8001a74:	6063      	str	r3, [r4, #4]
 8001a76:	bf04      	itt	eq
 8001a78:	1949      	addeq	r1, r1, r5
 8001a7a:	6021      	streq	r1, [r4, #0]
 8001a7c:	6054      	str	r4, [r2, #4]
 8001a7e:	e7c7      	b.n	8001a10 <_free_r+0x28>
 8001a80:	b003      	add	sp, #12
 8001a82:	bd30      	pop	{r4, r5, pc}
 8001a84:	20000088 	.word	0x20000088

08001a88 <_malloc_r>:
 8001a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a8a:	1ccd      	adds	r5, r1, #3
 8001a8c:	f025 0503 	bic.w	r5, r5, #3
 8001a90:	3508      	adds	r5, #8
 8001a92:	2d0c      	cmp	r5, #12
 8001a94:	bf38      	it	cc
 8001a96:	250c      	movcc	r5, #12
 8001a98:	2d00      	cmp	r5, #0
 8001a9a:	4606      	mov	r6, r0
 8001a9c:	db01      	blt.n	8001aa2 <_malloc_r+0x1a>
 8001a9e:	42a9      	cmp	r1, r5
 8001aa0:	d903      	bls.n	8001aaa <_malloc_r+0x22>
 8001aa2:	230c      	movs	r3, #12
 8001aa4:	6033      	str	r3, [r6, #0]
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001aaa:	f000 f939 	bl	8001d20 <__malloc_lock>
 8001aae:	4921      	ldr	r1, [pc, #132]	; (8001b34 <_malloc_r+0xac>)
 8001ab0:	680a      	ldr	r2, [r1, #0]
 8001ab2:	4614      	mov	r4, r2
 8001ab4:	b99c      	cbnz	r4, 8001ade <_malloc_r+0x56>
 8001ab6:	4f20      	ldr	r7, [pc, #128]	; (8001b38 <_malloc_r+0xb0>)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	b923      	cbnz	r3, 8001ac6 <_malloc_r+0x3e>
 8001abc:	4621      	mov	r1, r4
 8001abe:	4630      	mov	r0, r6
 8001ac0:	f000 f884 	bl	8001bcc <_sbrk_r>
 8001ac4:	6038      	str	r0, [r7, #0]
 8001ac6:	4629      	mov	r1, r5
 8001ac8:	4630      	mov	r0, r6
 8001aca:	f000 f87f 	bl	8001bcc <_sbrk_r>
 8001ace:	1c43      	adds	r3, r0, #1
 8001ad0:	d123      	bne.n	8001b1a <_malloc_r+0x92>
 8001ad2:	230c      	movs	r3, #12
 8001ad4:	6033      	str	r3, [r6, #0]
 8001ad6:	4630      	mov	r0, r6
 8001ad8:	f000 f928 	bl	8001d2c <__malloc_unlock>
 8001adc:	e7e3      	b.n	8001aa6 <_malloc_r+0x1e>
 8001ade:	6823      	ldr	r3, [r4, #0]
 8001ae0:	1b5b      	subs	r3, r3, r5
 8001ae2:	d417      	bmi.n	8001b14 <_malloc_r+0x8c>
 8001ae4:	2b0b      	cmp	r3, #11
 8001ae6:	d903      	bls.n	8001af0 <_malloc_r+0x68>
 8001ae8:	6023      	str	r3, [r4, #0]
 8001aea:	441c      	add	r4, r3
 8001aec:	6025      	str	r5, [r4, #0]
 8001aee:	e004      	b.n	8001afa <_malloc_r+0x72>
 8001af0:	6863      	ldr	r3, [r4, #4]
 8001af2:	42a2      	cmp	r2, r4
 8001af4:	bf0c      	ite	eq
 8001af6:	600b      	streq	r3, [r1, #0]
 8001af8:	6053      	strne	r3, [r2, #4]
 8001afa:	4630      	mov	r0, r6
 8001afc:	f000 f916 	bl	8001d2c <__malloc_unlock>
 8001b00:	f104 000b 	add.w	r0, r4, #11
 8001b04:	1d23      	adds	r3, r4, #4
 8001b06:	f020 0007 	bic.w	r0, r0, #7
 8001b0a:	1ac2      	subs	r2, r0, r3
 8001b0c:	d0cc      	beq.n	8001aa8 <_malloc_r+0x20>
 8001b0e:	1a1b      	subs	r3, r3, r0
 8001b10:	50a3      	str	r3, [r4, r2]
 8001b12:	e7c9      	b.n	8001aa8 <_malloc_r+0x20>
 8001b14:	4622      	mov	r2, r4
 8001b16:	6864      	ldr	r4, [r4, #4]
 8001b18:	e7cc      	b.n	8001ab4 <_malloc_r+0x2c>
 8001b1a:	1cc4      	adds	r4, r0, #3
 8001b1c:	f024 0403 	bic.w	r4, r4, #3
 8001b20:	42a0      	cmp	r0, r4
 8001b22:	d0e3      	beq.n	8001aec <_malloc_r+0x64>
 8001b24:	1a21      	subs	r1, r4, r0
 8001b26:	4630      	mov	r0, r6
 8001b28:	f000 f850 	bl	8001bcc <_sbrk_r>
 8001b2c:	3001      	adds	r0, #1
 8001b2e:	d1dd      	bne.n	8001aec <_malloc_r+0x64>
 8001b30:	e7cf      	b.n	8001ad2 <_malloc_r+0x4a>
 8001b32:	bf00      	nop
 8001b34:	20000088 	.word	0x20000088
 8001b38:	2000008c 	.word	0x2000008c

08001b3c <_putc_r>:
 8001b3c:	b570      	push	{r4, r5, r6, lr}
 8001b3e:	460d      	mov	r5, r1
 8001b40:	4614      	mov	r4, r2
 8001b42:	4606      	mov	r6, r0
 8001b44:	b118      	cbz	r0, 8001b4e <_putc_r+0x12>
 8001b46:	6983      	ldr	r3, [r0, #24]
 8001b48:	b90b      	cbnz	r3, 8001b4e <_putc_r+0x12>
 8001b4a:	f7ff fe49 	bl	80017e0 <__sinit>
 8001b4e:	4b1c      	ldr	r3, [pc, #112]	; (8001bc0 <_putc_r+0x84>)
 8001b50:	429c      	cmp	r4, r3
 8001b52:	d124      	bne.n	8001b9e <_putc_r+0x62>
 8001b54:	6874      	ldr	r4, [r6, #4]
 8001b56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b58:	07d8      	lsls	r0, r3, #31
 8001b5a:	d405      	bmi.n	8001b68 <_putc_r+0x2c>
 8001b5c:	89a3      	ldrh	r3, [r4, #12]
 8001b5e:	0599      	lsls	r1, r3, #22
 8001b60:	d402      	bmi.n	8001b68 <_putc_r+0x2c>
 8001b62:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b64:	f7ff feda 	bl	800191c <__retarget_lock_acquire_recursive>
 8001b68:	68a3      	ldr	r3, [r4, #8]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	60a3      	str	r3, [r4, #8]
 8001b70:	da05      	bge.n	8001b7e <_putc_r+0x42>
 8001b72:	69a2      	ldr	r2, [r4, #24]
 8001b74:	4293      	cmp	r3, r2
 8001b76:	db1c      	blt.n	8001bb2 <_putc_r+0x76>
 8001b78:	b2eb      	uxtb	r3, r5
 8001b7a:	2b0a      	cmp	r3, #10
 8001b7c:	d019      	beq.n	8001bb2 <_putc_r+0x76>
 8001b7e:	6823      	ldr	r3, [r4, #0]
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	6022      	str	r2, [r4, #0]
 8001b84:	701d      	strb	r5, [r3, #0]
 8001b86:	b2ed      	uxtb	r5, r5
 8001b88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b8a:	07da      	lsls	r2, r3, #31
 8001b8c:	d405      	bmi.n	8001b9a <_putc_r+0x5e>
 8001b8e:	89a3      	ldrh	r3, [r4, #12]
 8001b90:	059b      	lsls	r3, r3, #22
 8001b92:	d402      	bmi.n	8001b9a <_putc_r+0x5e>
 8001b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b96:	f7ff fec2 	bl	800191e <__retarget_lock_release_recursive>
 8001b9a:	4628      	mov	r0, r5
 8001b9c:	bd70      	pop	{r4, r5, r6, pc}
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <_putc_r+0x88>)
 8001ba0:	429c      	cmp	r4, r3
 8001ba2:	d101      	bne.n	8001ba8 <_putc_r+0x6c>
 8001ba4:	68b4      	ldr	r4, [r6, #8]
 8001ba6:	e7d6      	b.n	8001b56 <_putc_r+0x1a>
 8001ba8:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <_putc_r+0x8c>)
 8001baa:	429c      	cmp	r4, r3
 8001bac:	bf08      	it	eq
 8001bae:	68f4      	ldreq	r4, [r6, #12]
 8001bb0:	e7d1      	b.n	8001b56 <_putc_r+0x1a>
 8001bb2:	4629      	mov	r1, r5
 8001bb4:	4622      	mov	r2, r4
 8001bb6:	4630      	mov	r0, r6
 8001bb8:	f7ff fc38 	bl	800142c <__swbuf_r>
 8001bbc:	4605      	mov	r5, r0
 8001bbe:	e7e3      	b.n	8001b88 <_putc_r+0x4c>
 8001bc0:	08001f14 	.word	0x08001f14
 8001bc4:	08001f34 	.word	0x08001f34
 8001bc8:	08001ef4 	.word	0x08001ef4

08001bcc <_sbrk_r>:
 8001bcc:	b538      	push	{r3, r4, r5, lr}
 8001bce:	4d06      	ldr	r5, [pc, #24]	; (8001be8 <_sbrk_r+0x1c>)
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	4604      	mov	r4, r0
 8001bd4:	4608      	mov	r0, r1
 8001bd6:	602b      	str	r3, [r5, #0]
 8001bd8:	f000 f8e8 	bl	8001dac <_sbrk>
 8001bdc:	1c43      	adds	r3, r0, #1
 8001bde:	d102      	bne.n	8001be6 <_sbrk_r+0x1a>
 8001be0:	682b      	ldr	r3, [r5, #0]
 8001be2:	b103      	cbz	r3, 8001be6 <_sbrk_r+0x1a>
 8001be4:	6023      	str	r3, [r4, #0]
 8001be6:	bd38      	pop	{r3, r4, r5, pc}
 8001be8:	200000d4 	.word	0x200000d4

08001bec <__sread>:
 8001bec:	b510      	push	{r4, lr}
 8001bee:	460c      	mov	r4, r1
 8001bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bf4:	f000 f8a0 	bl	8001d38 <_read_r>
 8001bf8:	2800      	cmp	r0, #0
 8001bfa:	bfab      	itete	ge
 8001bfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001bfe:	89a3      	ldrhlt	r3, [r4, #12]
 8001c00:	181b      	addge	r3, r3, r0
 8001c02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001c06:	bfac      	ite	ge
 8001c08:	6563      	strge	r3, [r4, #84]	; 0x54
 8001c0a:	81a3      	strhlt	r3, [r4, #12]
 8001c0c:	bd10      	pop	{r4, pc}

08001c0e <__swrite>:
 8001c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c12:	461f      	mov	r7, r3
 8001c14:	898b      	ldrh	r3, [r1, #12]
 8001c16:	05db      	lsls	r3, r3, #23
 8001c18:	4605      	mov	r5, r0
 8001c1a:	460c      	mov	r4, r1
 8001c1c:	4616      	mov	r6, r2
 8001c1e:	d505      	bpl.n	8001c2c <__swrite+0x1e>
 8001c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c24:	2302      	movs	r3, #2
 8001c26:	2200      	movs	r2, #0
 8001c28:	f000 f868 	bl	8001cfc <_lseek_r>
 8001c2c:	89a3      	ldrh	r3, [r4, #12]
 8001c2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c36:	81a3      	strh	r3, [r4, #12]
 8001c38:	4632      	mov	r2, r6
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	4628      	mov	r0, r5
 8001c3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c42:	f000 b817 	b.w	8001c74 <_write_r>

08001c46 <__sseek>:
 8001c46:	b510      	push	{r4, lr}
 8001c48:	460c      	mov	r4, r1
 8001c4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c4e:	f000 f855 	bl	8001cfc <_lseek_r>
 8001c52:	1c43      	adds	r3, r0, #1
 8001c54:	89a3      	ldrh	r3, [r4, #12]
 8001c56:	bf15      	itete	ne
 8001c58:	6560      	strne	r0, [r4, #84]	; 0x54
 8001c5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001c5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001c62:	81a3      	strheq	r3, [r4, #12]
 8001c64:	bf18      	it	ne
 8001c66:	81a3      	strhne	r3, [r4, #12]
 8001c68:	bd10      	pop	{r4, pc}

08001c6a <__sclose>:
 8001c6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c6e:	f000 b813 	b.w	8001c98 <_close_r>
	...

08001c74 <_write_r>:
 8001c74:	b538      	push	{r3, r4, r5, lr}
 8001c76:	4d07      	ldr	r5, [pc, #28]	; (8001c94 <_write_r+0x20>)
 8001c78:	4604      	mov	r4, r0
 8001c7a:	4608      	mov	r0, r1
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	2200      	movs	r2, #0
 8001c80:	602a      	str	r2, [r5, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	f7fe fb2b 	bl	80002de <_write>
 8001c88:	1c43      	adds	r3, r0, #1
 8001c8a:	d102      	bne.n	8001c92 <_write_r+0x1e>
 8001c8c:	682b      	ldr	r3, [r5, #0]
 8001c8e:	b103      	cbz	r3, 8001c92 <_write_r+0x1e>
 8001c90:	6023      	str	r3, [r4, #0]
 8001c92:	bd38      	pop	{r3, r4, r5, pc}
 8001c94:	200000d4 	.word	0x200000d4

08001c98 <_close_r>:
 8001c98:	b538      	push	{r3, r4, r5, lr}
 8001c9a:	4d06      	ldr	r5, [pc, #24]	; (8001cb4 <_close_r+0x1c>)
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	4604      	mov	r4, r0
 8001ca0:	4608      	mov	r0, r1
 8001ca2:	602b      	str	r3, [r5, #0]
 8001ca4:	f000 f85a 	bl	8001d5c <_close>
 8001ca8:	1c43      	adds	r3, r0, #1
 8001caa:	d102      	bne.n	8001cb2 <_close_r+0x1a>
 8001cac:	682b      	ldr	r3, [r5, #0]
 8001cae:	b103      	cbz	r3, 8001cb2 <_close_r+0x1a>
 8001cb0:	6023      	str	r3, [r4, #0]
 8001cb2:	bd38      	pop	{r3, r4, r5, pc}
 8001cb4:	200000d4 	.word	0x200000d4

08001cb8 <_fstat_r>:
 8001cb8:	b538      	push	{r3, r4, r5, lr}
 8001cba:	4d07      	ldr	r5, [pc, #28]	; (8001cd8 <_fstat_r+0x20>)
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	4604      	mov	r4, r0
 8001cc0:	4608      	mov	r0, r1
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	602b      	str	r3, [r5, #0]
 8001cc6:	f000 f851 	bl	8001d6c <_fstat>
 8001cca:	1c43      	adds	r3, r0, #1
 8001ccc:	d102      	bne.n	8001cd4 <_fstat_r+0x1c>
 8001cce:	682b      	ldr	r3, [r5, #0]
 8001cd0:	b103      	cbz	r3, 8001cd4 <_fstat_r+0x1c>
 8001cd2:	6023      	str	r3, [r4, #0]
 8001cd4:	bd38      	pop	{r3, r4, r5, pc}
 8001cd6:	bf00      	nop
 8001cd8:	200000d4 	.word	0x200000d4

08001cdc <_isatty_r>:
 8001cdc:	b538      	push	{r3, r4, r5, lr}
 8001cde:	4d06      	ldr	r5, [pc, #24]	; (8001cf8 <_isatty_r+0x1c>)
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	4604      	mov	r4, r0
 8001ce4:	4608      	mov	r0, r1
 8001ce6:	602b      	str	r3, [r5, #0]
 8001ce8:	f000 f848 	bl	8001d7c <_isatty>
 8001cec:	1c43      	adds	r3, r0, #1
 8001cee:	d102      	bne.n	8001cf6 <_isatty_r+0x1a>
 8001cf0:	682b      	ldr	r3, [r5, #0]
 8001cf2:	b103      	cbz	r3, 8001cf6 <_isatty_r+0x1a>
 8001cf4:	6023      	str	r3, [r4, #0]
 8001cf6:	bd38      	pop	{r3, r4, r5, pc}
 8001cf8:	200000d4 	.word	0x200000d4

08001cfc <_lseek_r>:
 8001cfc:	b538      	push	{r3, r4, r5, lr}
 8001cfe:	4d07      	ldr	r5, [pc, #28]	; (8001d1c <_lseek_r+0x20>)
 8001d00:	4604      	mov	r4, r0
 8001d02:	4608      	mov	r0, r1
 8001d04:	4611      	mov	r1, r2
 8001d06:	2200      	movs	r2, #0
 8001d08:	602a      	str	r2, [r5, #0]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	f000 f83e 	bl	8001d8c <_lseek>
 8001d10:	1c43      	adds	r3, r0, #1
 8001d12:	d102      	bne.n	8001d1a <_lseek_r+0x1e>
 8001d14:	682b      	ldr	r3, [r5, #0]
 8001d16:	b103      	cbz	r3, 8001d1a <_lseek_r+0x1e>
 8001d18:	6023      	str	r3, [r4, #0]
 8001d1a:	bd38      	pop	{r3, r4, r5, pc}
 8001d1c:	200000d4 	.word	0x200000d4

08001d20 <__malloc_lock>:
 8001d20:	4801      	ldr	r0, [pc, #4]	; (8001d28 <__malloc_lock+0x8>)
 8001d22:	f7ff bdfb 	b.w	800191c <__retarget_lock_acquire_recursive>
 8001d26:	bf00      	nop
 8001d28:	200000cc 	.word	0x200000cc

08001d2c <__malloc_unlock>:
 8001d2c:	4801      	ldr	r0, [pc, #4]	; (8001d34 <__malloc_unlock+0x8>)
 8001d2e:	f7ff bdf6 	b.w	800191e <__retarget_lock_release_recursive>
 8001d32:	bf00      	nop
 8001d34:	200000cc 	.word	0x200000cc

08001d38 <_read_r>:
 8001d38:	b538      	push	{r3, r4, r5, lr}
 8001d3a:	4d07      	ldr	r5, [pc, #28]	; (8001d58 <_read_r+0x20>)
 8001d3c:	4604      	mov	r4, r0
 8001d3e:	4608      	mov	r0, r1
 8001d40:	4611      	mov	r1, r2
 8001d42:	2200      	movs	r2, #0
 8001d44:	602a      	str	r2, [r5, #0]
 8001d46:	461a      	mov	r2, r3
 8001d48:	f000 f828 	bl	8001d9c <_read>
 8001d4c:	1c43      	adds	r3, r0, #1
 8001d4e:	d102      	bne.n	8001d56 <_read_r+0x1e>
 8001d50:	682b      	ldr	r3, [r5, #0]
 8001d52:	b103      	cbz	r3, 8001d56 <_read_r+0x1e>
 8001d54:	6023      	str	r3, [r4, #0]
 8001d56:	bd38      	pop	{r3, r4, r5, pc}
 8001d58:	200000d4 	.word	0x200000d4

08001d5c <_close>:
 8001d5c:	4b02      	ldr	r3, [pc, #8]	; (8001d68 <_close+0xc>)
 8001d5e:	2258      	movs	r2, #88	; 0x58
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	f04f 30ff 	mov.w	r0, #4294967295
 8001d66:	4770      	bx	lr
 8001d68:	200000d4 	.word	0x200000d4

08001d6c <_fstat>:
 8001d6c:	4b02      	ldr	r3, [pc, #8]	; (8001d78 <_fstat+0xc>)
 8001d6e:	2258      	movs	r2, #88	; 0x58
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	f04f 30ff 	mov.w	r0, #4294967295
 8001d76:	4770      	bx	lr
 8001d78:	200000d4 	.word	0x200000d4

08001d7c <_isatty>:
 8001d7c:	4b02      	ldr	r3, [pc, #8]	; (8001d88 <_isatty+0xc>)
 8001d7e:	2258      	movs	r2, #88	; 0x58
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	2000      	movs	r0, #0
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	200000d4 	.word	0x200000d4

08001d8c <_lseek>:
 8001d8c:	4b02      	ldr	r3, [pc, #8]	; (8001d98 <_lseek+0xc>)
 8001d8e:	2258      	movs	r2, #88	; 0x58
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	f04f 30ff 	mov.w	r0, #4294967295
 8001d96:	4770      	bx	lr
 8001d98:	200000d4 	.word	0x200000d4

08001d9c <_read>:
 8001d9c:	4b02      	ldr	r3, [pc, #8]	; (8001da8 <_read+0xc>)
 8001d9e:	2258      	movs	r2, #88	; 0x58
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	f04f 30ff 	mov.w	r0, #4294967295
 8001da6:	4770      	bx	lr
 8001da8:	200000d4 	.word	0x200000d4

08001dac <_sbrk>:
 8001dac:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <_sbrk+0x14>)
 8001dae:	6819      	ldr	r1, [r3, #0]
 8001db0:	4602      	mov	r2, r0
 8001db2:	b909      	cbnz	r1, 8001db8 <_sbrk+0xc>
 8001db4:	4903      	ldr	r1, [pc, #12]	; (8001dc4 <_sbrk+0x18>)
 8001db6:	6019      	str	r1, [r3, #0]
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	4402      	add	r2, r0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	4770      	bx	lr
 8001dc0:	20000090 	.word	0x20000090
 8001dc4:	200000d8 	.word	0x200000d8

08001dc8 <_init>:
 8001dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dca:	bf00      	nop
 8001dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dce:	bc08      	pop	{r3}
 8001dd0:	469e      	mov	lr, r3
 8001dd2:	4770      	bx	lr

08001dd4 <_fini>:
 8001dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dd6:	bf00      	nop
 8001dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dda:	bc08      	pop	{r3}
 8001ddc:	469e      	mov	lr, r3
 8001dde:	4770      	bx	lr
